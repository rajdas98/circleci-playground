{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/components/ProgressBar/AnalyticsLinearProgressBar/index.tsx\";\n\nimport { Line } from 'rc-progress';\nimport React from 'react';\nimport { useTheme } from '@material-ui/core/styles';\n\nvar AnalyticsLinearProgressBar = function AnalyticsLinearProgressBar(_ref) {\n  var value = _ref.value,\n      maxValue = _ref.maxValue,\n      isInTable = _ref.isInTable;\n  var width = 2;\n  var resultValue = value / maxValue * 100;\n\n  var _useTheme = useTheme(),\n      palette = _useTheme.palette;\n\n  return /*#__PURE__*/React.createElement(Line, {\n    percent: resultValue,\n    strokeWidth: width,\n    trailWidth: width,\n    strokeColor: isInTable ? palette.primary.dark : palette.secondary.dark,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default AnalyticsLinearProgressBar;","map":{"version":3,"sources":["/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/components/ProgressBar/AnalyticsLinearProgressBar/index.tsx"],"names":["Line","React","useTheme","AnalyticsLinearProgressBar","value","maxValue","isInTable","width","resultValue","palette","primary","dark","secondary"],"mappings":";;;AAAA,SAASA,IAAT,QAAqB,aAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,0BAAzB;;AAQA,IAAMC,0BAA4D,GAAG,SAA/DA,0BAA+D,OAI/D;AAAA,MAHJC,KAGI,QAHJA,KAGI;AAAA,MAFJC,QAEI,QAFJA,QAEI;AAAA,MADJC,SACI,QADJA,SACI;AACJ,MAAMC,KAAa,GAAG,CAAtB;AACA,MAAMC,WAAW,GAAKJ,KAAD,GAAqBC,QAAtB,GAA6C,GAAjE;;AAFI,kBAIgBH,QAAQ,EAJxB;AAAA,MAIIO,OAJJ,aAIIA,OAJJ;;AAMJ,sBACE,oBAAC,IAAD;AACE,IAAA,OAAO,EAAED,WADX;AAEE,IAAA,WAAW,EAAED,KAFf;AAGE,IAAA,UAAU,EAAEA,KAHd;AAIE,IAAA,WAAW,EAAED,SAAS,GAAGG,OAAO,CAACC,OAAR,CAAgBC,IAAnB,GAA0BF,OAAO,CAACG,SAAR,CAAkBD,IAJpE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAQD,CAlBD;;AAoBA,eAAeR,0BAAf","sourcesContent":["import { Line } from 'rc-progress';\nimport React from 'react';\nimport { useTheme } from '@material-ui/core/styles';\n\ninterface LinearProgressBarProps {\n  value: number;\n  maxValue: number;\n  isInTable: boolean;\n}\n\nconst AnalyticsLinearProgressBar: React.FC<LinearProgressBarProps> = ({\n  value,\n  maxValue,\n  isInTable,\n}) => {\n  const width: number = 2;\n  const resultValue = ((value as number) / (maxValue as number)) * 100;\n\n  const { palette } = useTheme();\n\n  return (\n    <Line\n      percent={resultValue}\n      strokeWidth={width}\n      trailWidth={width}\n      strokeColor={isInTable ? palette.primary.dark : palette.secondary.dark}\n    />\n  );\n};\n\nexport default AnalyticsLinearProgressBar;\n"]},"metadata":{},"sourceType":"module"}