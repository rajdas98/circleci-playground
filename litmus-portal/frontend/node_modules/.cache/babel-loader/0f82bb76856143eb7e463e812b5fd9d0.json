{"ast":null,"code":"import _slicedToArray from \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/pages/AnalyticsPage/index.tsx\";\n\n/* eslint-disable no-unused-expressions */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable no-loop-func */\nimport { useQuery } from '@apollo/client';\nimport { Typography } from '@material-ui/core';\nimport moment from 'moment';\nimport React, { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport Loader from '../../components/Loader';\nimport Scaffold from '../../containers/layouts/Scaffold';\nimport { WORKFLOW_LIST_DETAILS } from '../../graphql';\nimport BackButton from '../../components/Button/BackButton';\nimport PopOver from '../../views/ChaosWorkflows/BrowseAnalytics/PopOver';\nimport WorkflowRunsBarChart from '../../views/ChaosWorkflows/BrowseAnalytics/WorkflowRunsBarChart';\nimport WorkflowDetailsTable from '../../views/ChaosWorkflows/BrowseAnalytics/WorkflowRunDetailsTable';\nimport useStyles from './styles';\n\nvar AnalyticsPage = function AnalyticsPage() {\n  var classes = useStyles();\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      popoverOpen = _React$useState2[0],\n      setPopoverOpen = _React$useState2[1];\n\n  var _React$useState3 = React.useState(true),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      workflowRunPresent = _React$useState4[0],\n      setWorkflowRunPresent = _React$useState4[1];\n\n  var _useLocation = useLocation(),\n      pathname = _useLocation.pathname; // Getting the workflow nome from the pathname\n\n\n  var workflowId = pathname.split('/')[3];\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _React$useState5 = React.useState(''),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      selectedWorkflowRunID = _React$useState6[0],\n      setSelectedWorkflowRunID = _React$useState6[1];\n\n  var _React$useState7 = React.useState(),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      selectedWorkflowRunDetails = _React$useState8[0],\n      setSelectedWorkflowRunDetails = _React$useState8[1];\n\n  var _React$useState9 = React.useState([]),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      workflowRunDataForPlot = _React$useState10[0],\n      setWorkflowRunDataForPlot = _React$useState10[1];\n\n  var _React$useState11 = React.useState({\n    testsPassed: 0,\n    testsFailed: 0,\n    resilienceScore: 0,\n    testDate: '',\n    xLoc: 0,\n    yLoc: 0,\n    workflowRunID: ''\n  }),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      selectedWorkflowRunData = _React$useState12[0],\n      setSelectedWorkflowRunData = _React$useState12[1]; // get ProjectID\n\n\n  var selectedProjectID = useSelector(function (state) {\n    return state.userData.selectedProjectID;\n  }); // Apollo query to get the scheduled workflow data\n\n  var _useQuery = useQuery(WORKFLOW_LIST_DETAILS, {\n    variables: {\n      projectID: selectedProjectID,\n      workflowIDs: []\n    }\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error;\n\n  var setPopOverDisplay = function setPopOverDisplay(selectedWorkflowRunDetails, visible) {\n    setSelectedWorkflowRunData(selectedWorkflowRunDetails);\n    setPopoverOpen(visible);\n  };\n\n  useEffect(function () {\n    var workflowRuns = [];\n    var experimentTestResultsArray = [];\n    var chaosDataArray = [];\n    var validWorkflowRunsData = [];\n\n    try {\n      var selectedWorkflowSchedule = data === null || data === void 0 ? void 0 : data.ListWorkflow.filter(function (w) {\n        return w.workflow_id === workflowId;\n      });\n      var selectedWorkflows = selectedWorkflowSchedule ? selectedWorkflowSchedule[0].workflow_runs : [];\n      selectedWorkflows === null || selectedWorkflows === void 0 ? void 0 : selectedWorkflows.forEach(function (data) {\n        try {\n          (function () {\n            var executionData = JSON.parse(data.execution_data);\n            var nodes = executionData.nodes;\n            var experimentTestResultsArrayPerWorkflowRun = [];\n            var weightsSum = 0;\n            var isValid = false;\n            var totalExperimentsPassed = 0;\n\n            for (var _i = 0, _Object$keys = Object.keys(nodes); _i < _Object$keys.length; _i++) {\n              var key = _Object$keys[_i];\n              var node = nodes[key];\n\n              if (node.chaosData) {\n                (function () {\n                  var chaosData = node.chaosData;\n                  chaosDataArray.push(chaosData);\n\n                  if (chaosData.experimentVerdict === 'Pass' || chaosData.experimentVerdict === 'Fail') {\n                    var weightageMap = selectedWorkflowSchedule ? selectedWorkflowSchedule[0].weightages : [];\n                    weightageMap.forEach(function (weightage) {\n                      if (weightage.experiment_name === chaosData.experimentName) {\n                        if (chaosData.experimentVerdict === 'Pass') {\n                          experimentTestResultsArray.push(weightage.weightage);\n                          experimentTestResultsArrayPerWorkflowRun.push(weightage.weightage);\n                          totalExperimentsPassed += 1;\n                        }\n\n                        if (chaosData.experimentVerdict === 'Fail') {\n                          experimentTestResultsArray.push(0);\n                          experimentTestResultsArrayPerWorkflowRun.push(0);\n                        }\n\n                        if (chaosData.experimentVerdict === 'Pass' || chaosData.experimentVerdict === 'Fail') {\n                          weightsSum += weightage.weightage;\n                          isValid = true;\n                        }\n                      }\n                    });\n                  }\n                })();\n              }\n            }\n\n            if (executionData.event_type === 'UPDATE' && isValid) {\n              var workflowRun = {\n                testsPassed: totalExperimentsPassed,\n                testsFailed: experimentTestResultsArrayPerWorkflowRun.length - totalExperimentsPassed,\n                resilienceScore: experimentTestResultsArrayPerWorkflowRun.length ? experimentTestResultsArrayPerWorkflowRun.reduce(function (a, b) {\n                  return a + b;\n                }, 0) / weightsSum * 100 : 0,\n                testDate: data.last_updated,\n                workflowRunID: data.workflow_run_id,\n                workflowID: workflowId\n              };\n              validWorkflowRunsData.push(workflowRun);\n            }\n          })();\n        } catch (error) {\n          console.error(error);\n        }\n      });\n    } catch (error) {\n      setWorkflowRunPresent(false);\n      return;\n    }\n\n    if (validWorkflowRunsData.length === 1) {\n      var resDate = moment(new Date(parseInt(validWorkflowRunsData[0].testDate, 10) * 1000).toString()).format('YYYY-MM-DD');\n      var edgeLow = {\n        testsPassed: 0,\n        testsFailed: 0,\n        resilienceScore: 0,\n        testDate: Math.round(parseInt(moment(resDate).subtract(0.5, 'days').endOf('day').format('x'), 10) / 1000).toString(),\n        workflowRunID: 'edge_low',\n        workflowID: workflowId\n      };\n      var edgeHigh = {\n        testsPassed: 0,\n        testsFailed: 0,\n        resilienceScore: 0,\n        testDate: Math.round(parseInt(moment(resDate).add(0.5, 'days').startOf('day').format('x'), 10) / 1000).toString(),\n        workflowRunID: 'edge_high',\n        workflowID: workflowId\n      };\n      workflowRuns.push(edgeLow);\n      workflowRuns.push(validWorkflowRunsData[0]);\n      workflowRuns.push(edgeHigh);\n      setWorkflowRunDataForPlot(workflowRuns);\n    } else {\n      setWorkflowRunDataForPlot(validWorkflowRunsData);\n    }\n  }, [data]);\n  useEffect(function () {\n    var workflowTestsArray = [];\n\n    try {\n      var selectedWorkflowSchedule = data === null || data === void 0 ? void 0 : data.ListWorkflow.filter(function (w) {\n        return w.workflow_id === workflowId;\n      });\n      var workflowRuns = selectedWorkflowSchedule ? selectedWorkflowSchedule[0].workflow_runs : [];\n      var selectedWorkflows = workflowRuns.filter(function (w) {\n        return w.workflow_run_id === selectedWorkflowRunID;\n      });\n      selectedWorkflows === null || selectedWorkflows === void 0 ? void 0 : selectedWorkflows.forEach(function (data) {\n        try {\n          (function () {\n            var executionData = JSON.parse(data.execution_data);\n            var nodes = executionData.nodes;\n            var index = 1;\n\n            for (var _i2 = 0, _Object$keys2 = Object.keys(nodes); _i2 < _Object$keys2.length; _i2++) {\n              var key = _Object$keys2[_i2];\n              var node = nodes[key];\n\n              if (node.chaosData) {\n                (function () {\n                  var chaosData = node.chaosData;\n                  var weightageMap = selectedWorkflowSchedule ? selectedWorkflowSchedule[0].weightages : [];\n                  weightageMap.forEach(function (weightage) {\n                    if (weightage.experiment_name === chaosData.experimentName) {\n                      workflowTestsArray.push({\n                        test_id: index,\n                        test_name: chaosData.experimentName,\n                        test_result: chaosData.experimentVerdict,\n                        test_weight: weightage.weightage,\n                        resulting_points: chaosData.experimentVerdict === 'Pass' ? weightage.weightage : 0,\n                        last_run: chaosData.lastUpdatedAt\n                      });\n                    }\n                  });\n                })();\n              }\n\n              index += 1;\n            }\n          })();\n        } catch (error) {\n          console.error(error);\n        }\n      });\n      setSelectedWorkflowRunDetails(workflowTestsArray);\n    } catch (error) {\n      setWorkflowRunPresent(false);\n    }\n  }, [selectedWorkflowRunID, data]);\n  return /*#__PURE__*/React.createElement(Scaffold, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 5\n    }\n  }, workflowRunPresent ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 9\n    }\n  }, workflowRunDataForPlot.length ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.rootContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.button,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(BackButton, {\n    isDisabled: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h4\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 19\n    }\n  }, \"Workflow Analytics\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.headerDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body1\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 19\n    }\n  }, t('analytics.viewTestResult'))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.analyticsDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(WorkflowRunsBarChart, {\n    workflowRunData: workflowRunDataForPlot,\n    callBackToShowPopOver: setPopOverDisplay,\n    callBackToSelectWorkflowRun: function callBackToSelectWorkflowRun(selectedWorkflowRunID) {\n      setSelectedWorkflowRunID(selectedWorkflowRunID);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 19\n    }\n  }), selectedWorkflowRunID !== '' ? /*#__PURE__*/React.createElement(WorkflowDetailsTable, {\n    workflowRunDetails: selectedWorkflowRunDetails !== null && selectedWorkflowRunDetails !== void 0 ? selectedWorkflowRunDetails : [],\n    workflowID: workflowId,\n    reloadAnalytics: function reloadAnalytics() {\n      setSelectedWorkflowRunID('');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 21\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 21\n    }\n  }), popoverOpen ? /*#__PURE__*/React.createElement(PopOver, {\n    testsPassed: selectedWorkflowRunData.testsPassed,\n    testsFailed: selectedWorkflowRunData.testsFailed,\n    resilienceScore: selectedWorkflowRunData.resilienceScore,\n    testDate: selectedWorkflowRunData.testDate,\n    xLoc: selectedWorkflowRunData.xLoc,\n    yLoc: selectedWorkflowRunData.yLoc,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 21\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 21\n    }\n  })))) : error ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.waitingText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 15\n    }\n  }, t('analytics.fetchError'))) : /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.waitingScreen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.waitingText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 15\n    }\n  }, t('analytics.chaosStartWaitingMessage')), /*#__PURE__*/React.createElement(Loader, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 15\n    }\n  }))) : /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.waitingScreen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.waitingText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 11\n    }\n  }, t('analytics.waitingMessage')), /*#__PURE__*/React.createElement(Loader, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default AnalyticsPage;","map":{"version":3,"sources":["/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/pages/AnalyticsPage/index.tsx"],"names":["useQuery","Typography","moment","React","useEffect","useTranslation","useSelector","useLocation","Loader","Scaffold","WORKFLOW_LIST_DETAILS","BackButton","PopOver","WorkflowRunsBarChart","WorkflowDetailsTable","useStyles","AnalyticsPage","classes","useState","popoverOpen","setPopoverOpen","workflowRunPresent","setWorkflowRunPresent","pathname","workflowId","split","t","selectedWorkflowRunID","setSelectedWorkflowRunID","selectedWorkflowRunDetails","setSelectedWorkflowRunDetails","workflowRunDataForPlot","setWorkflowRunDataForPlot","testsPassed","testsFailed","resilienceScore","testDate","xLoc","yLoc","workflowRunID","selectedWorkflowRunData","setSelectedWorkflowRunData","selectedProjectID","state","userData","variables","projectID","workflowIDs","data","error","setPopOverDisplay","visible","workflowRuns","experimentTestResultsArray","chaosDataArray","validWorkflowRunsData","selectedWorkflowSchedule","ListWorkflow","filter","w","workflow_id","selectedWorkflows","workflow_runs","forEach","executionData","JSON","parse","execution_data","nodes","experimentTestResultsArrayPerWorkflowRun","weightsSum","isValid","totalExperimentsPassed","Object","keys","key","node","chaosData","push","experimentVerdict","weightageMap","weightages","weightage","experiment_name","experimentName","event_type","workflowRun","length","reduce","a","b","last_updated","workflow_run_id","workflowID","console","resDate","Date","parseInt","toString","format","edgeLow","Math","round","subtract","endOf","edgeHigh","add","startOf","workflowTestsArray","index","test_id","test_name","test_result","test_weight","resulting_points","last_run","lastUpdatedAt","rootContainer","root","button","headerDiv","analyticsDiv","waitingText","waitingScreen"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-expressions */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-loop-func */\nimport { useQuery } from '@apollo/client';\nimport { Typography } from '@material-ui/core';\nimport moment from 'moment';\nimport React, { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport Loader from '../../components/Loader';\nimport Scaffold from '../../containers/layouts/Scaffold';\nimport { WORKFLOW_LIST_DETAILS } from '../../graphql';\nimport { ChaosData, ExecutionData } from '../../models/graphql/workflowData';\nimport { RootState } from '../../redux/reducers';\nimport BackButton from '../../components/Button/BackButton';\nimport PopOver from '../../views/ChaosWorkflows/BrowseAnalytics/PopOver';\nimport WorkflowRunsBarChart from '../../views/ChaosWorkflows/BrowseAnalytics/WorkflowRunsBarChart';\nimport WorkflowDetailsTable from '../../views/ChaosWorkflows/BrowseAnalytics/WorkflowRunDetailsTable';\nimport useStyles from './styles';\nimport {\n  WeightageMap,\n  WorkflowList,\n  WorkflowListDataVars,\n} from '../../models/graphql/workflowListData';\n\ninterface WorkflowRunData {\n  testsPassed: number;\n  testsFailed: number;\n  resilienceScore: number;\n  testDate: string;\n  workflowRunID: string;\n  workflowID: string;\n}\n\ninterface SelectedWorkflowRunData {\n  testsPassed: number;\n  testsFailed: number;\n  resilienceScore: number;\n  testDate: string;\n  xLoc: number;\n  yLoc: number;\n  workflowRunID: string;\n}\n\ninterface WorkFlowTests {\n  test_id: number;\n  test_name: string;\n  test_result: string;\n  test_weight: number;\n  resulting_points: number;\n  last_run: string;\n}\n\nconst AnalyticsPage: React.FC = () => {\n  const classes = useStyles();\n  const [popoverOpen, setPopoverOpen] = React.useState<boolean>(false);\n  const [workflowRunPresent, setWorkflowRunPresent] = React.useState<boolean>(\n    true\n  );\n  const { pathname } = useLocation();\n  // Getting the workflow nome from the pathname\n  const workflowId = pathname.split('/')[3];\n  const { t } = useTranslation();\n  const [selectedWorkflowRunID, setSelectedWorkflowRunID] = React.useState<\n    string\n  >('');\n  const [\n    selectedWorkflowRunDetails,\n    setSelectedWorkflowRunDetails,\n  ] = React.useState<WorkFlowTests[]>();\n  const [workflowRunDataForPlot, setWorkflowRunDataForPlot] = React.useState<\n    WorkflowRunData[]\n  >([]);\n  const [selectedWorkflowRunData, setSelectedWorkflowRunData] = React.useState<\n    SelectedWorkflowRunData\n  >({\n    testsPassed: 0,\n    testsFailed: 0,\n    resilienceScore: 0,\n    testDate: '',\n    xLoc: 0,\n    yLoc: 0,\n    workflowRunID: '',\n  });\n\n  // get ProjectID\n  const selectedProjectID = useSelector(\n    (state: RootState) => state.userData.selectedProjectID\n  );\n\n  // Apollo query to get the scheduled workflow data\n  const { data, error } = useQuery<WorkflowList, WorkflowListDataVars>(\n    WORKFLOW_LIST_DETAILS,\n    {\n      variables: { projectID: selectedProjectID, workflowIDs: [] },\n    }\n  );\n\n  const setPopOverDisplay = (\n    selectedWorkflowRunDetails: SelectedWorkflowRunData,\n    visible: boolean\n  ) => {\n    setSelectedWorkflowRunData(selectedWorkflowRunDetails);\n    setPopoverOpen(visible);\n  };\n\n  useEffect(() => {\n    const workflowRuns: WorkflowRunData[] = [];\n    const experimentTestResultsArray: number[] = [];\n    const chaosDataArray: ChaosData[] = [];\n    const validWorkflowRunsData: WorkflowRunData[] = [];\n    try {\n      const selectedWorkflowSchedule = data?.ListWorkflow.filter(\n        (w) => w.workflow_id === workflowId\n      );\n      const selectedWorkflows = selectedWorkflowSchedule\n        ? selectedWorkflowSchedule[0].workflow_runs\n        : [];\n      selectedWorkflows?.forEach((data) => {\n        try {\n          const executionData: ExecutionData = JSON.parse(data.execution_data);\n          const { nodes } = executionData;\n          const experimentTestResultsArrayPerWorkflowRun: number[] = [];\n          let weightsSum: number = 0;\n          let isValid: boolean = false;\n          let totalExperimentsPassed: number = 0;\n          for (const key of Object.keys(nodes)) {\n            const node = nodes[key];\n            if (node.chaosData) {\n              const { chaosData } = node;\n              chaosDataArray.push(chaosData);\n              if (\n                chaosData.experimentVerdict === 'Pass' ||\n                chaosData.experimentVerdict === 'Fail'\n              ) {\n                const weightageMap: WeightageMap[] = selectedWorkflowSchedule\n                  ? selectedWorkflowSchedule[0].weightages\n                  : [];\n                weightageMap.forEach((weightage) => {\n                  if (weightage.experiment_name === chaosData.experimentName) {\n                    if (chaosData.experimentVerdict === 'Pass') {\n                      experimentTestResultsArray.push(weightage.weightage);\n                      experimentTestResultsArrayPerWorkflowRun.push(\n                        weightage.weightage\n                      );\n                      totalExperimentsPassed += 1;\n                    }\n                    if (chaosData.experimentVerdict === 'Fail') {\n                      experimentTestResultsArray.push(0);\n                      experimentTestResultsArrayPerWorkflowRun.push(0);\n                    }\n                    if (\n                      chaosData.experimentVerdict === 'Pass' ||\n                      chaosData.experimentVerdict === 'Fail'\n                    ) {\n                      weightsSum += weightage.weightage;\n                      isValid = true;\n                    }\n                  }\n                });\n              }\n            }\n          }\n          if (executionData.event_type === 'UPDATE' && isValid) {\n            const workflowRun = {\n              testsPassed: totalExperimentsPassed,\n              testsFailed:\n                experimentTestResultsArrayPerWorkflowRun.length -\n                totalExperimentsPassed,\n              resilienceScore: experimentTestResultsArrayPerWorkflowRun.length\n                ? (experimentTestResultsArrayPerWorkflowRun.reduce(\n                    (a, b) => a + b,\n                    0\n                  ) /\n                    weightsSum) *\n                  100\n                : 0,\n              testDate: data.last_updated,\n              workflowRunID: data.workflow_run_id,\n              workflowID: workflowId,\n            };\n            validWorkflowRunsData.push(workflowRun);\n          }\n        } catch (error) {\n          console.error(error);\n        }\n      });\n    } catch (error) {\n      setWorkflowRunPresent(false);\n      return;\n    }\n    if (validWorkflowRunsData.length === 1) {\n      const resDate = moment(\n        new Date(\n          parseInt(validWorkflowRunsData[0].testDate, 10) * 1000\n        ).toString()\n      ).format('YYYY-MM-DD');\n      const edgeLow = {\n        testsPassed: 0,\n        testsFailed: 0,\n        resilienceScore: 0,\n        testDate: Math.round(\n          parseInt(\n            moment(resDate).subtract(0.5, 'days').endOf('day').format('x'),\n            10\n          ) / 1000\n        ).toString(),\n        workflowRunID: 'edge_low',\n        workflowID: workflowId,\n      };\n      const edgeHigh = {\n        testsPassed: 0,\n        testsFailed: 0,\n        resilienceScore: 0,\n        testDate: Math.round(\n          parseInt(\n            moment(resDate).add(0.5, 'days').startOf('day').format('x'),\n            10\n          ) / 1000\n        ).toString(),\n        workflowRunID: 'edge_high',\n        workflowID: workflowId,\n      };\n      workflowRuns.push(edgeLow);\n      workflowRuns.push(validWorkflowRunsData[0]);\n      workflowRuns.push(edgeHigh);\n      setWorkflowRunDataForPlot(workflowRuns);\n    } else {\n      setWorkflowRunDataForPlot(validWorkflowRunsData);\n    }\n  }, [data]);\n\n  useEffect(() => {\n    const workflowTestsArray: WorkFlowTests[] = [];\n    try {\n      const selectedWorkflowSchedule = data?.ListWorkflow.filter(\n        (w) => w.workflow_id === workflowId\n      );\n      const workflowRuns = selectedWorkflowSchedule\n        ? selectedWorkflowSchedule[0].workflow_runs\n        : [];\n      const selectedWorkflows = workflowRuns.filter(\n        (w) => w.workflow_run_id === selectedWorkflowRunID\n      );\n      selectedWorkflows?.forEach((data) => {\n        try {\n          const executionData: ExecutionData = JSON.parse(data.execution_data);\n          const { nodes } = executionData;\n          let index: number = 1;\n          for (const key of Object.keys(nodes)) {\n            const node = nodes[key];\n            if (node.chaosData) {\n              const { chaosData } = node;\n              const weightageMap: WeightageMap[] = selectedWorkflowSchedule\n                ? selectedWorkflowSchedule[0].weightages\n                : [];\n              weightageMap.forEach((weightage) => {\n                if (weightage.experiment_name === chaosData.experimentName) {\n                  workflowTestsArray.push({\n                    test_id: index,\n                    test_name: chaosData.experimentName,\n                    test_result: chaosData.experimentVerdict,\n                    test_weight: weightage.weightage,\n                    resulting_points:\n                      chaosData.experimentVerdict === 'Pass'\n                        ? weightage.weightage\n                        : 0,\n                    last_run: chaosData.lastUpdatedAt,\n                  });\n                }\n              });\n            }\n            index += 1;\n          }\n        } catch (error) {\n          console.error(error);\n        }\n      });\n      setSelectedWorkflowRunDetails(workflowTestsArray);\n    } catch (error) {\n      setWorkflowRunPresent(false);\n    }\n  }, [selectedWorkflowRunID, data]);\n\n  return (\n    <Scaffold>\n      {workflowRunPresent ? (\n        <div>\n          {workflowRunDataForPlot.length ? (\n            <div className={classes.rootContainer}>\n              <div className={classes.root}>\n                <div className={classes.button}>\n                  <BackButton isDisabled={false} />\n                </div>\n                <Typography variant=\"h4\">\n                  <strong>Workflow Analytics</strong>\n                </Typography>\n                <div className={classes.headerDiv}>\n                  <Typography variant=\"body1\">\n                    {t('analytics.viewTestResult')}\n                  </Typography>\n                </div>\n                <div className={classes.analyticsDiv}>\n                  <WorkflowRunsBarChart\n                    workflowRunData={workflowRunDataForPlot}\n                    callBackToShowPopOver={setPopOverDisplay}\n                    callBackToSelectWorkflowRun={(\n                      selectedWorkflowRunID: string\n                    ) => {\n                      setSelectedWorkflowRunID(selectedWorkflowRunID);\n                    }}\n                  />\n                  {selectedWorkflowRunID !== '' ? (\n                    <WorkflowDetailsTable\n                      workflowRunDetails={selectedWorkflowRunDetails ?? []}\n                      workflowID={workflowId}\n                      reloadAnalytics={() => {\n                        setSelectedWorkflowRunID('');\n                      }}\n                    />\n                  ) : (\n                    <div />\n                  )}\n                  {popoverOpen ? (\n                    <PopOver\n                      testsPassed={selectedWorkflowRunData.testsPassed}\n                      testsFailed={selectedWorkflowRunData.testsFailed}\n                      resilienceScore={selectedWorkflowRunData.resilienceScore}\n                      testDate={selectedWorkflowRunData.testDate}\n                      xLoc={selectedWorkflowRunData.xLoc}\n                      yLoc={selectedWorkflowRunData.yLoc}\n                    />\n                  ) : (\n                    <div />\n                  )}\n                </div>\n              </div>\n            </div>\n          ) : error ? (\n            <div>\n              <Typography className={classes.waitingText}>\n                {t('analytics.fetchError')}\n              </Typography>\n            </div>\n          ) : (\n            <div className={classes.waitingScreen}>\n              <Typography className={classes.waitingText}>\n                {t('analytics.chaosStartWaitingMessage')}\n              </Typography>\n              <Loader />\n            </div>\n          )}\n        </div>\n      ) : (\n        <div className={classes.waitingScreen}>\n          <Typography className={classes.waitingText}>\n            {t('analytics.waitingMessage')}\n          </Typography>\n          <Loader />\n        </div>\n      )}\n    </Scaffold>\n  );\n};\n\nexport default AnalyticsPage;\n"]},"metadata":{},"sourceType":"module"}