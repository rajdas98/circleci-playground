{"ast":null,"code":"import _toConsumableArray from \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/views/ChaosWorkflows/BrowseAnalytics/WorkflowComparisonPlot/index.tsx\";\n\n/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport Plotly from 'plotly.js';\nimport createPlotlyComponent from 'react-plotly.js/factory';\nimport { FormControl, InputLabel, MenuItem, Select } from '@material-ui/core';\nimport moment from 'moment';\nimport { useTheme } from '@material-ui/core/styles';\nimport useStyles from './style';\nimport Score from './Score';\nvar Plot = createPlotlyComponent(Plotly);\n\nvar ResilienceScoreComparisonPlot = function ResilienceScoreComparisonPlot(_ref) {\n  var xData = _ref.xData,\n      yData = _ref.yData,\n      labels = _ref.labels,\n      colors = _ref.colors;\n  var classes = useStyles();\n\n  var _useTheme = useTheme(),\n      palette = _useTheme.palette;\n\n  var _React$useState = React.useState({\n    name: 'Daily'\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      currentGranularity = _React$useState2[0],\n      setCurrentGranularity = _React$useState2[1];\n\n  var handleChangeInGranularity = function handleChangeInGranularity(event) {\n    var name = event.target.name;\n\n    if (name !== currentGranularity.name) {\n      setCurrentGranularity(_objectSpread(_objectSpread({}, currentGranularity), {}, {\n        [name]: event.target.value\n      }));\n    }\n  };\n\n  var _React$useState3 = React.useState([]),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      plotData = _React$useState4[0],\n      setPlotData = _React$useState4[1];\n\n  var _React$useState5 = React.useState({\n    highScore: 0,\n    lowScore: 0,\n    highColor: '',\n    lowColor: '',\n    highName: '',\n    lowName: ''\n  }),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      edgeData = _React$useState6[0],\n      setEdgeData = _React$useState6[1];\n\n  var _React$useState7 = React.useState({}),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      plotLayout = _React$useState8[0],\n      setPlotLayout = _React$useState8[1]; // Function to convert UNIX time in format of DD MMM YYY\n\n\n  var formatDate = function formatDate(date, dateFormat) {\n    var updated = new Date(parseInt(date, 10) * 1000).toString();\n    var resDate = moment(updated).format(dateFormat);\n    return resDate;\n  }; // Function to calculate average of resilience scores based on all dates with range as edge dates\n\n\n  var avgWorkflowsAll = function avgWorkflowsAll() {\n    var averageDateWiseResilienceScores = {\n      Hourly: {\n        dates: [],\n        avgResilienceScores: []\n      },\n      Daily: {\n        dates: [],\n        avgResilienceScores: []\n      },\n      Monthly: {\n        dates: [],\n        avgResilienceScores: []\n      }\n    };\n\n    for (var i = 0; i < xData.Hourly.length; i += 1) {\n      for (var j = 0; j < xData.Hourly[i].length; j += 1) {\n        var date = xData.Hourly[i][j];\n        var sum = 0;\n        var count = 0;\n\n        for (var k = 0; k < xData.Hourly.length; k += 1) {\n          if (xData.Hourly[k].includes(date) && !averageDateWiseResilienceScores.Hourly.dates.includes(date)) {\n            sum += yData.Hourly[k][xData.Hourly[k].indexOf(date)];\n            count += 1;\n          }\n        }\n\n        if (count !== 0) {\n          averageDateWiseResilienceScores.Hourly.dates.push(date);\n          averageDateWiseResilienceScores.Hourly.avgResilienceScores.push(sum / count);\n        }\n      }\n    }\n\n    for (var _i = 0; _i < xData.Daily.length; _i += 1) {\n      for (var _j = 0; _j < xData.Daily[_i].length; _j += 1) {\n        var _date = xData.Daily[_i][_j];\n        var _sum = 0;\n        var _count = 0;\n\n        for (var _k = 0; _k < xData.Daily.length; _k += 1) {\n          if (xData.Daily[_k].includes(_date) && !averageDateWiseResilienceScores.Daily.dates.includes(_date)) {\n            _sum += yData.Daily[_k][xData.Daily[_k].indexOf(_date)];\n            _count += 1;\n          }\n        }\n\n        if (_count !== 0) {\n          averageDateWiseResilienceScores.Daily.dates.push(_date);\n          averageDateWiseResilienceScores.Daily.avgResilienceScores.push(_sum / _count);\n        }\n      }\n    }\n\n    for (var _i2 = 0; _i2 < xData.Monthly.length; _i2 += 1) {\n      for (var _j2 = 0; _j2 < xData.Monthly[_i2].length; _j2 += 1) {\n        var _date2 = xData.Monthly[_i2][_j2];\n        var _sum2 = 0;\n        var _count2 = 0;\n\n        for (var _k2 = 0; _k2 < xData.Monthly.length; _k2 += 1) {\n          if (xData.Monthly[_k2].includes(_date2) && !averageDateWiseResilienceScores.Monthly.dates.includes(_date2)) {\n            _sum2 += yData.Monthly[_k2][xData.Monthly[_k2].indexOf(_date2)];\n            _count2 += 1;\n          }\n        }\n\n        if (_count2 !== 0) {\n          averageDateWiseResilienceScores.Monthly.dates.push(_date2);\n          averageDateWiseResilienceScores.Monthly.avgResilienceScores.push(_sum2 / _count2);\n        }\n      }\n    }\n\n    return averageDateWiseResilienceScores;\n  };\n\n  var argSort = function argSort(arr1, arr2) {\n    return arr1.map(function (item, index) {\n      return [arr2[index], item];\n    }) // add the args to sort by\n    .sort(function (_ref2, _ref3) {\n      var _ref4 = _slicedToArray(_ref2, 1),\n          arg1 = _ref4[0];\n\n      var _ref5 = _slicedToArray(_ref3, 1),\n          arg2 = _ref5[0];\n\n      return arg2 - arg1;\n    }) // sort by the args\n    .map(function (_ref6) {\n      var _ref7 = _slicedToArray(_ref6, 2),\n          item = _ref7[1];\n\n      return item;\n    });\n  }; // extract the sorted items\n\n\n  var processData = function processData() {\n    var calculatedAverageAll = avgWorkflowsAll();\n    var dataX = [['']];\n    var dataY = [[0]];\n    var xAvg = [];\n    var yAvg = [];\n    var avgDateFormat = '';\n\n    if (currentGranularity.name === 'Hourly') {\n      dataX = xData.Hourly;\n      dataY = yData.Hourly;\n      xAvg = calculatedAverageAll.Hourly.dates;\n      yAvg = calculatedAverageAll.Hourly.avgResilienceScores;\n      avgDateFormat = 'YYYY-MM-DD HH:mm:ss';\n    }\n\n    if (currentGranularity.name === 'Daily') {\n      dataX = xData.Daily;\n      dataY = yData.Daily;\n      xAvg = calculatedAverageAll.Daily.dates;\n      yAvg = calculatedAverageAll.Daily.avgResilienceScores;\n      avgDateFormat = 'YYYY-MM-DD';\n    }\n\n    if (currentGranularity.name === 'Monthly') {\n      dataX = xData.Monthly;\n      dataY = yData.Monthly;\n      xAvg = calculatedAverageAll.Monthly.dates;\n      yAvg = calculatedAverageAll.Monthly.avgResilienceScores;\n      avgDateFormat = 'YYYY-MM';\n    }\n\n    var lineSize = Array(labels === null || labels === void 0 ? void 0 : labels.length).fill(3);\n    var data = [];\n    var series = Array(labels === null || labels === void 0 ? void 0 : labels.length).fill(0);\n    var lengths = Array(labels === null || labels === void 0 ? void 0 : labels.length).fill(0);\n\n    for (var i = 0; i < dataX.length; i += 1) {\n      var result = {\n        x: dataX[i],\n        y: dataY[i],\n        type: 'scatter',\n        mode: 'lines + text',\n        line: {\n          shape: 'spline',\n          color: colors[i],\n          width: lineSize[i]\n        },\n        name: labels ? labels[i] : ''\n      };\n      data.push(result);\n\n      for (var j = 0; j < dataY[i].length; j += 1) {\n        series[i] += dataY[i][j];\n      }\n\n      lengths[i] = dataY[i].length;\n    }\n\n    var unixTimeArray = [];\n    xAvg.forEach(function (x) {\n      unixTimeArray.push(parseInt(moment(x).format('X'), 10));\n    });\n    var argSortResultY = argSort(yAvg, unixTimeArray).reverse();\n    var sortedResultX = unixTimeArray.sort(function difference(a, b) {\n      return a - b;\n    });\n    var datesX = [];\n    sortedResultX.forEach(function (date) {\n      datesX.push(formatDate(date.toString(), avgDateFormat));\n    });\n    var avgResult = {\n      x: datesX,\n      y: argSortResultY,\n      type: 'scatter',\n      mode: 'lines',\n      line: {\n        shape: 'spline',\n        dash: 'dash',\n        color: palette.secondary.dark,\n        width: 3\n      },\n      name: 'AVG Workflows'\n    };\n    data.push(avgResult);\n    var normalized = Array(labels === null || labels === void 0 ? void 0 : labels.length).fill(0);\n\n    for (var k = 0; k < lengths.length; k += 1) {\n      normalized[k] = series[k] / lengths[k];\n    }\n\n    var max = Math.max.apply(Math, _toConsumableArray(normalized));\n    var maxID = normalized.indexOf(max);\n    var min = Math.min.apply(Math, _toConsumableArray(normalized));\n    var minID = normalized.indexOf(min);\n    setEdgeData({\n      highScore: max,\n      lowScore: min,\n      highColor: colors[maxID],\n      lowColor: colors[minID],\n      highName: labels ? labels[maxID] : '',\n      lowName: labels ? labels[minID] : ''\n    });\n    setPlotData(data);\n  };\n\n  var selectorOptions = {\n    buttons: [{\n      step: 'day',\n      stepmode: 'backward',\n      count: 1,\n      label: '1 Day'\n    }, {\n      step: 'day',\n      stepmode: 'backward',\n      count: 7,\n      label: '1 Week'\n    }, {\n      step: 'day',\n      stepmode: 'backward',\n      count: 14,\n      label: '2 Weeks'\n    }, {\n      step: 'month',\n      stepmode: 'backward',\n      count: 1,\n      label: '1 Month'\n    }, {\n      step: 'month',\n      stepmode: 'backward',\n      count: 3,\n      label: '3 Months'\n    }, {\n      step: 'month',\n      stepmode: 'backward',\n      count: 6,\n      label: '6 Months'\n    }, {\n      step: 'year',\n      stepmode: 'backward',\n      count: 1,\n      label: '1 Year'\n    }, {\n      step: 'year',\n      stepmode: 'backward',\n      count: 2,\n      label: '2 Years'\n    }, {\n      step: 'all',\n      label: 'default'\n    }]\n  };\n\n  var processLayout = function processLayout() {\n    var layout = {\n      xaxis: {\n        showgrid: true,\n        showline: false,\n        showticklabels: true,\n        linecolor: palette.graphAnnotationsColor,\n        linewidth: 0.5,\n        ticks: 'outside',\n        tickcolor: palette.graphAnnotationsColor,\n        tickwidth: 2,\n        ticklen: 5,\n        tickfont: {\n          family: 'Ubuntu',\n          color: palette.customColors.black(0.4)\n        },\n        mirror: true,\n        rangeselector: selectorOptions,\n        rangeslider: {\n          visible: true\n        }\n      },\n      yaxis: {\n        showgrid: true,\n        zeroline: false,\n        showline: false,\n        showticklabels: true,\n        linecolor: palette.graphAnnotationsColor,\n        linewidth: 0.5,\n        ticks: 'outside',\n        tickcolor: palette.graphAnnotationsColor,\n        tickwidth: 2,\n        ticklen: 5,\n        tickfont: {\n          family: 'Ubuntu',\n          color: palette.customColors.black(0.4)\n        },\n        mirror: true,\n        tickmode: 'array',\n        tickvals: [0, 20, 40, 60, 80, 100],\n        ticktext: ['0', '20', '40', '60', '80', '100'],\n        range: [-10, 110]\n      },\n      cliponaxis: true,\n      layer: 'below_traces',\n      autosize: true,\n      margin: {\n        autoexpand: false,\n        l: 60,\n        r: 50,\n        t: 30,\n        b: 130\n      },\n      font: {\n        family: 'Ubuntu, monospace',\n        color: palette.customColors.black(0.4)\n      },\n      showlegend: true,\n      legend: {\n        orientation: 'h',\n        y: -0.5\n      }\n    };\n    setPlotLayout(layout);\n  };\n\n  useEffect(function () {\n    processData();\n    processLayout();\n  }, [currentGranularity]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      alignContent: 'center',\n      width: '100%'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.flexDisplay,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.adjust,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Score, {\n    score: edgeData.highScore,\n    high: true,\n    color: edgeData.highColor,\n    name: edgeData.highName,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Score, {\n    score: edgeData.lowScore,\n    high: false,\n    color: edgeData.lowColor,\n    name: edgeData.lowName,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(FormControl, {\n    variant: \"outlined\",\n    className: classes.formControl,\n    color: \"secondary\",\n    focused: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    htmlFor: \"outlined-selection-granularity\",\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 11\n    }\n  }, \"Granularity\"), /*#__PURE__*/React.createElement(Select, {\n    value: currentGranularity.name,\n    onChange: handleChangeInGranularity,\n    label: \"Granularity\",\n    inputProps: {\n      name: 'name',\n      id: 'outlined-selection-granularity'\n    },\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"Hourly\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 13\n    }\n  }, \"Hourly\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"Daily\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 13\n    }\n  }, \"Daily\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"Monthly\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 13\n    }\n  }, \"Monthly\")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.plot,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Plot, {\n    data: plotData,\n    layout: plotLayout,\n    useResizeHandler: true,\n    style: {\n      width: '166.55%',\n      height: 720,\n      margin: 'auto'\n    },\n    config: {\n      displaylogo: false,\n      autosizable: true,\n      responsive: true,\n      frameMargins: 0.2,\n      showAxisDragHandles: true,\n      showAxisRangeEntryBoxes: true,\n      showTips: true,\n      displayModeBar: false,\n      toImageButtonOptions: {\n        format: 'png',\n        filename: 'ResilienceScores_Comparison',\n        width: 1920,\n        height: 1080,\n        scale: 2\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default ResilienceScoreComparisonPlot;","map":{"version":3,"sources":["/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/views/ChaosWorkflows/BrowseAnalytics/WorkflowComparisonPlot/index.tsx"],"names":["React","useEffect","Plotly","createPlotlyComponent","FormControl","InputLabel","MenuItem","Select","moment","useTheme","useStyles","Score","Plot","ResilienceScoreComparisonPlot","xData","yData","labels","colors","classes","palette","useState","name","currentGranularity","setCurrentGranularity","handleChangeInGranularity","event","target","value","plotData","setPlotData","highScore","lowScore","highColor","lowColor","highName","lowName","edgeData","setEdgeData","plotLayout","setPlotLayout","formatDate","date","dateFormat","updated","Date","parseInt","toString","resDate","format","avgWorkflowsAll","averageDateWiseResilienceScores","Hourly","dates","avgResilienceScores","Daily","Monthly","i","length","j","sum","count","k","includes","indexOf","push","argSort","arr1","arr2","map","item","index","sort","arg1","arg2","processData","calculatedAverageAll","dataX","dataY","xAvg","yAvg","avgDateFormat","lineSize","Array","fill","data","series","lengths","result","x","y","type","mode","line","shape","color","width","unixTimeArray","forEach","argSortResultY","reverse","sortedResultX","difference","a","b","datesX","avgResult","dash","secondary","dark","normalized","max","Math","maxID","min","minID","selectorOptions","buttons","step","stepmode","label","processLayout","layout","xaxis","showgrid","showline","showticklabels","linecolor","graphAnnotationsColor","linewidth","ticks","tickcolor","tickwidth","ticklen","tickfont","family","customColors","black","mirror","rangeselector","rangeslider","visible","yaxis","zeroline","tickmode","tickvals","ticktext","range","cliponaxis","layer","autosize","margin","autoexpand","l","r","t","font","showlegend","legend","orientation","alignContent","flexDisplay","adjust","formControl","root","id","plot","height","displaylogo","autosizable","responsive","frameMargins","showAxisDragHandles","showAxisRangeEntryBoxes","showTips","displayModeBar","toImageButtonOptions","filename","scale"],"mappings":"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","sourcesContent":["/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport Plotly from 'plotly.js';\nimport createPlotlyComponent from 'react-plotly.js/factory';\nimport { FormControl, InputLabel, MenuItem, Select } from '@material-ui/core';\nimport moment from 'moment';\nimport { useTheme } from '@material-ui/core/styles';\nimport useStyles from './style';\nimport Score from './Score';\n\nconst Plot = createPlotlyComponent(Plotly);\n\ninterface ResilienceScoreComparisonPlotProps {\n  xData: { Hourly: string[][]; Daily: string[][]; Monthly: string[][] };\n  yData: { Hourly: number[][]; Daily: number[][]; Monthly: number[][] };\n  labels: string[];\n  colors: string[];\n}\n\ninterface AverageDateWiseResilienceScores {\n  Hourly: {\n    dates: string[];\n    avgResilienceScores: number[];\n  };\n  Daily: {\n    dates: string[];\n    avgResilienceScores: number[];\n  };\n  Monthly: {\n    dates: string[];\n    avgResilienceScores: number[];\n  };\n}\n\nconst ResilienceScoreComparisonPlot: React.FC<ResilienceScoreComparisonPlotProps> = ({\n  xData,\n  yData,\n  labels,\n  colors,\n}) => {\n  const classes = useStyles();\n  const { palette } = useTheme();\n  const [currentGranularity, setCurrentGranularity] = React.useState<{\n    name: string;\n  }>({\n    name: 'Daily',\n  });\n\n  const handleChangeInGranularity = (\n    event: React.ChangeEvent<{ name?: string; value: unknown }>\n  ) => {\n    const name = event.target.name as keyof typeof currentGranularity;\n    if (name !== currentGranularity.name) {\n      setCurrentGranularity({\n        ...currentGranularity,\n        [name]: event.target.value as string,\n      });\n    }\n  };\n\n  const [plotData, setPlotData] = React.useState<any[]>([]);\n\n  const [edgeData, setEdgeData] = React.useState({\n    highScore: 0,\n    lowScore: 0,\n    highColor: '',\n    lowColor: '',\n    highName: '',\n    lowName: '',\n  });\n\n  const [plotLayout, setPlotLayout] = React.useState<any>({});\n\n  // Function to convert UNIX time in format of DD MMM YYY\n  const formatDate = (date: string, dateFormat: string) => {\n    const updated = new Date(parseInt(date, 10) * 1000).toString();\n    const resDate = moment(updated).format(dateFormat);\n    return resDate;\n  };\n\n  // Function to calculate average of resilience scores based on all dates with range as edge dates\n  const avgWorkflowsAll = () => {\n    const averageDateWiseResilienceScores: AverageDateWiseResilienceScores = {\n      Hourly: {\n        dates: [],\n        avgResilienceScores: [],\n      },\n      Daily: {\n        dates: [],\n        avgResilienceScores: [],\n      },\n      Monthly: {\n        dates: [],\n        avgResilienceScores: [],\n      },\n    };\n\n    for (let i = 0; i < xData.Hourly.length; i += 1) {\n      for (let j = 0; j < xData.Hourly[i].length; j += 1) {\n        const date: string = xData.Hourly[i][j];\n        let sum: number = 0;\n        let count: number = 0;\n        for (let k = 0; k < xData.Hourly.length; k += 1) {\n          if (\n            xData.Hourly[k].includes(date) &&\n            !averageDateWiseResilienceScores.Hourly.dates.includes(date)\n          ) {\n            sum += yData.Hourly[k][xData.Hourly[k].indexOf(date)];\n            count += 1;\n          }\n        }\n        if (count !== 0) {\n          averageDateWiseResilienceScores.Hourly.dates.push(date);\n          averageDateWiseResilienceScores.Hourly.avgResilienceScores.push(\n            sum / count\n          );\n        }\n      }\n    }\n\n    for (let i = 0; i < xData.Daily.length; i += 1) {\n      for (let j = 0; j < xData.Daily[i].length; j += 1) {\n        const date: string = xData.Daily[i][j];\n        let sum: number = 0;\n        let count: number = 0;\n        for (let k = 0; k < xData.Daily.length; k += 1) {\n          if (\n            xData.Daily[k].includes(date) &&\n            !averageDateWiseResilienceScores.Daily.dates.includes(date)\n          ) {\n            sum += yData.Daily[k][xData.Daily[k].indexOf(date)];\n            count += 1;\n          }\n        }\n        if (count !== 0) {\n          averageDateWiseResilienceScores.Daily.dates.push(date);\n          averageDateWiseResilienceScores.Daily.avgResilienceScores.push(\n            sum / count\n          );\n        }\n      }\n    }\n\n    for (let i = 0; i < xData.Monthly.length; i += 1) {\n      for (let j = 0; j < xData.Monthly[i].length; j += 1) {\n        const date: string = xData.Monthly[i][j];\n        let sum: number = 0;\n        let count: number = 0;\n        for (let k = 0; k < xData.Monthly.length; k += 1) {\n          if (\n            xData.Monthly[k].includes(date) &&\n            !averageDateWiseResilienceScores.Monthly.dates.includes(date)\n          ) {\n            sum += yData.Monthly[k][xData.Monthly[k].indexOf(date)];\n            count += 1;\n          }\n        }\n        if (count !== 0) {\n          averageDateWiseResilienceScores.Monthly.dates.push(date);\n          averageDateWiseResilienceScores.Monthly.avgResilienceScores.push(\n            sum / count\n          );\n        }\n      }\n    }\n    return averageDateWiseResilienceScores;\n  };\n\n  const argSort = (arr1: number[], arr2: number[]) =>\n    arr1\n      .map((item: any, index: number) => [arr2[index], item]) // add the args to sort by\n      .sort(([arg1], [arg2]) => arg2 - arg1) // sort by the args\n      .map(([, item]) => item); // extract the sorted items\n\n  const processData = () => {\n    const calculatedAverageAll: AverageDateWiseResilienceScores = avgWorkflowsAll();\n    let dataX = [['']];\n    let dataY = [[0]];\n    let xAvg: string[] = [];\n    let yAvg: number[] = [];\n    let avgDateFormat: string = '';\n    if (currentGranularity.name === 'Hourly') {\n      dataX = xData.Hourly;\n      dataY = yData.Hourly;\n      xAvg = calculatedAverageAll.Hourly.dates;\n      yAvg = calculatedAverageAll.Hourly.avgResilienceScores;\n      avgDateFormat = 'YYYY-MM-DD HH:mm:ss';\n    }\n    if (currentGranularity.name === 'Daily') {\n      dataX = xData.Daily;\n      dataY = yData.Daily;\n      xAvg = calculatedAverageAll.Daily.dates;\n      yAvg = calculatedAverageAll.Daily.avgResilienceScores;\n      avgDateFormat = 'YYYY-MM-DD';\n    }\n    if (currentGranularity.name === 'Monthly') {\n      dataX = xData.Monthly;\n      dataY = yData.Monthly;\n      xAvg = calculatedAverageAll.Monthly.dates;\n      yAvg = calculatedAverageAll.Monthly.avgResilienceScores;\n      avgDateFormat = 'YYYY-MM';\n    }\n    const lineSize: number[] = Array(labels?.length).fill(3);\n    const data = [];\n    const series: number[] = Array(labels?.length).fill(0);\n    const lengths: number[] = Array(labels?.length).fill(0);\n\n    for (let i = 0; i < dataX.length; i += 1) {\n      const result = {\n        x: dataX[i],\n        y: dataY[i],\n        type: 'scatter',\n        mode: 'lines + text',\n        line: {\n          shape: 'spline',\n          color: colors[i],\n          width: lineSize[i],\n        },\n        name: labels ? labels[i] : '',\n      };\n      data.push(result);\n      for (let j = 0; j < dataY[i].length; j += 1) {\n        series[i] += dataY[i][j];\n      }\n      lengths[i] = dataY[i].length;\n    }\n\n    const unixTimeArray: number[] = [];\n    xAvg.forEach((x) => {\n      unixTimeArray.push(parseInt(moment(x).format('X'), 10));\n    });\n    const argSortResultY = argSort(yAvg, unixTimeArray).reverse();\n    const sortedResultX = unixTimeArray.sort(function difference(a, b) {\n      return a - b;\n    });\n    const datesX: string[] = [];\n    sortedResultX.forEach((date) => {\n      datesX.push(formatDate(date.toString(), avgDateFormat));\n    });\n\n    const avgResult = {\n      x: datesX,\n      y: argSortResultY,\n      type: 'scatter',\n      mode: 'lines',\n      line: {\n        shape: 'spline',\n        dash: 'dash',\n        color: palette.secondary.dark,\n        width: 3,\n      },\n      name: 'AVG Workflows',\n    };\n    data.push(avgResult);\n    const normalized = Array(labels?.length).fill(0);\n    for (let k = 0; k < lengths.length; k += 1) {\n      normalized[k] = series[k] / lengths[k];\n    }\n    const max = Math.max(...normalized);\n    const maxID = normalized.indexOf(max);\n    const min = Math.min(...normalized);\n    const minID = normalized.indexOf(min);\n    setEdgeData({\n      highScore: max,\n      lowScore: min,\n      highColor: colors[maxID],\n      lowColor: colors[minID],\n      highName: labels ? labels[maxID] : '',\n      lowName: labels ? labels[minID] : '',\n    });\n    setPlotData(data);\n  };\n\n  const selectorOptions = {\n    buttons: [\n      {\n        step: 'day',\n        stepmode: 'backward',\n        count: 1,\n        label: '1 Day',\n      },\n      {\n        step: 'day',\n        stepmode: 'backward',\n        count: 7,\n        label: '1 Week',\n      },\n      {\n        step: 'day',\n        stepmode: 'backward',\n        count: 14,\n        label: '2 Weeks',\n      },\n      {\n        step: 'month',\n        stepmode: 'backward',\n        count: 1,\n        label: '1 Month',\n      },\n      {\n        step: 'month',\n        stepmode: 'backward',\n        count: 3,\n        label: '3 Months',\n      },\n      {\n        step: 'month',\n        stepmode: 'backward',\n        count: 6,\n        label: '6 Months',\n      },\n      {\n        step: 'year',\n        stepmode: 'backward',\n        count: 1,\n        label: '1 Year',\n      },\n      {\n        step: 'year',\n        stepmode: 'backward',\n        count: 2,\n        label: '2 Years',\n      },\n      {\n        step: 'all',\n        label: 'default',\n      },\n    ],\n  };\n\n  const processLayout = () => {\n    const layout = {\n      xaxis: {\n        showgrid: true,\n        showline: false,\n        showticklabels: true,\n        linecolor: palette.graphAnnotationsColor,\n        linewidth: 0.5,\n        ticks: 'outside',\n        tickcolor: palette.graphAnnotationsColor,\n        tickwidth: 2,\n        ticklen: 5,\n        tickfont: {\n          family: 'Ubuntu',\n          color: palette.customColors.black(0.4),\n        },\n        mirror: true,\n        rangeselector: selectorOptions as any,\n        rangeslider: { visible: true },\n      },\n      yaxis: {\n        showgrid: true,\n        zeroline: false,\n        showline: false,\n        showticklabels: true,\n        linecolor: palette.graphAnnotationsColor,\n        linewidth: 0.5,\n        ticks: 'outside',\n        tickcolor: palette.graphAnnotationsColor,\n        tickwidth: 2,\n        ticklen: 5,\n        tickfont: {\n          family: 'Ubuntu',\n          color: palette.customColors.black(0.4),\n        },\n        mirror: true,\n        tickmode: 'array',\n        tickvals: [0, 20, 40, 60, 80, 100],\n        ticktext: ['0', '20', '40', '60', '80', '100'],\n        range: [-10, 110],\n      },\n      cliponaxis: true,\n      layer: 'below_traces',\n      autosize: true,\n      margin: {\n        autoexpand: false,\n        l: 60,\n        r: 50,\n        t: 30,\n        b: 130,\n      },\n      font: {\n        family: 'Ubuntu, monospace',\n        color: palette.customColors.black(0.4),\n      },\n      showlegend: true,\n      legend: { orientation: 'h', y: -0.5 },\n    };\n    setPlotLayout(layout);\n  };\n\n  useEffect(() => {\n    processData();\n    processLayout();\n  }, [currentGranularity]);\n\n  return (\n    <div style={{ alignContent: 'center', width: '100%' }}>\n      <div className={classes.flexDisplay}>\n        <div className={classes.adjust}>\n          <Score\n            score={edgeData.highScore}\n            high\n            color={edgeData.highColor}\n            name={edgeData.highName}\n          />\n        </div>\n        <Score\n          score={edgeData.lowScore}\n          high={false}\n          color={edgeData.lowColor}\n          name={edgeData.lowName}\n        />\n        <FormControl\n          variant=\"outlined\"\n          className={classes.formControl}\n          color=\"secondary\"\n          focused\n        >\n          <InputLabel\n            htmlFor=\"outlined-selection-granularity\"\n            className={classes.root}\n          >\n            Granularity\n          </InputLabel>\n          <Select\n            value={currentGranularity.name}\n            onChange={handleChangeInGranularity}\n            label=\"Granularity\"\n            inputProps={{\n              name: 'name',\n              id: 'outlined-selection-granularity',\n            }}\n            className={classes.root}\n          >\n            <MenuItem value=\"Hourly\">Hourly</MenuItem>\n            <MenuItem value=\"Daily\">Daily</MenuItem>\n            <MenuItem value=\"Monthly\">Monthly</MenuItem>\n          </Select>\n        </FormControl>\n      </div>\n      <div className={classes.plot}>\n        <Plot\n          data={plotData}\n          layout={plotLayout}\n          useResizeHandler\n          style={{\n            width: '166.55%',\n            height: 720,\n            margin: 'auto',\n          }}\n          config={{\n            displaylogo: false,\n            autosizable: true,\n            responsive: true,\n            frameMargins: 0.2,\n            showAxisDragHandles: true,\n            showAxisRangeEntryBoxes: true,\n            showTips: true,\n            displayModeBar: false,\n            toImageButtonOptions: {\n              format: 'png',\n              filename: 'ResilienceScores_Comparison',\n              width: 1920,\n              height: 1080,\n              scale: 2,\n            },\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default ResilienceScoreComparisonPlot;\n"]},"metadata":{},"sourceType":"module"}