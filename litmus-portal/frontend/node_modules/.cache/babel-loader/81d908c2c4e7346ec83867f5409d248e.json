{"ast":null,"code":"\"use strict\";\n\nvar _ = require(\"./lodash\");\n\nvar intersectNode = require(\"./intersect/intersect-node\");\n\nvar util = require(\"./util\");\n\nvar d3 = require(\"./d3\");\n\nmodule.exports = createEdgePaths;\n\nfunction createEdgePaths(selection, g, arrows) {\n  var previousPaths = selection.selectAll(\"g.edgePath\").data(g.edges(), function (e) {\n    return util.edgeToId(e);\n  }).classed(\"update\", true);\n  var newPaths = enter(previousPaths, g);\n  exit(previousPaths, g);\n  var svgPaths = previousPaths.merge !== undefined ? previousPaths.merge(newPaths) : previousPaths;\n  util.applyTransition(svgPaths, g).style(\"opacity\", 1); // Save DOM element in the path group, and set ID and class\n\n  svgPaths.each(function (e) {\n    var domEdge = d3.select(this);\n    var edge = g.edge(e);\n    edge.elem = this;\n\n    if (edge.id) {\n      domEdge.attr(\"id\", edge.id);\n    }\n\n    util.applyClass(domEdge, edge[\"class\"], (domEdge.classed(\"update\") ? \"update \" : \"\") + \"edgePath\");\n  });\n  svgPaths.selectAll(\"path.path\").each(function (e) {\n    var edge = g.edge(e);\n    edge.arrowheadId = _.uniqueId(\"arrowhead\");\n    var domEdge = d3.select(this).attr(\"marker-end\", function () {\n      return \"url(\" + makeFragmentRef(location.href, edge.arrowheadId) + \")\";\n    }).style(\"fill\", \"none\");\n    util.applyTransition(domEdge, g).attr(\"d\", function (e) {\n      return calcPoints(g, e);\n    });\n    util.applyStyle(domEdge, edge.style);\n  });\n  svgPaths.selectAll(\"defs *\").remove();\n  svgPaths.selectAll(\"defs\").each(function (e) {\n    var edge = g.edge(e);\n    var arrowhead = arrows[edge.arrowhead];\n    arrowhead(d3.select(this), edge.arrowheadId, edge, \"arrowhead\");\n  });\n  return svgPaths;\n}\n\nfunction makeFragmentRef(url, fragmentId) {\n  var baseUrl = url.split(\"#\")[0];\n  return baseUrl + \"#\" + fragmentId;\n}\n\nfunction calcPoints(g, e) {\n  var edge = g.edge(e);\n  var tail = g.node(e.v);\n  var head = g.node(e.w);\n  var points = edge.points.slice(1, edge.points.length - 1);\n  points.unshift(intersectNode(tail, points[0]));\n  points.push(intersectNode(head, points[points.length - 1]));\n  return createLine(edge, points);\n}\n\nfunction createLine(edge, points) {\n  var line = (d3.line || d3.svg.line)().x(function (d) {\n    return d.x;\n  }).y(function (d) {\n    return d.y;\n  });\n  (line.curve || line.interpolate)(edge.curve);\n  return line(points);\n}\n\nfunction getCoords(elem) {\n  var bbox = elem.getBBox();\n  var matrix = elem.ownerSVGElement.getScreenCTM().inverse().multiply(elem.getScreenCTM()).translate(bbox.width / 2, bbox.height / 2);\n  return {\n    x: matrix.e,\n    y: matrix.f\n  };\n}\n\nfunction enter(svgPaths, g) {\n  var svgPathsEnter = svgPaths.enter().append(\"g\").attr(\"class\", \"edgePath\").style(\"opacity\", 0);\n  svgPathsEnter.append(\"path\").attr(\"class\", \"path\").attr(\"d\", function (e) {\n    var edge = g.edge(e);\n    var sourceElem = g.node(e.v).elem;\n\n    var points = _.range(edge.points.length).map(function () {\n      return getCoords(sourceElem);\n    });\n\n    return createLine(edge, points);\n  });\n  svgPathsEnter.append(\"defs\");\n  return svgPathsEnter;\n}\n\nfunction exit(svgPaths, g) {\n  var svgPathExit = svgPaths.exit();\n  util.applyTransition(svgPathExit, g).style(\"opacity\", 0).remove();\n}","map":{"version":3,"sources":["/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/node_modules/dagre-d3/lib/create-edge-paths.js"],"names":["_","require","intersectNode","util","d3","module","exports","createEdgePaths","selection","g","arrows","previousPaths","selectAll","data","edges","e","edgeToId","classed","newPaths","enter","exit","svgPaths","merge","undefined","applyTransition","style","each","domEdge","select","edge","elem","id","attr","applyClass","arrowheadId","uniqueId","makeFragmentRef","location","href","calcPoints","applyStyle","remove","arrowhead","url","fragmentId","baseUrl","split","tail","node","v","head","w","points","slice","length","unshift","push","createLine","line","svg","x","d","y","curve","interpolate","getCoords","bbox","getBBox","matrix","ownerSVGElement","getScreenCTM","inverse","multiply","translate","width","height","f","svgPathsEnter","append","sourceElem","range","map","svgPathExit"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _ = require(\"./lodash\");\nvar intersectNode = require(\"./intersect/intersect-node\");\nvar util = require(\"./util\");\nvar d3 = require(\"./d3\");\nmodule.exports = createEdgePaths;\n\nfunction createEdgePaths(selection, g, arrows) {\n  var previousPaths = selection.selectAll(\"g.edgePath\")\n    .data(g.edges(), function(e) { return util.edgeToId(e); })\n    .classed(\"update\", true);\n\n  var newPaths = enter(previousPaths, g);\n  exit(previousPaths, g);\n\n  var svgPaths = previousPaths.merge !== undefined ? previousPaths.merge(newPaths) : previousPaths;\n  util.applyTransition(svgPaths, g)\n    .style(\"opacity\", 1);\n\n  // Save DOM element in the path group, and set ID and class\n  svgPaths.each(function(e) {\n    var domEdge = d3.select(this);\n    var edge = g.edge(e);\n    edge.elem = this;\n\n    if (edge.id) {\n      domEdge.attr(\"id\", edge.id);\n    }\n\n    util.applyClass(domEdge, edge[\"class\"],\n      (domEdge.classed(\"update\") ? \"update \" : \"\") + \"edgePath\");\n  });\n\n  svgPaths.selectAll(\"path.path\")\n    .each(function(e) {\n      var edge = g.edge(e);\n      edge.arrowheadId = _.uniqueId(\"arrowhead\");\n\n      var domEdge = d3.select(this)\n        .attr(\"marker-end\", function() {\n          return \"url(\" + makeFragmentRef(location.href, edge.arrowheadId) + \")\";\n        })\n        .style(\"fill\", \"none\");\n\n      util.applyTransition(domEdge, g)\n        .attr(\"d\", function(e) { return calcPoints(g, e); });\n\n      util.applyStyle(domEdge, edge.style);\n    });\n\n  svgPaths.selectAll(\"defs *\").remove();\n  svgPaths.selectAll(\"defs\")\n    .each(function(e) {\n      var edge = g.edge(e);\n      var arrowhead = arrows[edge.arrowhead];\n      arrowhead(d3.select(this), edge.arrowheadId, edge, \"arrowhead\");\n    });\n\n  return svgPaths;\n}\n\nfunction makeFragmentRef(url, fragmentId) {\n  var baseUrl = url.split(\"#\")[0];\n  return baseUrl + \"#\" + fragmentId;\n}\n\nfunction calcPoints(g, e) {\n  var edge = g.edge(e);\n  var tail = g.node(e.v);\n  var head = g.node(e.w);\n  var points = edge.points.slice(1, edge.points.length - 1);\n  points.unshift(intersectNode(tail, points[0]));\n  points.push(intersectNode(head, points[points.length - 1]));\n\n  return createLine(edge, points);\n}\n\nfunction createLine(edge, points) {\n  var line = (d3.line || d3.svg.line)()\n    .x(function(d) { return d.x; })\n    .y(function(d) { return d.y; });\n  \n  (line.curve || line.interpolate)(edge.curve);\n\n  return line(points);\n}\n\nfunction getCoords(elem) {\n  var bbox = elem.getBBox();\n  var matrix = elem.ownerSVGElement.getScreenCTM()\n    .inverse()\n    .multiply(elem.getScreenCTM())\n    .translate(bbox.width / 2, bbox.height / 2);\n  return { x: matrix.e, y: matrix.f };\n}\n\nfunction enter(svgPaths, g) {\n  var svgPathsEnter = svgPaths.enter().append(\"g\")\n    .attr(\"class\", \"edgePath\")\n    .style(\"opacity\", 0);\n  svgPathsEnter.append(\"path\")\n    .attr(\"class\", \"path\")\n    .attr(\"d\", function(e) {\n      var edge = g.edge(e);\n      var sourceElem = g.node(e.v).elem;\n      var points = _.range(edge.points.length).map(function() { return getCoords(sourceElem); });\n      return createLine(edge, points);\n    });\n  svgPathsEnter.append(\"defs\");\n  return svgPathsEnter;\n}\n\nfunction exit(svgPaths, g) {\n  var svgPathExit = svgPaths.exit();\n  util.applyTransition(svgPathExit, g)\n    .style(\"opacity\", 0)\n    .remove();\n}\n"]},"metadata":{},"sourceType":"script"}