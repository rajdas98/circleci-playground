{"ast":null,"code":"'use strict';\n\nmodule.exports = createHeatmap2D;\n\nvar bsearch = require('binary-search-bounds');\n\nvar iota = require('iota-array');\n\nvar pool = require('typedarray-pool');\n\nvar createShader = require('gl-shader');\n\nvar createBuffer = require('gl-buffer');\n\nvar shaders = require('./lib/shaders');\n\nfunction GLHeatmap2D(plot, shader, pickShader, positionBuffer, weightBuffer, colorBuffer, idBuffer) {\n  this.plot = plot;\n  this.shader = shader;\n  this.pickShader = pickShader;\n  this.positionBuffer = positionBuffer;\n  this.weightBuffer = weightBuffer;\n  this.colorBuffer = colorBuffer;\n  this.idBuffer = idBuffer;\n  this.xData = [];\n  this.yData = [];\n  this.shape = [0, 0];\n  this.bounds = [Infinity, Infinity, -Infinity, -Infinity];\n  this.pickOffset = 0;\n}\n\nvar proto = GLHeatmap2D.prototype;\nvar WEIGHTS = [0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1];\n\nproto.draw = function () {\n  var MATRIX = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n  return function () {\n    var plot = this.plot;\n    var shader = this.shader;\n    var bounds = this.bounds;\n    var numVertices = this.numVertices;\n\n    if (numVertices <= 0) {\n      return;\n    }\n\n    var gl = plot.gl;\n    var dataBox = plot.dataBox;\n    var boundX = bounds[2] - bounds[0];\n    var boundY = bounds[3] - bounds[1];\n    var dataX = dataBox[2] - dataBox[0];\n    var dataY = dataBox[3] - dataBox[1];\n    MATRIX[0] = 2.0 * boundX / dataX;\n    MATRIX[4] = 2.0 * boundY / dataY;\n    MATRIX[6] = 2.0 * (bounds[0] - dataBox[0]) / dataX - 1.0;\n    MATRIX[7] = 2.0 * (bounds[1] - dataBox[1]) / dataY - 1.0;\n    shader.bind();\n    var uniforms = shader.uniforms;\n    uniforms.viewTransform = MATRIX;\n    uniforms.shape = this.shape;\n    var attributes = shader.attributes;\n    this.positionBuffer.bind();\n    attributes.position.pointer();\n    this.weightBuffer.bind();\n    attributes.weight.pointer(gl.UNSIGNED_BYTE, false);\n    this.colorBuffer.bind();\n    attributes.color.pointer(gl.UNSIGNED_BYTE, true);\n    gl.drawArrays(gl.TRIANGLES, 0, numVertices);\n  };\n}();\n\nproto.drawPick = function () {\n  var MATRIX = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n  var PICK_VECTOR = [0, 0, 0, 0];\n  return function (pickOffset) {\n    var plot = this.plot;\n    var shader = this.pickShader;\n    var bounds = this.bounds;\n    var numVertices = this.numVertices;\n\n    if (numVertices <= 0) {\n      return;\n    }\n\n    var gl = plot.gl;\n    var dataBox = plot.dataBox;\n    var boundX = bounds[2] - bounds[0];\n    var boundY = bounds[3] - bounds[1];\n    var dataX = dataBox[2] - dataBox[0];\n    var dataY = dataBox[3] - dataBox[1];\n    MATRIX[0] = 2.0 * boundX / dataX;\n    MATRIX[4] = 2.0 * boundY / dataY;\n    MATRIX[6] = 2.0 * (bounds[0] - dataBox[0]) / dataX - 1.0;\n    MATRIX[7] = 2.0 * (bounds[1] - dataBox[1]) / dataY - 1.0;\n\n    for (var i = 0; i < 4; ++i) {\n      PICK_VECTOR[i] = pickOffset >> i * 8 & 0xff;\n    }\n\n    this.pickOffset = pickOffset;\n    shader.bind();\n    var uniforms = shader.uniforms;\n    uniforms.viewTransform = MATRIX;\n    uniforms.pickOffset = PICK_VECTOR;\n    uniforms.shape = this.shape;\n    var attributes = shader.attributes;\n    this.positionBuffer.bind();\n    attributes.position.pointer();\n    this.weightBuffer.bind();\n    attributes.weight.pointer(gl.UNSIGNED_BYTE, false);\n    this.idBuffer.bind();\n    attributes.pickId.pointer(gl.UNSIGNED_BYTE, false);\n    gl.drawArrays(gl.TRIANGLES, 0, numVertices);\n    return pickOffset + this.shape[0] * this.shape[1];\n  };\n}();\n\nproto.pick = function (x, y, value) {\n  var pickOffset = this.pickOffset;\n  var pointCount = this.shape[0] * this.shape[1];\n\n  if (value < pickOffset || value >= pickOffset + pointCount) {\n    return null;\n  }\n\n  var pointId = value - pickOffset;\n  var xData = this.xData;\n  var yData = this.yData;\n  return {\n    object: this,\n    pointId: pointId,\n    dataCoord: [xData[pointId % this.shape[0]], yData[pointId / this.shape[0] | 0]]\n  };\n};\n\nproto.update = function (options) {\n  options = options || {};\n  var shape = options.shape || [0, 0];\n  var x = options.x || iota(shape[0]);\n  var y = options.y || iota(shape[1]);\n  var z = options.z || new Float32Array(shape[0] * shape[1]);\n  this.xData = x;\n  this.yData = y;\n  var colorLevels = options.colorLevels || [0];\n  var colorValues = options.colorValues || [0, 0, 0, 1];\n  var colorCount = colorLevels.length;\n  var bounds = this.bounds;\n  var lox = bounds[0] = x[0];\n  var loy = bounds[1] = y[0];\n  var hix = bounds[2] = x[x.length - 1];\n  var hiy = bounds[3] = y[y.length - 1];\n  var xs = 1.0 / (hix - lox);\n  var ys = 1.0 / (hiy - loy);\n  var numX = shape[0];\n  var numY = shape[1];\n  this.shape = [numX, numY];\n  var numVerts = (numX - 1) * (numY - 1) * (WEIGHTS.length >>> 1);\n  this.numVertices = numVerts;\n  var colors = pool.mallocUint8(numVerts * 4);\n  var positions = pool.mallocFloat32(numVerts * 2);\n  var weights = pool.mallocUint8(numVerts * 2);\n  var ids = pool.mallocUint32(numVerts);\n  var ptr = 0;\n\n  for (var j = 0; j < numY - 1; ++j) {\n    var yc0 = ys * (y[j] - loy);\n    var yc1 = ys * (y[j + 1] - loy);\n\n    for (var i = 0; i < numX - 1; ++i) {\n      var xc0 = xs * (x[i] - lox);\n      var xc1 = xs * (x[i + 1] - lox);\n\n      for (var dd = 0; dd < WEIGHTS.length; dd += 2) {\n        var dx = WEIGHTS[dd];\n        var dy = WEIGHTS[dd + 1];\n        var offset = (j + dy) * numX + (i + dx);\n        var zc = z[offset];\n        var colorIdx = bsearch.le(colorLevels, zc);\n        var r, g, b, a;\n\n        if (colorIdx < 0) {\n          r = colorValues[0];\n          g = colorValues[1];\n          b = colorValues[2];\n          a = colorValues[3];\n        } else if (colorIdx === colorCount - 1) {\n          r = colorValues[4 * colorCount - 4];\n          g = colorValues[4 * colorCount - 3];\n          b = colorValues[4 * colorCount - 2];\n          a = colorValues[4 * colorCount - 1];\n        } else {\n          var t = (zc - colorLevels[colorIdx]) / (colorLevels[colorIdx + 1] - colorLevels[colorIdx]);\n          var ti = 1.0 - t;\n          var i0 = 4 * colorIdx;\n          var i1 = 4 * (colorIdx + 1);\n          r = ti * colorValues[i0] + t * colorValues[i1];\n          g = ti * colorValues[i0 + 1] + t * colorValues[i1 + 1];\n          b = ti * colorValues[i0 + 2] + t * colorValues[i1 + 2];\n          a = ti * colorValues[i0 + 3] + t * colorValues[i1 + 3];\n        }\n\n        colors[4 * ptr] = 255 * r;\n        colors[4 * ptr + 1] = 255 * g;\n        colors[4 * ptr + 2] = 255 * b;\n        colors[4 * ptr + 3] = 255 * a;\n        positions[2 * ptr] = xc0 * .5 + xc1 * .5;\n        positions[2 * ptr + 1] = yc0 * .5 + yc1 * .5;\n        weights[2 * ptr] = dx;\n        weights[2 * ptr + 1] = dy;\n        ids[ptr] = j * numX + i;\n        ptr += 1;\n      }\n    }\n  }\n\n  this.positionBuffer.update(positions);\n  this.weightBuffer.update(weights);\n  this.colorBuffer.update(colors);\n  this.idBuffer.update(ids);\n  pool.free(positions);\n  pool.free(colors);\n  pool.free(weights);\n  pool.free(ids);\n};\n\nproto.dispose = function () {\n  this.shader.dispose();\n  this.pickShader.dispose();\n  this.positionBuffer.dispose();\n  this.weightBuffer.dispose();\n  this.colorBuffer.dispose();\n  this.idBuffer.dispose();\n  this.plot.removeObject(this);\n};\n\nfunction createHeatmap2D(plot, options) {\n  var gl = plot.gl;\n  var shader = createShader(gl, shaders.vertex, shaders.fragment);\n  var pickShader = createShader(gl, shaders.pickVertex, shaders.pickFragment);\n  var positionBuffer = createBuffer(gl);\n  var weightBuffer = createBuffer(gl);\n  var colorBuffer = createBuffer(gl);\n  var idBuffer = createBuffer(gl);\n  var heatmap = new GLHeatmap2D(plot, shader, pickShader, positionBuffer, weightBuffer, colorBuffer, idBuffer);\n  heatmap.update(options);\n  plot.addObject(heatmap);\n  return heatmap;\n}","map":{"version":3,"sources":["/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/node_modules/gl-heatmap2d/heatmap.js"],"names":["module","exports","createHeatmap2D","bsearch","require","iota","pool","createShader","createBuffer","shaders","GLHeatmap2D","plot","shader","pickShader","positionBuffer","weightBuffer","colorBuffer","idBuffer","xData","yData","shape","bounds","Infinity","pickOffset","proto","prototype","WEIGHTS","draw","MATRIX","numVertices","gl","dataBox","boundX","boundY","dataX","dataY","bind","uniforms","viewTransform","attributes","position","pointer","weight","UNSIGNED_BYTE","color","drawArrays","TRIANGLES","drawPick","PICK_VECTOR","i","pickId","pick","x","y","value","pointCount","pointId","object","dataCoord","update","options","z","Float32Array","colorLevels","colorValues","colorCount","length","lox","loy","hix","hiy","xs","ys","numX","numY","numVerts","colors","mallocUint8","positions","mallocFloat32","weights","ids","mallocUint32","ptr","j","yc0","yc1","xc0","xc1","dd","dx","dy","offset","zc","colorIdx","le","r","g","b","a","t","ti","i0","i1","free","dispose","removeObject","vertex","fragment","pickVertex","pickFragment","heatmap","addObject"],"mappings":"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","sourcesContent":["'use strict'\n\nmodule.exports = createHeatmap2D\n\nvar bsearch = require('binary-search-bounds')\nvar iota = require('iota-array')\nvar pool = require('typedarray-pool')\nvar createShader = require('gl-shader')\nvar createBuffer = require('gl-buffer')\n\nvar shaders = require('./lib/shaders')\n\nfunction GLHeatmap2D (\n  plot,\n  shader,\n  pickShader,\n  positionBuffer,\n  weightBuffer,\n  colorBuffer,\n  idBuffer) {\n  this.plot = plot\n  this.shader = shader\n  this.pickShader = pickShader\n  this.positionBuffer = positionBuffer\n  this.weightBuffer = weightBuffer\n  this.colorBuffer = colorBuffer\n  this.idBuffer = idBuffer\n  this.xData = []\n  this.yData = []\n  this.shape = [0, 0]\n  this.bounds = [Infinity, Infinity, -Infinity, -Infinity]\n  this.pickOffset = 0\n}\n\nvar proto = GLHeatmap2D.prototype\n\nvar WEIGHTS = [\n  0, 0,\n  1, 0,\n  0, 1,\n  1, 0,\n  1, 1,\n  0, 1\n]\n\nproto.draw = (function () {\n  var MATRIX = [\n    1, 0, 0,\n    0, 1, 0,\n    0, 0, 1\n  ]\n\n  return function () {\n    var plot = this.plot\n    var shader = this.shader\n    var bounds = this.bounds\n    var numVertices = this.numVertices\n\n    if (numVertices <= 0) {\n      return\n    }\n\n    var gl = plot.gl\n    var dataBox = plot.dataBox\n\n    var boundX = bounds[2] - bounds[0]\n    var boundY = bounds[3] - bounds[1]\n    var dataX = dataBox[2] - dataBox[0]\n    var dataY = dataBox[3] - dataBox[1]\n\n    MATRIX[0] = 2.0 * boundX / dataX\n    MATRIX[4] = 2.0 * boundY / dataY\n    MATRIX[6] = 2.0 * (bounds[0] - dataBox[0]) / dataX - 1.0\n    MATRIX[7] = 2.0 * (bounds[1] - dataBox[1]) / dataY - 1.0\n\n    shader.bind()\n\n    var uniforms = shader.uniforms\n    uniforms.viewTransform = MATRIX\n\n    uniforms.shape = this.shape\n\n    var attributes = shader.attributes\n    this.positionBuffer.bind()\n    attributes.position.pointer()\n\n    this.weightBuffer.bind()\n    attributes.weight.pointer(gl.UNSIGNED_BYTE, false)\n\n    this.colorBuffer.bind()\n    attributes.color.pointer(gl.UNSIGNED_BYTE, true)\n\n    gl.drawArrays(gl.TRIANGLES, 0, numVertices)\n  }\n})()\n\nproto.drawPick = (function () {\n  var MATRIX = [\n    1, 0, 0,\n    0, 1, 0,\n    0, 0, 1\n  ]\n\n  var PICK_VECTOR = [0, 0, 0, 0]\n\n  return function (pickOffset) {\n    var plot = this.plot\n    var shader = this.pickShader\n    var bounds = this.bounds\n    var numVertices = this.numVertices\n\n    if (numVertices <= 0) {\n      return\n    }\n\n    var gl = plot.gl\n    var dataBox = plot.dataBox\n\n    var boundX = bounds[2] - bounds[0]\n    var boundY = bounds[3] - bounds[1]\n    var dataX = dataBox[2] - dataBox[0]\n    var dataY = dataBox[3] - dataBox[1]\n\n    MATRIX[0] = 2.0 * boundX / dataX\n    MATRIX[4] = 2.0 * boundY / dataY\n    MATRIX[6] = 2.0 * (bounds[0] - dataBox[0]) / dataX - 1.0\n    MATRIX[7] = 2.0 * (bounds[1] - dataBox[1]) / dataY - 1.0\n\n    for (var i = 0; i < 4; ++i) {\n      PICK_VECTOR[i] = (pickOffset >> (i * 8)) & 0xff\n    }\n\n    this.pickOffset = pickOffset\n\n    shader.bind()\n\n    var uniforms = shader.uniforms\n    uniforms.viewTransform = MATRIX\n    uniforms.pickOffset = PICK_VECTOR\n    uniforms.shape = this.shape\n\n    var attributes = shader.attributes\n    this.positionBuffer.bind()\n    attributes.position.pointer()\n\n    this.weightBuffer.bind()\n    attributes.weight.pointer(gl.UNSIGNED_BYTE, false)\n\n    this.idBuffer.bind()\n    attributes.pickId.pointer(gl.UNSIGNED_BYTE, false)\n\n    gl.drawArrays(gl.TRIANGLES, 0, numVertices)\n\n    return pickOffset + this.shape[0] * this.shape[1]\n  }\n})()\n\nproto.pick = function (x, y, value) {\n  var pickOffset = this.pickOffset\n  var pointCount = this.shape[0] * this.shape[1]\n  if (value < pickOffset || value >= pickOffset + pointCount) {\n    return null\n  }\n  var pointId = value - pickOffset\n  var xData = this.xData\n  var yData = this.yData\n  return {\n    object: this,\n    pointId: pointId,\n    dataCoord: [\n      xData[pointId % this.shape[0]],\n      yData[(pointId / this.shape[0]) | 0]]\n  }\n}\n\nproto.update = function (options) {\n  options = options || {}\n\n  var shape = options.shape || [0, 0]\n\n  var x = options.x || iota(shape[0])\n  var y = options.y || iota(shape[1])\n  var z = options.z || new Float32Array(shape[0] * shape[1])\n\n  this.xData = x\n  this.yData = y\n\n  var colorLevels = options.colorLevels || [0]\n  var colorValues = options.colorValues || [0, 0, 0, 1]\n  var colorCount = colorLevels.length\n\n  var bounds = this.bounds\n  var lox = bounds[0] = x[0]\n  var loy = bounds[1] = y[0]\n  var hix = bounds[2] = x[x.length - 1]\n  var hiy = bounds[3] = y[y.length - 1]\n\n  var xs = 1.0 / (hix - lox)\n  var ys = 1.0 / (hiy - loy)\n\n  var numX = shape[0]\n  var numY = shape[1]\n\n  this.shape = [numX, numY]\n\n  var numVerts = (numX - 1) * (numY - 1) * (WEIGHTS.length >>> 1)\n\n  this.numVertices = numVerts\n\n  var colors = pool.mallocUint8(numVerts * 4)\n  var positions = pool.mallocFloat32(numVerts * 2)\n  var weights   = pool.mallocUint8 (numVerts * 2)\n  var ids = pool.mallocUint32(numVerts)\n\n  var ptr = 0\n\n  for (var j = 0; j < numY - 1; ++j) {\n    var yc0 = ys * (y[j] - loy)\n    var yc1 = ys * (y[j + 1] - loy)\n    for (var i = 0; i < numX - 1; ++i) {\n      var xc0 = xs * (x[i] - lox)\n      var xc1 = xs * (x[i + 1] - lox)\n\n      for (var dd = 0; dd < WEIGHTS.length; dd += 2) {\n        var dx = WEIGHTS[dd]\n        var dy = WEIGHTS[dd + 1]\n        var offset = (j + dy) * numX + (i + dx)\n        var zc = z[offset]\n        var colorIdx = bsearch.le(colorLevels, zc)\n        var r, g, b, a\n        if (colorIdx < 0) {\n          r = colorValues[0]\n          g = colorValues[1]\n          b = colorValues[2]\n          a = colorValues[3]\n        } else if (colorIdx === colorCount - 1) {\n          r = colorValues[4 * colorCount - 4]\n          g = colorValues[4 * colorCount - 3]\n          b = colorValues[4 * colorCount - 2]\n          a = colorValues[4 * colorCount - 1]\n        } else {\n          var t = (zc - colorLevels[colorIdx]) /\n            (colorLevels[colorIdx + 1] - colorLevels[colorIdx])\n          var ti = 1.0 - t\n          var i0 = 4 * colorIdx\n          var i1 = 4 * (colorIdx + 1)\n          r = ti * colorValues[i0] + t * colorValues[i1]\n          g = ti * colorValues[i0 + 1] + t * colorValues[i1 + 1]\n          b = ti * colorValues[i0 + 2] + t * colorValues[i1 + 2]\n          a = ti * colorValues[i0 + 3] + t * colorValues[i1 + 3]\n        }\n\n        colors[4 * ptr] = 255 * r\n        colors[4 * ptr + 1] = 255 * g\n        colors[4 * ptr + 2] = 255 * b\n        colors[4 * ptr + 3] = 255 * a\n\n        positions[2*ptr] = xc0*.5 + xc1*.5;\n        positions[2*ptr+1] = yc0*.5 + yc1*.5;\n\n        weights[2*ptr] = dx;\n        weights[2*ptr+1] = dy;\n\n        ids[ptr] = j * numX + i\n\n        ptr += 1\n      }\n    }\n  }\n\n  this.positionBuffer.update(positions)\n  this.weightBuffer.update(weights)\n  this.colorBuffer.update(colors)\n  this.idBuffer.update(ids)\n\n  pool.free(positions)\n  pool.free(colors)\n  pool.free(weights)\n  pool.free(ids)\n}\n\nproto.dispose = function () {\n  this.shader.dispose()\n  this.pickShader.dispose()\n  this.positionBuffer.dispose()\n  this.weightBuffer.dispose()\n  this.colorBuffer.dispose()\n  this.idBuffer.dispose()\n  this.plot.removeObject(this)\n}\n\nfunction createHeatmap2D (plot, options) {\n  var gl = plot.gl\n\n  var shader = createShader(gl, shaders.vertex, shaders.fragment)\n  var pickShader = createShader(gl, shaders.pickVertex, shaders.pickFragment)\n\n  var positionBuffer = createBuffer(gl)\n  var weightBuffer   = createBuffer(gl)\n  var colorBuffer = createBuffer(gl)\n  var idBuffer = createBuffer(gl)\n\n  var heatmap = new GLHeatmap2D(\n    plot,\n    shader,\n    pickShader,\n    positionBuffer,\n    weightBuffer,\n    colorBuffer,\n    idBuffer)\n\n  heatmap.update(options)\n  plot.addObject(heatmap)\n\n  return heatmap\n}\n"]},"metadata":{},"sourceType":"script"}