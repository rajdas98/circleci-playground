{"ast":null,"code":"import _regeneratorRuntime from \"/home/raj/.nvm/versions/node/v12.18.2/lib/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/raj/.nvm/versions/node/v12.18.2/lib/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"/home/raj/.nvm/versions/node/v12.18.2/lib/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/raj/.nvm/versions/node/v12.18.2/lib/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/raj/.nvm/versions/node/v12.18.2/lib/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/views/CreateWorkflow/CustomWorkflow/CreateWorkflow/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useLazyQuery, useQuery } from '@apollo/client';\nimport { Button, FormControl, FormControlLabel, IconButton, InputAdornment, InputLabel, MenuItem, MenuList, OutlinedInput, Paper, Radio, RadioGroup, Select, Typography, ClickAwayListener } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport YAML from 'yaml';\nimport ButtonFilled from '../../../../components/Button/ButtonFilled';\nimport InputField from '../../../../components/InputField';\nimport Loader from '../../../../components/Loader';\nimport { GET_CHARTS_DATA, GET_HUB_STATUS } from '../../../../graphql';\nimport * as WorkflowActions from '../../../../redux/actions/workflow';\nimport useActions from '../../../../redux/actions';\nimport useStyles, { CustomTextField, MenuProps } from './styles';\nimport WorkflowDetails from '../../../../pages/WorkflowDetails';\nimport { GET_EXPERIMENT_YAML } from '../../../../graphql/quries';\nimport BackButton from '../BackButton';\nimport * as TemplateSelectionActions from '../../../../redux/actions/template';\nimport { history } from '../../../../redux/configureStore';\n\nvar CreateWorkflow = function CreateWorkflow(_ref) {\n  _s();\n\n  var gotoStep = _ref.gotoStep;\n  var workflowDetails = useSelector(function (state) {\n    return state.workflowData;\n  });\n  var workflowAction = useActions(WorkflowActions);\n\n  var _useSelector = useSelector(function (state) {\n    return state.userData;\n  }),\n      selectedProjectID = _useSelector.selectedProjectID;\n\n  var _useState = useState({\n    workflow_name: workflowDetails.name,\n    workflow_desc: workflowDetails.description,\n    namespace: workflowDetails.namespace\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      workflowData = _useState2[0],\n      setWorkflowData = _useState2[1];\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var classes = useStyles();\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      allExperiments = _useState4[0],\n      setAllExperiments = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      selectedHub = _useState6[0],\n      setSelectedHub = _useState6[1];\n\n  var _useState7 = useState(t('customWorkflow.createWorkflow.selectAnExp')),\n      _useState8 = _slicedToArray(_useState7, 2),\n      selectedExp = _useState8[0],\n      setSelectedExp = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      availableHubs = _useState10[0],\n      setAvailableHubs = _useState10[1];\n\n  var template = useActions(TemplateSelectionActions);\n\n  var _useState11 = useState(),\n      _useState12 = _slicedToArray(_useState11, 2),\n      selectedHubDetails = _useState12[0],\n      setSelectedHubDetails = _useState12[1];\n\n  var _useLazyQuery = useLazyQuery(GET_EXPERIMENT_YAML, {\n    variables: {\n      experimentInput: {\n        ProjectID: selectedProjectID,\n        HubName: selectedHub,\n        ChartName: selectedExp.split('/')[0],\n        ExperimentName: selectedExp.split('/')[1],\n        FileType: 'experiment'\n      }\n    },\n    onCompleted: function onCompleted(data) {\n      var parsedYaml = YAML.parse(data.getYAMLData);\n      workflowAction.setWorkflowDetails({\n        customWorkflow: _objectSpread(_objectSpread({}, workflowDetails.customWorkflow), {}, {\n          description: parsedYaml.description.message\n        })\n      });\n      gotoStep(1);\n    }\n  }),\n      _useLazyQuery2 = _slicedToArray(_useLazyQuery, 1),\n      getExperimentYaml = _useLazyQuery2[0]; // Graphql query to get charts\n\n\n  var _useLazyQuery3 = useLazyQuery(GET_CHARTS_DATA, {\n    onCompleted: function onCompleted(data) {\n      var allExp = [];\n      data.getCharts.forEach(function (data) {\n        var _data$Spec$Experiment;\n\n        return (_data$Spec$Experiment = data.Spec.Experiments) === null || _data$Spec$Experiment === void 0 ? void 0 : _data$Spec$Experiment.forEach(function (experiment) {\n          allExp.push({\n            ChaosName: data.Metadata.Name,\n            ExperimentName: experiment\n          });\n        });\n      });\n      setAllExperiments([].concat(allExp));\n    },\n    fetchPolicy: 'cache-and-network'\n  }),\n      _useLazyQuery4 = _slicedToArray(_useLazyQuery3, 2),\n      getCharts = _useLazyQuery4[0],\n      chartsLoading = _useLazyQuery4[1].loading; // Get all MyHubs with status\n\n\n  var _useQuery = useQuery(GET_HUB_STATUS, {\n    variables: {\n      data: selectedProjectID\n    },\n    fetchPolicy: 'cache-and-network',\n    onCompleted: function onCompleted(hubData) {\n      if (hubData.getHubStatus.length) {\n        setSelectedHub(hubData.getHubStatus[0].HubName);\n        setAvailableHubs(_toConsumableArray(hubData.getHubStatus));\n        getCharts({\n          variables: {\n            projectID: selectedProjectID,\n            HubName: hubData.getHubStatus[0].HubName\n          }\n        });\n        setSelectedHubDetails(hubData.getHubStatus[0]);\n      }\n    }\n  }),\n      data = _useQuery.data;\n\n  var _useState13 = useState((data === null || data === void 0 ? void 0 : data.getHubStatus.length) ? 'construct' : 'upload'),\n      _useState14 = _slicedToArray(_useState13, 2),\n      constructYAML = _useState14[0],\n      setConstructYAML = _useState14[1]; // Function to get charts of a particular hub\n\n\n  var findChart = function findChart(hubname) {\n    var myHubData = data === null || data === void 0 ? void 0 : data.getHubStatus.filter(function (myHub) {\n      return hubname === myHub.HubName;\n    })[0];\n    getCharts({\n      variables: {\n        projectID: selectedProjectID,\n        HubName: hubname\n      }\n    });\n    setSelectedHubDetails(myHubData);\n  };\n\n  var _useState15 = useState(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      open = _useState16[0],\n      setOpen = _useState16[1];\n\n  var filteredExperiment = allExperiments.filter(function (exp) {\n    var name = \"\".concat(exp.ChaosName, \"/\").concat(exp.ExperimentName);\n\n    if (selectedExp === 'Select an experiment') {\n      return true;\n    }\n\n    return name.includes(selectedExp);\n  });\n\n  var _useState17 = useState(''),\n      _useState18 = _slicedToArray(_useState17, 2),\n      uploadedYAML = _useState18[0],\n      setUploadedYAML = _useState18[1];\n\n  var _useState19 = useState(''),\n      _useState20 = _slicedToArray(_useState19, 2),\n      fileName = _useState20[0],\n      setFileName = _useState20[1];\n\n  var handleDrag = function handleDrag(e) {\n    Array.from(e.dataTransfer.files).filter(function (file) {\n      return file.name.split('.')[1] === 'yaml' || file.name.split('.')[1] === 'yml';\n    }).forEach( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file) {\n        var readFile, parsedYaml;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return file.text();\n\n              case 2:\n                readFile = _context.sent;\n                setUploadedYAML(readFile);\n                setFileName(file.name);\n                parsedYaml = YAML.parse(readFile);\n                workflowAction.setWorkflowDetails(_objectSpread(_objectSpread({}, workflowDetails), {}, {\n                  yaml: YAML.stringify(parsedYaml)\n                }));\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  };\n\n  var handleFileUpload = function handleFileUpload(e) {\n    var readFile = e.target.files && e.target.files[0];\n    setFileName(readFile && readFile.name);\n    var extension = readFile === null || readFile === void 0 ? void 0 : readFile.name.substring(readFile.name.lastIndexOf('.') + 1);\n\n    if ((extension === 'yaml' || extension === 'yml') && readFile) {\n      readFile.text().then(function (response) {\n        setUploadedYAML(response);\n        var parsedYaml = YAML.parse(response);\n        workflowAction.setWorkflowDetails(_objectSpread(_objectSpread({}, workflowDetails), {}, {\n          yaml: YAML.stringify(parsedYaml)\n        }));\n      });\n    } else {\n      workflowAction.setWorkflowDetails(_objectSpread(_objectSpread({}, workflowDetails), {}, {\n        yaml: ''\n      }));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.headerDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(BackButton, {\n    isDisabled: false,\n    onClick: function onClick() {\n      workflowAction.setWorkflowDetails({\n        isCustomWorkflow: false\n      });\n      window.history.back();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h3\",\n    className: classes.headerText,\n    gutterBottom: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 9\n    }\n  }, t('customWorkflow.createWorkflow.create')), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.headerDesc,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 9\n    }\n  }, t('customWorkflow.createWorkflow.createDesc'))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.workflowDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h4\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 11\n    }\n  }, \" \", t('customWorkflow.createWorkflow.workflowInfo'))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.inputDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    className: classes.titleText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 13\n    }\n  }, t('customWorkflow.createWorkflow.workflowName'), \":\"), /*#__PURE__*/React.createElement(InputField, {\n    label: \"Workflow Name\",\n    styles: {\n      width: '100%'\n    },\n    \"data-cy\": \"inputWorkflowName\",\n    validationError: false,\n    handleChange: function handleChange(e) {\n      setWorkflowData({\n        workflow_name: e.target.value,\n        workflow_desc: workflowData.workflow_desc,\n        namespace: workflowData.namespace\n      });\n    },\n    value: workflowData.workflow_name,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.inputDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    className: classes.titleText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }\n  }, t('customWorkflow.createWorkflow.workflowDesc'), \":\"), /*#__PURE__*/React.createElement(CustomTextField, {\n    label: \"Description\",\n    \"data-cy\": \"inputWorkflowDesc\",\n    InputProps: {\n      disableUnderline: true,\n      classes: {\n        input: classes.resize\n      }\n    },\n    onChange: function onChange(e) {\n      setWorkflowData({\n        workflow_name: workflowData.workflow_name,\n        workflow_desc: e.target.value,\n        namespace: workflowData.namespace\n      });\n    },\n    value: workflowData.workflow_desc,\n    multiline: true,\n    rows: 14,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    className: classes.configureYAML,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 13\n    }\n  }, t('customWorkflow.createWorkflow.configure'))), /*#__PURE__*/React.createElement(FormControl, {\n    component: \"fieldset\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(RadioGroup, {\n    \"aria-label\": \"gender\",\n    name: \"gender1\",\n    value: constructYAML,\n    onChange: function onChange(event) {\n      setConstructYAML(event.target.value);\n\n      if (event.target.value === 'construct') {\n        setUploadedYAML('');\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormControlLabel, {\n    value: \"construct\",\n    control: /*#__PURE__*/React.createElement(Radio, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 26\n      }\n    }),\n    disabled: (data === null || data === void 0 ? void 0 : data.getHubStatus.length) === 0,\n    label: /*#__PURE__*/React.createElement(Typography, {\n      className: classes.radioText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 19\n      }\n    }, t('customWorkflow.createWorkflow.construct')),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 15\n    }\n  }), constructYAML === 'construct' ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.inputDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    className: classes.titleText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 21\n    }\n  }, t('customWorkflow.createWorkflow.firstChaos')), /*#__PURE__*/React.createElement(FormControl, {\n    variant: \"outlined\",\n    className: classes.formControl,\n    color: \"secondary\",\n    focused: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    className: classes.selectText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 23\n    }\n  }, t('customWorkflow.createWorkflow.selectHub')), /*#__PURE__*/React.createElement(Select, {\n    value: selectedHub,\n    onChange: function onChange(e) {\n      setSelectedHub(e.target.value);\n      findChart(e.target.value);\n    },\n    label: \"Cluster Status\",\n    MenuProps: MenuProps,\n    className: classes.selectText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 23\n    }\n  }, availableHubs.map(function (hubs) {\n    return /*#__PURE__*/React.createElement(MenuItem, {\n      key: hubs.HubName,\n      value: hubs.HubName,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 27\n      }\n    }, hubs.HubName);\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.inputDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    className: classes.titleText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 21\n    }\n  }, t('customWorkflow.createWorkflow.chooseExp')), chartsLoading ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.chooseExpDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(Loader, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 25\n    }\n  }, t('customWorkflow.createWorkflow.loadingExp'))) : /*#__PURE__*/React.createElement(FormControl, {\n    variant: \"outlined\",\n    color: \"secondary\",\n    focused: true,\n    component: \"button\",\n    className: classes.formControlExp,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    className: classes.selectText1,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 25\n    }\n  }, t('customWorkflow.createWorkflow.selectExp')), /*#__PURE__*/React.createElement(OutlinedInput, {\n    value: selectedExp,\n    onChange: function onChange(e) {\n      setSelectedExp(e.target.value);\n      setOpen(true);\n    },\n    endAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n      position: \"end\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      onClick: function onClick() {\n        setOpen(!open);\n      },\n      edge: \"end\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 31\n      }\n    }, /*#__PURE__*/React.createElement(ArrowDropDownIcon, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 33\n      }\n    }))),\n    className: classes.inputExpDiv,\n    labelWidth: 150,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 25\n    }\n  }), open ? /*#__PURE__*/React.createElement(ClickAwayListener, {\n    onClickAway: function onClickAway() {\n      return setOpen(!open);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 27\n    }\n  }, /*#__PURE__*/React.createElement(Paper, {\n    elevation: 3,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(MenuList, {\n    className: classes.expMenu,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 31\n    }\n  }, filteredExperiment.length > 0 ? filteredExperiment.map(function (exp) {\n    return /*#__PURE__*/React.createElement(MenuItem, {\n      key: \"\".concat(exp.ChaosName, \"/\").concat(exp.ExperimentName),\n      value: \"\".concat(exp.ChaosName, \"/\").concat(exp.ExperimentName),\n      onClick: function onClick() {\n        setSelectedExp(\"\".concat(exp.ChaosName, \"/\").concat(exp.ExperimentName));\n        setOpen(false);\n\n        if (selectedHub === 'Public Hub') {\n          workflowAction.setWorkflowDetails({\n            customWorkflow: _objectSpread(_objectSpread({}, workflowDetails.customWorkflow), {}, {\n              experiment_name: \"\".concat(exp.ChaosName, \"/\").concat(exp.ExperimentName),\n              yamlLink: \"\".concat(workflowDetails.customWorkflow.repoUrl, \"/raw/\").concat(workflowDetails.customWorkflow.repoBranch, \"/charts/\").concat(exp.ChaosName, \"/\").concat(exp.ExperimentName, \"/engine.yaml\")\n            })\n          });\n        } else {\n          workflowAction.setWorkflowDetails({\n            customWorkflow: _objectSpread(_objectSpread({}, workflowDetails.customWorkflow), {}, {\n              experiment_name: \"\".concat(exp.ChaosName, \"/\").concat(exp.ExperimentName),\n              yamlLink: \"\".concat(selectedHubDetails === null || selectedHubDetails === void 0 ? void 0 : selectedHubDetails.RepoURL, \"/raw/\").concat(selectedHubDetails === null || selectedHubDetails === void 0 ? void 0 : selectedHubDetails.RepoBranch, \"/charts/\").concat(exp.ChaosName, \"/\").concat(exp.ExperimentName, \"/engine.yaml\")\n            })\n          });\n        }\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 37\n      }\n    }, exp.ExperimentName);\n  }) : /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"Select an experiment\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 35\n    }\n  }, t('customWorkflow.createWorkflow.noExp'))))) : null)), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.inputDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    className: classes.titleText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 21\n    }\n  }, t('customWorkflow.createWorkflow.chooseNamespace')), /*#__PURE__*/React.createElement(FormControl, {\n    variant: \"outlined\",\n    color: \"secondary\",\n    focused: true,\n    component: \"button\",\n    className: classes.formControlExp,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    className: classes.selectText1,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 23\n    }\n  }, t('customWorkflow.createWorkflow.chooseNamespace')), /*#__PURE__*/React.createElement(OutlinedInput, {\n    value: workflowData.namespace,\n    onChange: function onChange(e) {\n      setWorkflowData({\n        workflow_name: workflowData.workflow_name,\n        workflow_desc: workflowData.workflow_desc,\n        namespace: e.target.value\n      });\n    },\n    className: classes.inputExpDiv,\n    labelWidth: 130,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 447,\n      columnNumber: 23\n    }\n  })))) : null, /*#__PURE__*/React.createElement(FormControlLabel, {\n    value: \"upload\",\n    control: /*#__PURE__*/React.createElement(Radio, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 26\n      }\n    }),\n    disabled: workflowDetails.customWorkflows.length !== 0,\n    label: /*#__PURE__*/React.createElement(Typography, {\n      className: classes.radioText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 19\n      }\n    }, t('customWorkflow.createWorkflow.upload'), ' ', /*#__PURE__*/React.createElement(\"strong\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 21\n      }\n    }, t('customWorkflow.createWorkflow.yaml'))),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 15\n    }\n  }), constructYAML === 'upload' ? /*#__PURE__*/React.createElement(Paper, {\n    elevation: 3,\n    component: \"div\",\n    onDragOver: function onDragOver(e) {\n      e.preventDefault();\n    },\n    onDrop: function onDrop(e) {\n      e.preventDefault();\n      handleDrag(e);\n    },\n    className: classes.uploadYAMLDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 17\n    }\n  }, uploadedYAML === '' ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.uploadYAMLText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/icons/upload-yaml.svg\",\n    alt: \"upload yaml\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 23\n    }\n  }, t('customWorkflow.createWorkflow.drag')), /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 23\n    }\n  }, \"or\"), /*#__PURE__*/React.createElement(\"input\", {\n    accept: \".yaml\",\n    style: {\n      display: 'none'\n    },\n    id: \"contained-button-file\",\n    type: \"file\",\n    onChange: function onChange(e) {\n      handleFileUpload(e);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"contained-button-file\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"outlined\",\n    className: classes.uploadBtn,\n    component: \"span\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 505,\n      columnNumber: 25\n    }\n  }, t('customWorkflow.createWorkflow.uploadFile')))) : /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.uploadSuccessDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 515,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/icons/upload-success.svg\",\n    alt: \"checkmark\",\n    className: classes.uploadSuccessImg,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 516,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.uploadSuccessText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 521,\n      columnNumber: 23\n    }\n  }, t('customWorkflow.createWorkflow.uploadSuccess'), ' ', fileName))) : null)))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.nextButtonDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 533,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ButtonFilled, {\n    handleClick: function handleClick() {\n      if (constructYAML === 'upload' && uploadedYAML !== '') {\n        history.push('/create-workflow');\n        template.selectTemplate({\n          isDisable: false\n        });\n      }\n\n      workflowAction.setWorkflowDetails({\n        name: workflowData.workflow_name,\n        description: workflowData.workflow_desc,\n        namespace: workflowData.namespace,\n        customWorkflow: _objectSpread(_objectSpread({}, workflowDetails.customWorkflow), {}, {\n          hubName: selectedHub,\n          repoUrl: selectedHubDetails === null || selectedHubDetails === void 0 ? void 0 : selectedHubDetails.RepoURL,\n          repoBranch: selectedHubDetails === null || selectedHubDetails === void 0 ? void 0 : selectedHubDetails.RepoBranch,\n          yaml: '',\n          index: -1\n        })\n      });\n      getExperimentYaml();\n    },\n    isPrimary: true,\n    isDisabled: constructYAML === 'construct' && (selectedExp === 'Select an experiment' || filteredExperiment.length !== 1 || workflowData.namespace.trim() === '') ? true : !!(constructYAML === 'upload' && uploadedYAML === ''),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 534,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 565,\n      columnNumber: 11\n    }\n  }, t('customWorkflow.createWorkflow.nextBtn'), /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"next\",\n    src: \"/icons/nextArrow.svg\",\n    className: classes.nextArrow,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 567,\n      columnNumber: 13\n    }\n  })))));\n};\n\n_s(CreateWorkflow, \"HsLyvoa3jMKfcti/j6XLkJyfMeM=\", false, function () {\n  return [useSelector, useActions, useSelector, useTranslation, useStyles, useActions, useLazyQuery, useLazyQuery, useQuery];\n});\n\n_c = CreateWorkflow;\nexport default CreateWorkflow;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateWorkflow\");","map":{"version":3,"sources":["/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/views/CreateWorkflow/CustomWorkflow/CreateWorkflow/index.tsx"],"names":["useLazyQuery","useQuery","Button","FormControl","FormControlLabel","IconButton","InputAdornment","InputLabel","MenuItem","MenuList","OutlinedInput","Paper","Radio","RadioGroup","Select","Typography","ClickAwayListener","React","useState","useSelector","useTranslation","ArrowDropDownIcon","YAML","ButtonFilled","InputField","Loader","GET_CHARTS_DATA","GET_HUB_STATUS","WorkflowActions","useActions","useStyles","CustomTextField","MenuProps","WorkflowDetails","GET_EXPERIMENT_YAML","BackButton","TemplateSelectionActions","history","CreateWorkflow","gotoStep","workflowDetails","state","workflowData","workflowAction","userData","selectedProjectID","workflow_name","name","workflow_desc","description","namespace","setWorkflowData","t","classes","allExperiments","setAllExperiments","selectedHub","setSelectedHub","selectedExp","setSelectedExp","availableHubs","setAvailableHubs","template","selectedHubDetails","setSelectedHubDetails","variables","experimentInput","ProjectID","HubName","ChartName","split","ExperimentName","FileType","onCompleted","data","parsedYaml","parse","getYAMLData","setWorkflowDetails","customWorkflow","message","getExperimentYaml","allExp","getCharts","forEach","Spec","Experiments","experiment","push","ChaosName","Metadata","Name","fetchPolicy","chartsLoading","loading","hubData","getHubStatus","length","projectID","constructYAML","setConstructYAML","findChart","hubname","myHubData","filter","myHub","open","setOpen","filteredExperiment","exp","includes","uploadedYAML","setUploadedYAML","fileName","setFileName","handleDrag","e","Array","from","dataTransfer","files","file","text","readFile","yaml","stringify","handleFileUpload","target","extension","substring","lastIndexOf","then","response","root","headerDiv","isCustomWorkflow","window","back","headerText","headerDesc","workflowDiv","inputDiv","titleText","width","value","disableUnderline","input","resize","configureYAML","event","radioText","formControl","selectText","map","hubs","chooseExpDiv","formControlExp","selectText1","inputExpDiv","expMenu","experiment_name","yamlLink","repoUrl","repoBranch","RepoURL","RepoBranch","customWorkflows","preventDefault","uploadYAMLDiv","uploadYAMLText","display","uploadBtn","uploadSuccessDiv","uploadSuccessImg","uploadSuccessText","nextButtonDiv","selectTemplate","isDisable","hubName","index","trim","nextArrow"],"mappings":"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","sourcesContent":["import { useLazyQuery, useQuery } from '@apollo/client';\nimport {\n  Button,\n  FormControl,\n  FormControlLabel,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  MenuItem,\n  MenuList,\n  OutlinedInput,\n  Paper,\n  Radio,\n  RadioGroup,\n  Select,\n  Typography,\n  ClickAwayListener,\n} from '@material-ui/core';\nimport React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport YAML from 'yaml';\nimport ButtonFilled from '../../../../components/Button/ButtonFilled';\nimport InputField from '../../../../components/InputField';\nimport Loader from '../../../../components/Loader';\nimport { GET_CHARTS_DATA, GET_HUB_STATUS } from '../../../../graphql';\nimport { MyHubDetail } from '../../../../models/graphql/user';\nimport { Charts, HubStatus } from '../../../../models/redux/myhub';\nimport * as WorkflowActions from '../../../../redux/actions/workflow';\nimport useActions from '../../../../redux/actions';\nimport { RootState } from '../../../../redux/reducers';\nimport useStyles, { CustomTextField, MenuProps } from './styles';\nimport WorkflowDetails from '../../../../pages/WorkflowDetails';\nimport { GET_EXPERIMENT_YAML } from '../../../../graphql/quries';\nimport BackButton from '../BackButton';\nimport * as TemplateSelectionActions from '../../../../redux/actions/template';\nimport { history } from '../../../../redux/configureStore';\n\ninterface WorkflowDetails {\n  workflow_name: string;\n  workflow_desc: string;\n  namespace: string;\n}\n\ninterface ChartName {\n  ChaosName: string;\n  ExperimentName: string;\n}\n\ninterface VerifyCommitProps {\n  gotoStep: (page: number) => void;\n}\n\nconst CreateWorkflow: React.FC<VerifyCommitProps> = ({ gotoStep }) => {\n  const workflowDetails = useSelector((state: RootState) => state.workflowData);\n  const workflowAction = useActions(WorkflowActions);\n\n  const { selectedProjectID } = useSelector(\n    (state: RootState) => state.userData\n  );\n\n  const [workflowData, setWorkflowData] = useState<WorkflowDetails>({\n    workflow_name: workflowDetails.name,\n    workflow_desc: workflowDetails.description,\n    namespace: workflowDetails.namespace,\n  });\n\n  const { t } = useTranslation();\n  const classes = useStyles();\n\n  const [allExperiments, setAllExperiments] = useState<ChartName[]>([]);\n  const [selectedHub, setSelectedHub] = useState('');\n  const [selectedExp, setSelectedExp] = useState(\n    t('customWorkflow.createWorkflow.selectAnExp') as string\n  );\n  const [availableHubs, setAvailableHubs] = useState<MyHubDetail[]>([]);\n  const template = useActions(TemplateSelectionActions);\n\n  const [selectedHubDetails, setSelectedHubDetails] = useState<MyHubDetail>();\n\n  const [getExperimentYaml] = useLazyQuery(GET_EXPERIMENT_YAML, {\n    variables: {\n      experimentInput: {\n        ProjectID: selectedProjectID,\n        HubName: selectedHub,\n        ChartName: selectedExp.split('/')[0],\n        ExperimentName: selectedExp.split('/')[1],\n        FileType: 'experiment',\n      },\n    },\n    onCompleted: (data) => {\n      const parsedYaml = YAML.parse(data.getYAMLData);\n      workflowAction.setWorkflowDetails({\n        customWorkflow: {\n          ...workflowDetails.customWorkflow,\n          description: parsedYaml.description.message,\n        },\n      });\n      gotoStep(1);\n    },\n  });\n\n  // Graphql query to get charts\n  const [getCharts, { loading: chartsLoading }] = useLazyQuery<Charts>(\n    GET_CHARTS_DATA,\n    {\n      onCompleted: (data) => {\n        const allExp: ChartName[] = [];\n        data.getCharts.forEach((data) => {\n          return data.Spec.Experiments?.forEach((experiment) => {\n            allExp.push({\n              ChaosName: data.Metadata.Name,\n              ExperimentName: experiment,\n            });\n          });\n        });\n        setAllExperiments([...allExp]);\n      },\n      fetchPolicy: 'cache-and-network',\n    }\n  );\n\n  // Get all MyHubs with status\n  const { data } = useQuery<HubStatus>(GET_HUB_STATUS, {\n    variables: { data: selectedProjectID },\n    fetchPolicy: 'cache-and-network',\n    onCompleted: (hubData) => {\n      if (hubData.getHubStatus.length) {\n        setSelectedHub(hubData.getHubStatus[0].HubName);\n        setAvailableHubs([...hubData.getHubStatus]);\n        getCharts({\n          variables: {\n            projectID: selectedProjectID,\n            HubName: hubData.getHubStatus[0].HubName,\n          },\n        });\n        setSelectedHubDetails(hubData.getHubStatus[0]);\n      }\n    },\n  });\n  const [constructYAML, setConstructYAML] = useState(\n    data?.getHubStatus.length ? 'construct' : 'upload'\n  );\n  // Function to get charts of a particular hub\n  const findChart = (hubname: string) => {\n    const myHubData = data?.getHubStatus.filter((myHub) => {\n      return hubname === myHub.HubName;\n    })[0];\n    getCharts({\n      variables: {\n        projectID: selectedProjectID,\n        HubName: hubname,\n      },\n    });\n    setSelectedHubDetails(myHubData);\n  };\n\n  const [open, setOpen] = useState(false);\n\n  const filteredExperiment = allExperiments.filter((exp) => {\n    const name = `${exp.ChaosName}/${exp.ExperimentName}`;\n    if (selectedExp === 'Select an experiment') {\n      return true;\n    }\n    return name.includes(selectedExp);\n  });\n  const [uploadedYAML, setUploadedYAML] = useState('');\n  const [fileName, setFileName] = useState<string | null>('');\n\n  const handleDrag = (e: React.DragEvent<HTMLDivElement>) => {\n    Array.from(e.dataTransfer.files)\n      .filter(\n        (file) =>\n          file.name.split('.')[1] === 'yaml' ||\n          file.name.split('.')[1] === 'yml'\n      )\n      .forEach(async (file) => {\n        const readFile = await file.text();\n        setUploadedYAML(readFile);\n        setFileName(file.name);\n        const parsedYaml = YAML.parse(readFile);\n        workflowAction.setWorkflowDetails({\n          ...workflowDetails,\n          yaml: YAML.stringify(parsedYaml),\n        });\n      });\n  };\n  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const readFile = e.target.files && e.target.files[0];\n    setFileName(readFile && readFile.name);\n    const extension = readFile?.name.substring(\n      readFile.name.lastIndexOf('.') + 1\n    );\n    if ((extension === 'yaml' || extension === 'yml') && readFile) {\n      readFile.text().then((response) => {\n        setUploadedYAML(response);\n        const parsedYaml = YAML.parse(response);\n        workflowAction.setWorkflowDetails({\n          ...workflowDetails,\n          yaml: YAML.stringify(parsedYaml),\n        });\n      });\n    } else {\n      workflowAction.setWorkflowDetails({\n        ...workflowDetails,\n        yaml: '',\n      });\n    }\n  };\n  return (\n    <div className={classes.root}>\n      <div className={classes.headerDiv}>\n        <BackButton\n          isDisabled={false}\n          onClick={() => {\n            workflowAction.setWorkflowDetails({\n              isCustomWorkflow: false,\n            });\n            window.history.back();\n          }}\n        />\n        <Typography variant=\"h3\" className={classes.headerText} gutterBottom>\n          {t('customWorkflow.createWorkflow.create')}\n        </Typography>\n        <Typography className={classes.headerDesc}>\n          {t('customWorkflow.createWorkflow.createDesc')}\n        </Typography>\n      </div>\n      <div className={classes.workflowDiv}>\n        <Typography variant=\"h4\">\n          <strong> {t('customWorkflow.createWorkflow.workflowInfo')}</strong>\n        </Typography>\n        <div>\n          <div className={classes.inputDiv}>\n            <Typography variant=\"h6\" className={classes.titleText}>\n              {t('customWorkflow.createWorkflow.workflowName')}:\n            </Typography>\n            <InputField\n              label=\"Workflow Name\"\n              styles={{\n                width: '100%',\n              }}\n              data-cy=\"inputWorkflowName\"\n              validationError={false}\n              handleChange={(e) => {\n                setWorkflowData({\n                  workflow_name: e.target.value,\n                  workflow_desc: workflowData.workflow_desc,\n                  namespace: workflowData.namespace,\n                });\n              }}\n              value={workflowData.workflow_name}\n            />\n          </div>\n          <div className={classes.inputDiv}>\n            <Typography variant=\"h6\" className={classes.titleText}>\n              {t('customWorkflow.createWorkflow.workflowDesc')}:\n            </Typography>\n            <CustomTextField\n              label=\"Description\"\n              data-cy=\"inputWorkflowDesc\"\n              InputProps={{\n                disableUnderline: true,\n                classes: {\n                  input: classes.resize,\n                },\n              }}\n              onChange={(e) => {\n                setWorkflowData({\n                  workflow_name: workflowData.workflow_name,\n                  workflow_desc: e.target.value,\n                  namespace: workflowData.namespace,\n                });\n              }}\n              value={workflowData.workflow_desc}\n              multiline\n              rows={14}\n            />\n          </div>\n          <hr />\n          <Typography variant=\"h5\" className={classes.configureYAML}>\n            <strong>{t('customWorkflow.createWorkflow.configure')}</strong>\n          </Typography>\n\n          <FormControl component=\"fieldset\">\n            <RadioGroup\n              aria-label=\"gender\"\n              name=\"gender1\"\n              value={constructYAML}\n              onChange={(event) => {\n                setConstructYAML(event.target.value);\n                if (event.target.value === 'construct') {\n                  setUploadedYAML('');\n                }\n              }}\n            >\n              <FormControlLabel\n                value=\"construct\"\n                control={<Radio />}\n                disabled={data?.getHubStatus.length === 0}\n                label={\n                  <Typography className={classes.radioText}>\n                    {t('customWorkflow.createWorkflow.construct')}\n                  </Typography>\n                }\n              />\n              {constructYAML === 'construct' ? (\n                <>\n                  <div className={classes.inputDiv}>\n                    <Typography variant=\"h6\" className={classes.titleText}>\n                      {t('customWorkflow.createWorkflow.firstChaos')}\n                    </Typography>\n                    <FormControl\n                      variant=\"outlined\"\n                      className={classes.formControl}\n                      color=\"secondary\"\n                      focused\n                    >\n                      <InputLabel className={classes.selectText}>\n                        {t('customWorkflow.createWorkflow.selectHub')}\n                      </InputLabel>\n                      <Select\n                        value={selectedHub}\n                        onChange={(e) => {\n                          setSelectedHub(e.target.value as string);\n                          findChart(e.target.value as string);\n                        }}\n                        label=\"Cluster Status\"\n                        MenuProps={MenuProps}\n                        className={classes.selectText}\n                      >\n                        {availableHubs.map((hubs) => (\n                          <MenuItem key={hubs.HubName} value={hubs.HubName}>\n                            {hubs.HubName}\n                          </MenuItem>\n                        ))}\n                      </Select>\n                    </FormControl>\n                  </div>\n                  <div className={classes.inputDiv}>\n                    <Typography variant=\"h6\" className={classes.titleText}>\n                      {t('customWorkflow.createWorkflow.chooseExp')}\n                    </Typography>\n                    {chartsLoading ? (\n                      <div className={classes.chooseExpDiv}>\n                        <Loader />\n                        <Typography variant=\"body2\">\n                          {t('customWorkflow.createWorkflow.loadingExp')}\n                        </Typography>\n                      </div>\n                    ) : (\n                      <FormControl\n                        variant=\"outlined\"\n                        color=\"secondary\"\n                        focused\n                        component=\"button\"\n                        className={classes.formControlExp}\n                      >\n                        <InputLabel className={classes.selectText1}>\n                          {t('customWorkflow.createWorkflow.selectExp')}\n                        </InputLabel>\n                        <OutlinedInput\n                          value={selectedExp}\n                          onChange={(e) => {\n                            setSelectedExp(e.target.value);\n                            setOpen(true);\n                          }}\n                          endAdornment={\n                            <InputAdornment position=\"end\">\n                              <IconButton\n                                onClick={() => {\n                                  setOpen(!open);\n                                }}\n                                edge=\"end\"\n                              >\n                                <ArrowDropDownIcon />\n                              </IconButton>\n                            </InputAdornment>\n                          }\n                          className={classes.inputExpDiv}\n                          labelWidth={150}\n                        />\n                        {open ? (\n                          <ClickAwayListener onClickAway={() => setOpen(!open)}>\n                            <Paper elevation={3}>\n                              <MenuList className={classes.expMenu}>\n                                {filteredExperiment.length > 0 ? (\n                                  filteredExperiment.map((exp) => (\n                                    <MenuItem\n                                      key={`${exp.ChaosName}/${exp.ExperimentName}`}\n                                      value={`${exp.ChaosName}/${exp.ExperimentName}`}\n                                      onClick={() => {\n                                        setSelectedExp(\n                                          `${exp.ChaosName}/${exp.ExperimentName}`\n                                        );\n                                        setOpen(false);\n                                        if (selectedHub === 'Public Hub') {\n                                          workflowAction.setWorkflowDetails({\n                                            customWorkflow: {\n                                              ...workflowDetails.customWorkflow,\n                                              experiment_name: `${exp.ChaosName}/${exp.ExperimentName}`,\n                                              yamlLink: `${workflowDetails.customWorkflow.repoUrl}/raw/${workflowDetails.customWorkflow.repoBranch}/charts/${exp.ChaosName}/${exp.ExperimentName}/engine.yaml`,\n                                            },\n                                          });\n                                        } else {\n                                          workflowAction.setWorkflowDetails({\n                                            customWorkflow: {\n                                              ...workflowDetails.customWorkflow,\n                                              experiment_name: `${exp.ChaosName}/${exp.ExperimentName}`,\n                                              yamlLink: `${selectedHubDetails?.RepoURL}/raw/${selectedHubDetails?.RepoBranch}/charts/${exp.ChaosName}/${exp.ExperimentName}/engine.yaml`,\n                                            },\n                                          });\n                                        }\n                                      }}\n                                    >\n                                      {exp.ExperimentName}\n                                    </MenuItem>\n                                  ))\n                                ) : (\n                                  <MenuItem value=\"Select an experiment\">\n                                    {t('customWorkflow.createWorkflow.noExp')}\n                                  </MenuItem>\n                                )}\n                              </MenuList>\n                            </Paper>\n                          </ClickAwayListener>\n                        ) : null}\n                      </FormControl>\n                    )}\n                  </div>\n                  <div className={classes.inputDiv}>\n                    <Typography variant=\"h6\" className={classes.titleText}>\n                      {t('customWorkflow.createWorkflow.chooseNamespace')}\n                    </Typography>\n                    <FormControl\n                      variant=\"outlined\"\n                      color=\"secondary\"\n                      focused\n                      component=\"button\"\n                      className={classes.formControlExp}\n                    >\n                      <InputLabel className={classes.selectText1}>\n                        {t('customWorkflow.createWorkflow.chooseNamespace')}\n                      </InputLabel>\n\n                      <OutlinedInput\n                        value={workflowData.namespace}\n                        onChange={(e) => {\n                          setWorkflowData({\n                            workflow_name: workflowData.workflow_name,\n                            workflow_desc: workflowData.workflow_desc,\n                            namespace: e.target.value,\n                          });\n                        }}\n                        className={classes.inputExpDiv}\n                        labelWidth={130}\n                      />\n                    </FormControl>\n                  </div>\n                </>\n              ) : null}\n\n              <FormControlLabel\n                value=\"upload\"\n                control={<Radio />}\n                disabled={workflowDetails.customWorkflows.length !== 0}\n                label={\n                  <Typography className={classes.radioText}>\n                    {t('customWorkflow.createWorkflow.upload')}{' '}\n                    <strong>{t('customWorkflow.createWorkflow.yaml')}</strong>\n                  </Typography>\n                }\n              />\n              {constructYAML === 'upload' ? (\n                <Paper\n                  elevation={3}\n                  component=\"div\"\n                  onDragOver={(e) => {\n                    e.preventDefault();\n                  }}\n                  onDrop={(e) => {\n                    e.preventDefault();\n                    handleDrag(e);\n                  }}\n                  className={classes.uploadYAMLDiv}\n                >\n                  {uploadedYAML === '' ? (\n                    <div className={classes.uploadYAMLText}>\n                      <img src=\"/icons/upload-yaml.svg\" alt=\"upload yaml\" />\n                      <Typography variant=\"h5\">\n                        {t('customWorkflow.createWorkflow.drag')}\n                      </Typography>\n                      <Typography>or</Typography>\n                      <input\n                        accept=\".yaml\"\n                        style={{ display: 'none' }}\n                        id=\"contained-button-file\"\n                        type=\"file\"\n                        onChange={(e) => {\n                          handleFileUpload(e);\n                        }}\n                      />\n                      <label htmlFor=\"contained-button-file\">\n                        <Button\n                          variant=\"outlined\"\n                          className={classes.uploadBtn}\n                          component=\"span\"\n                        >\n                          {t('customWorkflow.createWorkflow.uploadFile')}\n                        </Button>\n                      </label>\n                    </div>\n                  ) : (\n                    <div className={classes.uploadSuccessDiv}>\n                      <img\n                        src=\"/icons/upload-success.svg\"\n                        alt=\"checkmark\"\n                        className={classes.uploadSuccessImg}\n                      />\n                      <Typography className={classes.uploadSuccessText}>\n                        {t('customWorkflow.createWorkflow.uploadSuccess')}{' '}\n                        {fileName}\n                      </Typography>\n                    </div>\n                  )}\n                </Paper>\n              ) : null}\n            </RadioGroup>\n          </FormControl>\n        </div>\n      </div>\n      <div className={classes.nextButtonDiv}>\n        <ButtonFilled\n          handleClick={() => {\n            if (constructYAML === 'upload' && uploadedYAML !== '') {\n              history.push('/create-workflow');\n              template.selectTemplate({ isDisable: false });\n            }\n            workflowAction.setWorkflowDetails({\n              name: workflowData.workflow_name,\n              description: workflowData.workflow_desc,\n              namespace: workflowData.namespace,\n              customWorkflow: {\n                ...workflowDetails.customWorkflow,\n                hubName: selectedHub,\n                repoUrl: selectedHubDetails?.RepoURL,\n                repoBranch: selectedHubDetails?.RepoBranch,\n                yaml: '',\n                index: -1,\n              },\n            });\n            getExperimentYaml();\n          }}\n          isPrimary\n          isDisabled={\n            constructYAML === 'construct' &&\n            (selectedExp === 'Select an experiment' ||\n              filteredExperiment.length !== 1 ||\n              workflowData.namespace.trim() === '')\n              ? true\n              : !!(constructYAML === 'upload' && uploadedYAML === '')\n          }\n        >\n          <div>\n            {t('customWorkflow.createWorkflow.nextBtn')}\n            <img\n              alt=\"next\"\n              src=\"/icons/nextArrow.svg\"\n              className={classes.nextArrow}\n            />\n          </div>\n        </ButtonFilled>\n      </div>\n    </div>\n  );\n};\nexport default CreateWorkflow;\n"]},"metadata":{},"sourceType":"module"}