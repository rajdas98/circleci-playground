{"ast":null,"code":"import _objectSpread from \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/components/DagreGraph/index.tsx\";\nimport * as d3 from 'd3';\nimport dagreD3 from 'dagre-d3';\nimport React, { Component, createRef } from 'react';\n\nvar DagreGraph = /*#__PURE__*/function (_Component) {\n  _inherits(DagreGraph, _Component);\n\n  var _super = _createSuper(DagreGraph);\n\n  function DagreGraph() {\n    var _this;\n\n    _classCallCheck(this, DagreGraph);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.svg = createRef();\n    _this.innerG = createRef();\n\n    _this._drawChart = function () {\n      var _this$props = _this.props,\n          nodes = _this$props.nodes,\n          links = _this$props.links,\n          zoomable = _this$props.zoomable,\n          fitBoundaries = _this$props.fitBoundaries,\n          config = _this$props.config,\n          animate = _this$props.animate,\n          shape = _this$props.shape,\n          onNodeClick = _this$props.onNodeClick,\n          onRelationshipClick = _this$props.onRelationshipClick;\n      var g = new dagreD3.graphlib.Graph().setGraph(config || {});\n      nodes.forEach(function (node) {\n        return g.setNode(node.id, _objectSpread({\n          label: node.label,\n          class: node.class || '',\n          labelType: node.labelType || 'string'\n        }, node.config));\n      });\n\n      if (shape) {\n        g.nodes().forEach(function (v) {\n          g.node(v).shape = shape;\n        });\n      }\n\n      links.forEach(function (link) {\n        g.setEdge(link.source, link.target, _objectSpread({\n          label: link.label || '',\n          class: link.class || ''\n        }, link.config));\n      });\n      var render = new dagreD3.render();\n      var svg = d3.select(_this.svg.current);\n      var inner = d3.select(_this.innerG.current);\n      var zoom = d3.zoom().on('zoom', function () {\n        return inner.attr('transform', d3.event.transform);\n      });\n\n      if (zoomable) {\n        svg.call(zoom);\n      }\n\n      if (animate) {\n        g.graph().transition = function transition(selection) {\n          return selection.transition().duration(animate || 1000);\n        };\n      }\n\n      render(inner, g);\n\n      if (fitBoundaries) {\n        // @BertCh recommendation for fitting boundaries\n        var _inner$node$getBBox = inner.node().getBBox(),\n            width = _inner$node$getBBox.width,\n            height = _inner$node$getBBox.height,\n            x = _inner$node$getBBox.x,\n            y = _inner$node$getBBox.y;\n\n        var parent = inner.node().parentElement || inner.node().parentNode;\n        var fullWidth = parent.clientWidth || parent.parentNode.clientWidth;\n        var fullHeight = parent.clientHeight || parent.parentNode.clientHeight;\n        var midX = x + width / 2;\n        var midY = y + height / 2;\n        if (width === 0 || height === 0) return; // nothing to fit\n\n        var scale = 0.9 / Math.max(width / fullWidth, height / fullHeight);\n        var translate = [fullWidth / 2 - scale * midX, fullHeight / 2 - scale * midY];\n        var transform = d3.zoomIdentity.translate(translate[0], translate[1]).scale(scale);\n        svg.transition().duration(animate || 0) // milliseconds\n        .call(zoom.transform, transform);\n      }\n\n      if (onNodeClick) {\n        svg.selectAll('g.node').on('click', function (id) {\n          var _node = g.node(id);\n\n          var _original = _this._getNodeData(id);\n\n          onNodeClick({\n            d3node: _node,\n            original: _original\n          });\n        });\n      }\n\n      if (onRelationshipClick) {\n        svg.selectAll('g.edgeLabel, g.edgePath').on('click', function (id) {\n          var _source = g.node(id.v);\n\n          var _original_source = _this._getNodeData(id.v);\n\n          var _target = g.node(id.w);\n\n          var _original_target = _this._getNodeData(id.w);\n\n          onRelationshipClick({\n            d3source: _source,\n            source: _original_source,\n            d3target: _target,\n            target: _original_target\n          });\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(DagreGraph, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._drawChart();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this._drawChart();\n    }\n  }, {\n    key: \"_getNodeData\",\n    value: function _getNodeData(id) {\n      var nodes = this.props.nodes;\n      return nodes.find(function (node) {\n        return node.id === id;\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          width = _this$props2.width,\n          height = _this$props2.height,\n          className = _this$props2.className;\n      return /*#__PURE__*/React.createElement(\"svg\", {\n        width: width,\n        height: height,\n        ref: this.svg,\n        className: className || '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"g\", {\n        ref: this.innerG,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return DagreGraph;\n}(Component);\n\nDagreGraph.defaultProps = {\n  zoomable: false,\n  fitBoundaries: false,\n  className: 'dagre-d3-react'\n};\nexport default DagreGraph;","map":{"version":3,"sources":["/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/components/DagreGraph/index.tsx"],"names":["d3","dagreD3","React","Component","createRef","DagreGraph","svg","innerG","_drawChart","props","nodes","links","zoomable","fitBoundaries","config","animate","shape","onNodeClick","onRelationshipClick","g","graphlib","Graph","setGraph","forEach","node","setNode","id","label","class","labelType","v","link","setEdge","source","target","render","select","current","inner","zoom","on","attr","event","transform","call","graph","transition","selection","duration","getBBox","width","height","x","y","parent","parentElement","parentNode","fullWidth","clientWidth","fullHeight","clientHeight","midX","midY","scale","Math","max","translate","zoomIdentity","selectAll","_node","_original","_getNodeData","d3node","original","_source","_original_source","_target","w","_original_target","d3source","d3target","find","className","defaultProps"],"mappings":"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","sourcesContent":["import * as d3 from 'd3';\nimport dagreD3, { GraphLabel, Node } from 'dagre-d3';\nimport React, { Component, createRef } from 'react';\n\ninterface GraphProps {\n  nodes: d3Node[];\n  links: d3Link[];\n  zoomable?: boolean;\n  fitBoundaries?: boolean;\n  height?: string;\n  width?: string;\n  config?: GraphLabel;\n  animate?: number;\n  className?: string;\n  shape?: shapes;\n  onNodeClick?: nodeClick;\n  onRelationshipClick?: relationshipClick;\n}\ntype shapes = 'rect' | 'circle' | 'ellipse';\ntype labelType = 'html' | 'svg' | 'string';\n\ntype nodeClick = (nodeData: {\n  d3node: Node;\n  original: d3Node | undefined;\n}) => void;\n\ntype relationshipClick = (nodeData: {\n  d3source: Node;\n  source: d3Node | undefined;\n  d3target: Node;\n  target: d3Node | undefined;\n}) => void;\n\nexport type d3Node = {\n  id: any;\n  label: string;\n  class?: string;\n  labelType?: labelType;\n  config?: object;\n};\nexport type d3Link = {\n  source: string;\n  target: string;\n  class?: string;\n  label?: string;\n  config?: object;\n};\ntype Relationship = {\n  v: any;\n  w: any;\n};\n\nclass DagreGraph extends Component<GraphProps> {\n  svg = createRef<SVGSVGElement>();\n  innerG = createRef<SVGSVGElement>();\n\n  static defaultProps = {\n    zoomable: false,\n    fitBoundaries: false,\n    className: 'dagre-d3-react',\n  };\n  componentDidMount() {\n    this._drawChart();\n  }\n  componentDidUpdate() {\n    this._drawChart();\n  }\n\n  _drawChart = () => {\n    const {\n      nodes,\n      links,\n      zoomable,\n      fitBoundaries,\n      config,\n      animate,\n      shape,\n      onNodeClick,\n      onRelationshipClick,\n    } = this.props;\n    const g = new dagreD3.graphlib.Graph().setGraph(config || {});\n\n    nodes.forEach((node) =>\n      g.setNode(node.id, {\n        label: node.label,\n        class: node.class || '',\n        labelType: node.labelType || 'string',\n        ...node.config,\n      })\n    );\n\n    if (shape) {\n      g.nodes().forEach((v) => {\n        g.node(v).shape = shape;\n      });\n    }\n\n    links.forEach((link) => {\n      g.setEdge(link.source, link.target, {\n        label: link.label || '',\n        class: link.class || '',\n        ...link.config,\n      });\n    });\n\n    const render = new dagreD3.render();\n    const svg: any = d3.select(this.svg.current);\n    const inner: any = d3.select(this.innerG.current);\n\n    const zoom = d3\n      .zoom()\n      .on('zoom', () => inner.attr('transform', d3.event.transform));\n\n    if (zoomable) {\n      svg.call(zoom);\n    }\n    if (animate) {\n      g.graph().transition = function transition(selection) {\n        return selection.transition().duration(animate || 1000);\n      };\n    }\n\n    render(inner, g);\n\n    if (fitBoundaries) {\n      // @BertCh recommendation for fitting boundaries\n      const { width, height, x, y } = inner.node().getBBox();\n      const parent = inner.node().parentElement || inner.node().parentNode;\n      const fullWidth = parent.clientWidth || parent.parentNode.clientWidth;\n      const fullHeight = parent.clientHeight || parent.parentNode.clientHeight;\n      const midX = x + width / 2;\n      const midY = y + height / 2;\n\n      if (width === 0 || height === 0) return; // nothing to fit\n      const scale = 0.9 / Math.max(width / fullWidth, height / fullHeight);\n      const translate = [\n        fullWidth / 2 - scale * midX,\n        fullHeight / 2 - scale * midY,\n      ];\n      const transform = d3.zoomIdentity\n        .translate(translate[0], translate[1])\n        .scale(scale);\n\n      svg\n        .transition()\n        .duration(animate || 0) // milliseconds\n        .call(zoom.transform, transform);\n    }\n\n    if (onNodeClick) {\n      svg.selectAll('g.node').on('click', (id: any) => {\n        const _node: Node = g.node(id);\n        const _original = this._getNodeData(id);\n        onNodeClick({ d3node: _node, original: _original });\n      });\n    }\n    if (onRelationshipClick) {\n      svg\n        .selectAll('g.edgeLabel, g.edgePath')\n        .on('click', (id: Relationship) => {\n          const _source = g.node(id.v);\n          const _original_source = this._getNodeData(id.v);\n\n          const _target = g.node(id.w);\n          const _original_target = this._getNodeData(id.w);\n          onRelationshipClick({\n            d3source: _source,\n            source: _original_source,\n            d3target: _target,\n            target: _original_target,\n          });\n        });\n    }\n  };\n\n  _getNodeData(id: any) {\n    const { nodes } = this.props;\n    return nodes.find((node) => node.id === id);\n  }\n\n  render() {\n    const { width, height, className } = this.props;\n    return (\n      <svg\n        width={width}\n        height={height}\n        ref={this.svg}\n        className={className || ''}\n      >\n        <g ref={this.innerG} />\n      </svg>\n    );\n  }\n}\n\nexport default DagreGraph;\n"]},"metadata":{},"sourceType":"module"}