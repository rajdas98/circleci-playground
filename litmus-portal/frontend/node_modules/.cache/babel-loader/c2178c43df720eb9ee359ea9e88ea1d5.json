{"ast":null,"code":"import _objectSpread from \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/views/WorkflowDetails/ArgoWorkflow/index.tsx\";\n\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport DagreGraph from '../../../components/DagreGraph';\nimport useActions from '../../../redux/actions';\nimport * as NodeSelectionActions from '../../../redux/actions/nodeSelection';\nimport * as TabActions from '../../../redux/actions/tabs';\nimport useStyles from './styles';\n\nvar ArgoWorkflow = function ArgoWorkflow(_ref) {\n  var nodes = _ref.nodes;\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t; // Redux action call for updating selected node\n\n\n  var nodeSelection = useActions(NodeSelectionActions);\n  var tabs = useActions(TabActions);\n\n  var _useState = useState({\n    nodes: [],\n    links: []\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      graphData = _useState2[0],\n      setGraphData = _useState2[1]; // Get the selected Node\n\n\n  var _useState3 = useState(Object.keys(nodes)[0]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selectedNodeID = _useState4[0],\n      setSelectedNodeID = _useState4[1];\n\n  useEffect(function () {\n    var data = {\n      nodes: [],\n      links: []\n    };\n\n    var _loop = function _loop() {\n      var key = _Object$keys[_i];\n      var node = nodes[key];\n      data.nodes.push({\n        id: key,\n        class: \"\".concat(node.phase, \" \").concat(node.type),\n        label: node.type !== 'StepGroup' ? node.name : '',\n        labelType: 'html'\n      });\n\n      if (node.children) {\n        node.children.map(function (child) {\n          return data.links.push({\n            source: key,\n            target: child,\n            config: {\n              arrowheadStyle: 'display: arrowhead'\n            }\n          });\n        });\n      }\n    };\n\n    for (var _i = 0, _Object$keys = Object.keys(nodes); _i < _Object$keys.length; _i++) {\n      _loop();\n    }\n\n    setGraphData({\n      nodes: _toConsumableArray(data.nodes),\n      links: _toConsumableArray(data.links)\n    });\n  }, [nodes]);\n  useEffect(function () {\n    nodeSelection.selectNode(_objectSpread(_objectSpread({}, nodes[selectedNodeID]), {}, {\n      pod_name: selectedNodeID\n    }));\n  }, [selectedNodeID]);\n  return graphData.nodes.length ? /*#__PURE__*/React.createElement(DagreGraph, {\n    className: classes.dagreGraph,\n    nodes: graphData.nodes,\n    links: graphData.links,\n    config: {\n      ranker: 'tight-tree'\n    },\n    animate: 1000,\n    shape: \"rect\",\n    fitBoundaries: true,\n    zoomable: true,\n    onNodeClick: function onNodeClick(_ref2) {\n      var original = _ref2.original;\n      var nodeID = Object.keys(nodes).filter(function (key) {\n        return key === (original === null || original === void 0 ? void 0 : original.id);\n      })[0];\n      setSelectedNodeID(nodeID);\n      tabs.changeWorkflowDetailsTabs(1);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, t('workflowDetailsView.argoWorkFlow.loading'));\n};\n\nexport default ArgoWorkflow;","map":{"version":3,"sources":["/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/views/WorkflowDetails/ArgoWorkflow/index.tsx"],"names":["React","useEffect","useState","useTranslation","DagreGraph","useActions","NodeSelectionActions","TabActions","useStyles","ArgoWorkflow","nodes","classes","t","nodeSelection","tabs","links","graphData","setGraphData","Object","keys","selectedNodeID","setSelectedNodeID","data","key","node","push","id","class","phase","type","label","name","labelType","children","map","child","source","target","config","arrowheadStyle","selectNode","pod_name","length","dagreGraph","ranker","original","nodeID","filter","changeWorkflowDetailsTabs"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport DagreGraph, { d3Link, d3Node } from '../../../components/DagreGraph';\nimport { Nodes } from '../../../models/graphql/workflowData';\nimport useActions from '../../../redux/actions';\nimport * as NodeSelectionActions from '../../../redux/actions/nodeSelection';\nimport * as TabActions from '../../../redux/actions/tabs';\nimport useStyles from './styles';\n\ninterface GraphData {\n  nodes: d3Node[];\n  links: d3Link[];\n}\ninterface ArgoWorkflowProps {\n  nodes: Nodes;\n}\n\nconst ArgoWorkflow: React.FC<ArgoWorkflowProps> = ({ nodes }) => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n\n  // Redux action call for updating selected node\n  const nodeSelection = useActions(NodeSelectionActions);\n  const tabs = useActions(TabActions);\n\n  const [graphData, setGraphData] = useState<GraphData>({\n    nodes: [],\n    links: [],\n  });\n\n  // Get the selected Node\n  const [selectedNodeID, setSelectedNodeID] = useState<string>(\n    Object.keys(nodes)[0]\n  );\n\n  useEffect(() => {\n    const data: GraphData = {\n      nodes: [],\n      links: [],\n    };\n\n    for (const key of Object.keys(nodes)) {\n      const node = nodes[key];\n\n      data.nodes.push({\n        id: key,\n        class: `${node.phase} ${node.type}`,\n        label: node.type !== 'StepGroup' ? node.name : '',\n        labelType: 'html',\n      });\n\n      if (node.children) {\n        node.children.map((child) =>\n          data.links.push({\n            source: key,\n            target: child,\n            config: {\n              arrowheadStyle: 'display: arrowhead',\n            },\n          })\n        );\n      }\n    }\n\n    setGraphData({\n      nodes: [...data.nodes],\n      links: [...data.links],\n    });\n  }, [nodes]);\n\n  useEffect(() => {\n    nodeSelection.selectNode({\n      ...nodes[selectedNodeID],\n      pod_name: selectedNodeID,\n    });\n  }, [selectedNodeID]);\n\n  return graphData.nodes.length ? (\n    <DagreGraph\n      className={classes.dagreGraph}\n      nodes={graphData.nodes}\n      links={graphData.links}\n      config={{\n        ranker: 'tight-tree',\n      }}\n      animate={1000}\n      shape=\"rect\"\n      fitBoundaries\n      zoomable\n      onNodeClick={({ original }) => {\n        const nodeID = Object.keys(nodes).filter(\n          (key) => key === original?.id\n        )[0];\n        setSelectedNodeID(nodeID);\n        tabs.changeWorkflowDetailsTabs(1);\n      }}\n    />\n  ) : (\n    <div>{t('workflowDetailsView.argoWorkFlow.loading')}</div>\n  );\n};\n\nexport default ArgoWorkflow;\n"]},"metadata":{},"sourceType":"module"}