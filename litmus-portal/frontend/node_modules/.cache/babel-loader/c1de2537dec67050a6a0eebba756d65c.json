{"ast":null,"code":"import _objectSpread from \"/home/raj/.nvm/versions/node/v12.18.2/lib/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _this = this,\n    _jsxFileName = \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/ReduxRoot.tsx\";\n\nimport { ApolloClient, ApolloProvider, HttpLink, InMemoryCache, split } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport * as React from 'react';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport config from './config';\nimport App from './containers/app/App';\nimport configureStore from './redux/configureStore';\nimport getToken from './utils/getToken';\n\nvar _configureStore = configureStore(),\n    persistor = _configureStore.persistor,\n    store = _configureStore.store;\n\nvar httpLink = new HttpLink({\n  uri: \"\".concat(config.grahqlEndpoint, \"/query\")\n});\nvar authLink = setContext(function (_, _ref) {\n  var headers = _ref.headers;\n  var token = getToken();\n  return {\n    headers: _objectSpread(_objectSpread({}, headers), {}, {\n      authorization: token\n    })\n  };\n});\nvar wsLink = new WebSocketLink({\n  uri: \"\".concat(config.grahqlEndpointSubscription, \"/query\"),\n  options: {\n    reconnect: true,\n    lazy: true\n  }\n});\nvar link = split(function (_ref2) {\n  var query = _ref2.query;\n  var definition = getMainDefinition(query);\n  return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';\n}, authLink.concat(wsLink), authLink.concat(httpLink));\nexport var client = new ApolloClient({\n  link,\n  cache: new InMemoryCache()\n});\n\nvar ReduxRoot = function ReduxRoot() {\n  return /*#__PURE__*/React.createElement(ApolloProvider, {\n    client: client,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Provider, {\n    store: store,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(PersistGate, {\n    persistor: persistor,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(App, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }))));\n};\n\n_c = ReduxRoot;\nexport default ReduxRoot;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReduxRoot\");","map":{"version":3,"sources":["/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/ReduxRoot.tsx"],"names":["ApolloClient","ApolloProvider","HttpLink","InMemoryCache","split","setContext","WebSocketLink","getMainDefinition","React","Provider","PersistGate","config","App","configureStore","getToken","persistor","store","httpLink","uri","grahqlEndpoint","authLink","_","headers","token","authorization","wsLink","grahqlEndpointSubscription","options","reconnect","lazy","link","query","definition","kind","operation","concat","client","cache","ReduxRoot"],"mappings":";;;;;AAAA,SACEA,YADF,EAEEC,cAFF,EAGEC,QAHF,EAIEC,aAJF,EAKEC,KALF,QAMO,gBANP;AAOA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,iBAAT,QAAkC,0BAAlC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,WAAT,QAA4B,iCAA5B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AACA,OAAOC,cAAP,MAA2B,wBAA3B;AACA,OAAOC,QAAP,MAAqB,kBAArB;;sBAE6BD,cAAc,E;IAAnCE,S,mBAAAA,S;IAAWC,K,mBAAAA,K;;AAEnB,IAAMC,QAAQ,GAAG,IAAIf,QAAJ,CAAa;AAC5BgB,EAAAA,GAAG,YAAKP,MAAM,CAACQ,cAAZ;AADyB,CAAb,CAAjB;AAGA,IAAMC,QAAQ,GAAGf,UAAU,CAAC,UAACgB,CAAD,QAAoB;AAAA,MAAdC,OAAc,QAAdA,OAAc;AAC9C,MAAMC,KAAK,GAAGT,QAAQ,EAAtB;AACA,SAAO;AACLQ,IAAAA,OAAO,kCACFA,OADE;AAELE,MAAAA,aAAa,EAAED;AAFV;AADF,GAAP;AAMD,CAR0B,CAA3B;AASA,IAAME,MAAM,GAAG,IAAInB,aAAJ,CAAkB;AAC/BY,EAAAA,GAAG,YAAKP,MAAM,CAACe,0BAAZ,WAD4B;AAE/BC,EAAAA,OAAO,EAAE;AACPC,IAAAA,SAAS,EAAE,IADJ;AAEPC,IAAAA,IAAI,EAAE;AAFC;AAFsB,CAAlB,CAAf;AAQA,IAAMC,IAAI,GAAG1B,KAAK,CAChB,iBAAe;AAAA,MAAZ2B,KAAY,SAAZA,KAAY;AACb,MAAMC,UAAU,GAAGzB,iBAAiB,CAACwB,KAAD,CAApC;AACA,SACEC,UAAU,CAACC,IAAX,KAAoB,qBAApB,IACAD,UAAU,CAACE,SAAX,KAAyB,cAF3B;AAID,CAPe,EAQhBd,QAAQ,CAACe,MAAT,CAAgBV,MAAhB,CARgB,EAShBL,QAAQ,CAACe,MAAT,CAAgBlB,QAAhB,CATgB,CAAlB;AAYA,OAAO,IAAMmB,MAAM,GAAG,IAAIpC,YAAJ,CAAiB;AACrC8B,EAAAA,IADqC;AAErCO,EAAAA,KAAK,EAAE,IAAIlC,aAAJ;AAF8B,CAAjB,CAAf;;AAKP,IAAMmC,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtB,sBACE,oBAAC,cAAD;AAAgB,IAAA,MAAM,EAAEF,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEpB,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAED,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CADF;AASD,CAVD;;KAAMuB,S;AAYN,eAAeA,SAAf","sourcesContent":["import {\n  ApolloClient,\n  ApolloProvider,\n  HttpLink,\n  InMemoryCache,\n  split,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport * as React from 'react';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport config from './config';\nimport App from './containers/app/App';\nimport configureStore from './redux/configureStore';\nimport getToken from './utils/getToken';\n\nconst { persistor, store } = configureStore();\n\nconst httpLink = new HttpLink({\n  uri: `${config.grahqlEndpoint}/query`,\n});\nconst authLink = setContext((_, { headers }) => {\n  const token = getToken();\n  return {\n    headers: {\n      ...headers,\n      authorization: token,\n    },\n  };\n});\nconst wsLink = new WebSocketLink({\n  uri: `${config.grahqlEndpointSubscription}/query`,\n  options: {\n    reconnect: true,\n    lazy: true,\n  },\n});\n\nconst link = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    );\n  },\n  authLink.concat(wsLink),\n  authLink.concat(httpLink)\n);\n\nexport const client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n});\n\nconst ReduxRoot = () => {\n  return (\n    <ApolloProvider client={client}>\n      <Provider store={store}>\n        <PersistGate persistor={persistor}>\n          <App />\n        </PersistGate>\n      </Provider>\n    </ApolloProvider>\n  );\n};\n\nexport default ReduxRoot;\n"]},"metadata":{},"sourceType":"module"}