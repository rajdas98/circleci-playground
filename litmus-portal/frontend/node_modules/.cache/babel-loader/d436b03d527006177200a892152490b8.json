{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/views/ChaosWorkflows/BrowseAnalytics/WorkflowRunDetailsTable/TableData.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { TableCell, Typography } from '@material-ui/core';\nimport moment from 'moment';\nimport useStyles from './styles';\nimport ExperimentStatus from '../ExperimentStatus';\nimport LinearProgressBar from '../../../../components/ProgressBar/LinearProgressBar';\nimport AnalyticsLinearProgressBar from '../../../../components/ProgressBar/AnalyticsLinearProgressBar/index';\n\nvar TableData = function TableData(_ref) {\n  _s();\n\n  var _data$test_weight, _data$resulting_point;\n\n  var data = _ref.data;\n  var classes = useStyles(); // Function to convert UNIX time in format of DD MMM YYY\n\n  var formatDate = function formatDate(date) {\n    var updated = new Date(parseInt(date, 10) * 1000).toString();\n    var resDate = moment(updated).format('DD MMM  HH:mm');\n    return resDate;\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TableCell, {\n    className: classes.testName,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }\n  }, data.test_name))), /*#__PURE__*/React.createElement(TableCell, {\n    className: classes.tableDataStatus,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ExperimentStatus, {\n    status: data.test_result !== 'Awaited' && data.test_result !== 'N/A' ? \"\".concat(data.test_result, \"ed\") : data.test_result,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(TableCell, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.reliabiltyData,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.reliabilityDataTypography,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }, data.test_weight, \" Points\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.progressBar,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(AnalyticsLinearProgressBar, {\n    value: (_data$test_weight = data.test_weight) !== null && _data$test_weight !== void 0 ? _data$test_weight : 0,\n    maxValue: 10,\n    isInTable: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(TableCell, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.reliabiltyData,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, data.resulting_points, \" Points\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.progressBar,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(LinearProgressBar, {\n    width: 2,\n    value: (_data$resulting_point = data.resulting_points) !== null && _data$resulting_point !== void 0 ? _data$resulting_point : 0,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(TableCell, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body2\",\n    className: classes.tableObjects,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, formatDate(data.last_run))), /*#__PURE__*/React.createElement(TableCell, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(TableData, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = TableData;\nexport default TableData;\n\nvar _c;\n\n$RefreshReg$(_c, \"TableData\");","map":{"version":3,"sources":["/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/views/ChaosWorkflows/BrowseAnalytics/WorkflowRunDetailsTable/TableData.tsx"],"names":["React","TableCell","Typography","moment","useStyles","ExperimentStatus","LinearProgressBar","AnalyticsLinearProgressBar","TableData","data","classes","formatDate","date","updated","Date","parseInt","toString","resDate","format","testName","test_name","tableDataStatus","test_result","reliabiltyData","reliabilityDataTypography","test_weight","progressBar","resulting_points","tableObjects","last_run"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { TableCell, Typography } from '@material-ui/core';\nimport moment from 'moment';\nimport useStyles from './styles';\nimport ExperimentStatus from '../ExperimentStatus';\nimport LinearProgressBar from '../../../../components/ProgressBar/LinearProgressBar';\nimport AnalyticsLinearProgressBar from '../../../../components/ProgressBar/AnalyticsLinearProgressBar/index';\n\ninterface workFlowTests {\n  test_id: number;\n  test_name: string;\n  test_result: string;\n  test_weight: number;\n  resulting_points: number;\n  last_run: string;\n}\n\ninterface TableDataProps {\n  data: workFlowTests;\n}\n\nconst TableData: React.FC<TableDataProps> = ({ data }) => {\n  const classes = useStyles();\n\n  // Function to convert UNIX time in format of DD MMM YYY\n  const formatDate = (date: string) => {\n    const updated = new Date(parseInt(date, 10) * 1000).toString();\n    const resDate = moment(updated).format('DD MMM  HH:mm');\n    return resDate;\n  };\n\n  return (\n    <>\n      <TableCell className={classes.testName}>\n        <Typography variant=\"body2\">\n          <strong>{data.test_name}</strong>\n        </Typography>\n      </TableCell>\n\n      <TableCell className={classes.tableDataStatus}>\n        <ExperimentStatus\n          status={\n            data.test_result !== 'Awaited' && data.test_result !== 'N/A'\n              ? `${data.test_result}ed`\n              : data.test_result\n          }\n        />\n      </TableCell>\n\n      <TableCell>\n        <div className={classes.reliabiltyData}>\n          <Typography className={classes.reliabilityDataTypography}>\n            {data.test_weight} Points\n          </Typography>\n          <div className={classes.progressBar}>\n            <AnalyticsLinearProgressBar\n              value={data.test_weight ?? 0}\n              maxValue={10}\n              isInTable\n            />\n          </div>\n        </div>\n      </TableCell>\n\n      <TableCell>\n        <div className={classes.reliabiltyData}>\n          <Typography>{data.resulting_points} Points</Typography>\n          <div className={classes.progressBar}>\n            <LinearProgressBar width={2} value={data.resulting_points ?? 0} />\n          </div>\n        </div>\n      </TableCell>\n\n      <TableCell>\n        <Typography variant=\"body2\" className={classes.tableObjects}>\n          {formatDate(data.last_run)}\n        </Typography>\n      </TableCell>\n\n      <TableCell />\n    </>\n  );\n};\nexport default TableData;\n"]},"metadata":{},"sourceType":"module"}