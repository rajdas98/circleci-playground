{"ast":null,"code":"import _slicedToArray from \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/views/CreateWorkflow/WorkflowCluster/index.tsx\";\n\nimport { useLazyQuery } from '@apollo/client';\nimport { FormControl, Snackbar, Typography, MenuItem, Select, InputLabel, Input } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport ButtonFilled from '../../../components/Button/ButtonFilled';\nimport { GET_CLUSTER } from '../../../graphql';\nimport useActions from '../../../redux/actions';\nimport * as WorkflowActions from '../../../redux/actions/workflow';\nimport useStyles from './styles';\nvar ITEM_HEIGHT = 48;\nvar ITEM_PADDING_TOP = 4;\nvar MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP\n    }\n  }\n};\n\nvar WorkflowCluster = function WorkflowCluster(_ref) {\n  var gotoStep = _ref.gotoStep;\n  var classes = useStyles();\n  var workflow = useActions(WorkflowActions);\n\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isTragetSelected = _React$useState2[0],\n      setTarget = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isOpenSnackBar = _React$useState4[0],\n      setOpenSnackBar = _React$useState4[1];\n\n  var selectedProjectID = useSelector(function (state) {\n    return state.userData.selectedProjectID;\n  });\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      clusterData = _useState2[0],\n      setclusterData = _useState2[1];\n\n  var _React$useState5 = React.useState(''),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      name = _React$useState6[0],\n      setName = _React$useState6[1];\n\n  var handleChange = function handleChange(event) {\n    var str = event.target.value;\n    var clusterName;\n    clusterData.forEach(function (cluster) {\n      if (str === cluster.cluster_id) {\n        clusterName = cluster.cluster_name;\n      }\n    });\n    workflow.setWorkflowDetails({\n      clusterid: str,\n      project_id: selectedProjectID,\n      clustername: clusterName\n    });\n    setName(str);\n    setTarget(false);\n  };\n\n  var _useLazyQuery = useLazyQuery(GET_CLUSTER, {\n    onCompleted: function onCompleted(data) {\n      var clusters = [];\n\n      if (data && data.getCluster.length !== 0) {\n        data.getCluster.forEach(function (e) {\n          if (e.is_active === true) {\n            clusters.push({\n              cluster_name: e.cluster_name,\n              is_active: e.is_active,\n              cluster_id: e.cluster_id\n            });\n            workflow.setWorkflowDetails({\n              cronSyntax: '',\n              scheduleType: {\n                scheduleOnce: 'now',\n                recurringSchedule: ''\n              },\n              scheduleInput: {\n                hour_interval: 0,\n                day: 1,\n                weekday: 'Monday',\n                time: new Date(),\n                date: new Date()\n              }\n            });\n          }\n        });\n        setclusterData(clusters);\n      } else {\n        setOpenSnackBar(true);\n      }\n    },\n    fetchPolicy: 'cache-and-network'\n  }),\n      _useLazyQuery2 = _slicedToArray(_useLazyQuery, 1),\n      getCluster = _useLazyQuery2[0];\n\n  useEffect(function () {\n    getCluster({\n      variables: {\n        project_id: selectedProjectID\n      }\n    });\n  }, []);\n\n  var _handleClick = function handleClick() {\n    gotoStep(1);\n  };\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.rootcontainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"icons/check.png\",\n    className: classes.check,\n    alt: \"Check\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.heading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }, \" \", t('workflowCluster.header.chooseAgent'))), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.headchaos,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, t('workflowCluster.header.creatingNew'), /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }, \" \", t('workflowCluster.header.creatingNewBold'), \" \")), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.headcluster,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }, t('workflowCluster.header.selectAgent')), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.radiobutton,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    variant: \"outlined\",\n    className: classes.formControl,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    className: classes.selectText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }, t('createWorkflow.workflowCluster.activeCluster')), /*#__PURE__*/React.createElement(Select, {\n    labelId: \"Active Cluster\",\n    value: name,\n    onChange: handleChange,\n    label: \"Active Cluster\",\n    input: /*#__PURE__*/React.createElement(Input, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 22\n      }\n    }),\n    MenuProps: MenuProps,\n    className: classes.selectText,\n    color: \"secondary\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"\",\n    disabled: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"em\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }\n  }, \" \", t('createWorkflow.workflowCluster.none'))), clusterData.map(function (name) {\n    return /*#__PURE__*/React.createElement(MenuItem, {\n      key: name.cluster_id,\n      value: name.cluster_id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }\n    }, name.cluster_name);\n  }))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.buttonDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.button,\n    \"data-cy\": \"Internal\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ButtonFilled, {\n    \"data-cy\": \"gotItButton\",\n    isPrimary: true,\n    isDisabled: isTragetSelected,\n    handleClick: function handleClick() {\n      return _handleClick();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }\n  }, t('workflowCluster.header.select'))))), /*#__PURE__*/React.createElement(Snackbar, {\n    open: isOpenSnackBar,\n    action: /*#__PURE__*/React.createElement(Typography, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 13\n      }\n    }, t('workflowCluster.header.snackbar'))),\n    autoHideDuration: 6000,\n    onClose: function onClose() {\n      return setOpenSnackBar(false);\n    },\n    anchorOrigin: {\n      vertical: 'bottom',\n      horizontal: 'center'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default WorkflowCluster;","map":{"version":3,"sources":["/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/views/CreateWorkflow/WorkflowCluster/index.tsx"],"names":["useLazyQuery","FormControl","Snackbar","Typography","MenuItem","Select","InputLabel","Input","React","useEffect","useState","useSelector","useTranslation","ButtonFilled","GET_CLUSTER","useActions","WorkflowActions","useStyles","ITEM_HEIGHT","ITEM_PADDING_TOP","MenuProps","PaperProps","style","maxHeight","WorkflowCluster","gotoStep","classes","workflow","isTragetSelected","setTarget","isOpenSnackBar","setOpenSnackBar","selectedProjectID","state","userData","clusterData","setclusterData","name","setName","handleChange","event","str","target","value","clusterName","forEach","cluster","cluster_id","cluster_name","setWorkflowDetails","clusterid","project_id","clustername","onCompleted","data","clusters","getCluster","length","e","is_active","push","cronSyntax","scheduleType","scheduleOnce","recurringSchedule","scheduleInput","hour_interval","day","weekday","time","Date","date","fetchPolicy","variables","handleClick","t","rootcontainer","check","heading","headchaos","headcluster","radiobutton","formControl","selectText","map","buttonDiv","button","vertical","horizontal"],"mappings":"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","sourcesContent":["import { useLazyQuery } from '@apollo/client';\nimport {\n  FormControl,\n  Snackbar,\n  Typography,\n  MenuItem,\n  Select,\n  InputLabel,\n  Input,\n} from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport ButtonFilled from '../../../components/Button/ButtonFilled';\nimport { GET_CLUSTER } from '../../../graphql';\nimport useActions from '../../../redux/actions';\nimport * as WorkflowActions from '../../../redux/actions/workflow';\nimport { RootState } from '../../../redux/reducers';\nimport useStyles from './styles';\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 4;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n    },\n  },\n};\n\ninterface Cluster {\n  cluster_name: string;\n  is_active: boolean;\n  cluster_id: string;\n}\n\ninterface WorkflowClusterProps {\n  gotoStep: (page: number) => void;\n}\n\nconst WorkflowCluster: React.FC<WorkflowClusterProps> = ({ gotoStep }) => {\n  const classes = useStyles();\n  const workflow = useActions(WorkflowActions);\n  const [isTragetSelected, setTarget] = React.useState(true);\n  const [isOpenSnackBar, setOpenSnackBar] = React.useState(false);\n  const selectedProjectID = useSelector(\n    (state: RootState) => state.userData.selectedProjectID\n  );\n  const [clusterData, setclusterData] = useState<Cluster[]>([]);\n  const [name, setName] = React.useState('');\n  const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    const str: string = event.target.value as string;\n    let clusterName;\n    clusterData.forEach((cluster) => {\n      if (str === cluster.cluster_id) {\n        clusterName = cluster.cluster_name;\n      }\n    });\n    workflow.setWorkflowDetails({\n      clusterid: str,\n      project_id: selectedProjectID,\n      clustername: clusterName,\n    });\n    setName(str);\n    setTarget(false);\n  };\n\n  const [getCluster] = useLazyQuery(GET_CLUSTER, {\n    onCompleted: (data) => {\n      const clusters: Cluster[] = [];\n      if (data && data.getCluster.length !== 0) {\n        data.getCluster.forEach((e: Cluster) => {\n          if (e.is_active === true) {\n            clusters.push({\n              cluster_name: e.cluster_name,\n              is_active: e.is_active,\n              cluster_id: e.cluster_id,\n            });\n            workflow.setWorkflowDetails({\n              cronSyntax: '',\n              scheduleType: {\n                scheduleOnce: 'now',\n                recurringSchedule: '',\n              },\n              scheduleInput: {\n                hour_interval: 0,\n                day: 1,\n                weekday: 'Monday',\n                time: new Date(),\n                date: new Date(),\n              },\n            });\n          }\n        });\n        setclusterData(clusters);\n      } else {\n        setOpenSnackBar(true);\n      }\n    },\n    fetchPolicy: 'cache-and-network',\n  });\n\n  useEffect(() => {\n    getCluster({ variables: { project_id: selectedProjectID } });\n  }, []);\n\n  const handleClick = () => {\n    gotoStep(1);\n  };\n  const { t } = useTranslation();\n\n  return (\n    <div className={classes.rootcontainer}>\n      {/* Arrow mark */}\n      <div>\n        <img src=\"icons/check.png\" className={classes.check} alt=\"Check\" />\n      </div>\n      <div>\n        <Typography className={classes.heading}>\n          <strong> {t('workflowCluster.header.chooseAgent')}</strong>\n        </Typography>\n        <Typography className={classes.headchaos}>\n          {t('workflowCluster.header.creatingNew')}\n          <strong> {t('workflowCluster.header.creatingNewBold')} </strong>\n        </Typography>\n        <Typography className={classes.headcluster}>\n          {t('workflowCluster.header.selectAgent')}\n        </Typography>\n\n        <div className={classes.radiobutton}>\n          <FormControl variant=\"outlined\" className={classes.formControl}>\n            <InputLabel className={classes.selectText}>\n              {t('createWorkflow.workflowCluster.activeCluster')}\n            </InputLabel>\n            <Select\n              labelId=\"Active Cluster\"\n              value={name}\n              onChange={handleChange}\n              label=\"Active Cluster\"\n              input={<Input />}\n              MenuProps={MenuProps}\n              className={classes.selectText}\n              color=\"secondary\"\n            >\n              <MenuItem value=\"\" disabled>\n                <em> {t('createWorkflow.workflowCluster.none')}</em>\n              </MenuItem>\n              {clusterData.map((name: Cluster) => (\n                <MenuItem key={name.cluster_id} value={name.cluster_id}>\n                  {name.cluster_name}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n      </div>\n\n      {/* \n        Division is used for Ignite-cluster(where this Litmus portal\n        is install and running) or alternative Install Litmus Agent to \n        other Kubernetes cluster \n      */}\n      <div className={classes.buttonDiv}>\n        <div className={classes.button} data-cy=\"Internal\">\n          <ButtonFilled\n            data-cy=\"gotItButton\"\n            isPrimary\n            isDisabled={isTragetSelected}\n            handleClick={() => handleClick()}\n          >\n            <div>{t('workflowCluster.header.select')}</div>\n          </ButtonFilled>\n        </div>\n      </div>\n      <Snackbar\n        open={isOpenSnackBar}\n        action={\n          <Typography>\n            <strong>{t('workflowCluster.header.snackbar')}</strong>\n          </Typography>\n        }\n        autoHideDuration={6000}\n        onClose={() => setOpenSnackBar(false)}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'center',\n        }}\n      />\n    </div>\n  );\n};\n\nexport default WorkflowCluster;\n"]},"metadata":{},"sourceType":"module"}