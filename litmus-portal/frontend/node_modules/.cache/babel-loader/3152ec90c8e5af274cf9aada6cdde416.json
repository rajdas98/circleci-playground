{"ast":null,"code":"import _slicedToArray from \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/views/Home/ReturningHome/index.tsx\";\n\n/* eslint-disable no-unused-expressions */\n\n/* eslint-disable no-loop-func */\n\n/* eslint-disable max-len */\n\n/* eslint-disable no-console */\nimport { useQuery } from '@apollo/client';\nimport { Paper, Typography } from '@material-ui/core';\nimport * as _ from 'lodash';\nimport moment from 'moment';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport Loader from '../../../components/Loader';\nimport QuickActionCard from '../../../components/QuickActionCard';\nimport { WORKFLOW_LIST_DETAILS } from '../../../graphql';\nimport AverageResilienceScore from '../AverageResilienceScore';\nimport PassedVsFailed from '../PassedVsFailed';\nimport RecentActivity from '../RecentActivity';\nimport ResilienceScoreComparisonPlot from '../ResilienceScoreComparisonPlot';\nimport TotalWorkflows from '../TotalWorkflows';\nimport useStyles from './style';\n\nvar ReturningHome = function ReturningHome(_ref) {\n  var callbackToSetDataPresent = _ref.callbackToSetDataPresent,\n      currentStatus = _ref.currentStatus;\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var userData = useSelector(function (state) {\n    return state.userData;\n  });\n\n  var _useState = useState(currentStatus),\n      _useState2 = _slicedToArray(_useState, 2),\n      workflowDataPresent = _useState2[0],\n      setWorkflowDataPresent = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isChecking = _useState4[0],\n      setIsChecking = _useState4[1];\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      plotDataForComparison = _React$useState2[0],\n      setPlotDataForComparison = _React$useState2[1];\n\n  var _React$useState3 = React.useState(0),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      totalValidWorkflowRunsCount = _React$useState4[0],\n      setTotalValidWorkflowRunsCount = _React$useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      messageActive = _useState6[0],\n      setMessageActive = _useState6[1];\n\n  var _useState7 = useState({\n    avgWorkflows: 0,\n    maxWorkflows: 0,\n    passPercentage: 0,\n    failPercentage: 0,\n    avgResilienceScore: 0\n  }),\n      _useState8 = _slicedToArray(_useState7, 2),\n      analyticsData = _useState8[0],\n      setAnalyticsData = _useState8[1]; // Apollo query to get the scheduled workflow data\n\n\n  var _useQuery = useQuery(WORKFLOW_LIST_DETAILS, {\n    variables: {\n      projectID: userData.selectedProjectID,\n      workflowIDs: []\n    }\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  var loadWorkflowAnalyticssData = function loadWorkflowAnalyticssData() {\n    var plotData = {\n      xData: {\n        Hourly: [[]],\n        Daily: [[]],\n        Monthly: [[]]\n      },\n      yData: {\n        Hourly: [[]],\n        Daily: [[]],\n        Monthly: [[]]\n      },\n      labels: []\n    };\n    var totalValidRuns = 0;\n    var timeSeriesArray = [];\n    var timeSeriesArrayForAveragePerWeek = [];\n    var totalValidWorkflowRuns = {\n      tests_passed: 0,\n      tests_failed: 0,\n      resilience_score: 0\n    };\n    var workflowRunsPerWeek = [];\n    data === null || data === void 0 ? void 0 : data.ListWorkflow.forEach(function (workflowData) {\n      var runs = workflowData ? workflowData.workflow_runs : [];\n      var workflowTimeSeriesData = [];\n      var isWorkflowValid = false;\n\n      if ((data === null || data === void 0 ? void 0 : data.ListWorkflow.length) === 1 && runs === null) {\n        setWorkflowDataPresent(false);\n      }\n\n      try {\n        runs.forEach(function (data) {\n          try {\n            (function () {\n              var executionData = JSON.parse(data.execution_data);\n              var nodes = executionData.nodes;\n              var experimentTestResultsArrayPerWorkflowRun = [];\n              var totalExperimentsPassed = 0;\n              var weightsSum = 0;\n              var isValid = false;\n\n              for (var _i = 0, _Object$keys = Object.keys(nodes); _i < _Object$keys.length; _i++) {\n                var key = _Object$keys[_i];\n                var node = nodes[key];\n\n                if (node.chaosData) {\n                  (function () {\n                    var chaosData = node.chaosData;\n\n                    if (chaosData.experimentVerdict === 'Pass' || chaosData.experimentVerdict === 'Fail') {\n                      var weightageMap = workflowData ? workflowData.weightages : [];\n                      weightageMap.forEach(function (weightage) {\n                        if (weightage.experiment_name === chaosData.experimentName) {\n                          if (chaosData.experimentVerdict === 'Pass') {\n                            experimentTestResultsArrayPerWorkflowRun.push(weightage.weightage);\n                            totalExperimentsPassed += 1;\n                          }\n\n                          if (chaosData.experimentVerdict === 'Fail') {\n                            experimentTestResultsArrayPerWorkflowRun.push(0);\n                          }\n\n                          if (chaosData.experimentVerdict === 'Pass' || chaosData.experimentVerdict === 'Fail') {\n                            weightsSum += weightage.weightage;\n                            isValid = true;\n                            isWorkflowValid = true;\n                          }\n                        }\n                      });\n                    }\n                  })();\n                }\n              }\n\n              if (executionData.event_type === 'UPDATE' && isValid) {\n                totalValidRuns += 1;\n                totalValidWorkflowRuns.tests_passed += totalExperimentsPassed;\n                totalValidWorkflowRuns.tests_failed += experimentTestResultsArrayPerWorkflowRun.length - totalExperimentsPassed;\n                totalValidWorkflowRuns.resilience_score += experimentTestResultsArrayPerWorkflowRun.length ? experimentTestResultsArrayPerWorkflowRun.reduce(function (a, b) {\n                  return a + b;\n                }, 0) / weightsSum * 100 : 0;\n                workflowTimeSeriesData.push({\n                  date: data.last_updated,\n                  value: experimentTestResultsArrayPerWorkflowRun.length ? experimentTestResultsArrayPerWorkflowRun.reduce(function (a, b) {\n                    return a + b;\n                  }, 0) / weightsSum * 100 : 0\n                });\n                timeSeriesArrayForAveragePerWeek.push({\n                  date: data.last_updated,\n                  value: experimentTestResultsArrayPerWorkflowRun.length ? experimentTestResultsArrayPerWorkflowRun.reduce(function (a, b) {\n                    return a + b;\n                  }, 0) / weightsSum * 100 : 0\n                });\n              }\n            })();\n          } catch (error) {\n            console.error(error);\n          }\n        });\n      } catch (error) {\n        console.log(error);\n      }\n\n      if (isWorkflowValid) {\n        plotData.labels.push(workflowData ? workflowData.workflow_name : '');\n        timeSeriesArray.push(workflowTimeSeriesData);\n      }\n    });\n\n    if (totalValidRuns === 0) {\n      setWorkflowDataPresent(false);\n    }\n\n    timeSeriesArray.reverse().forEach(function (workflowTimeSeriesData, index) {\n      var hourlyGroupedResults = _.groupBy(workflowTimeSeriesData, function (data) {\n        return moment.unix(parseInt(data.date, 10)).startOf('hour').format('YYYY-MM-DD HH:mm:ss');\n      });\n\n      var dailyGroupedResults = _.groupBy(workflowTimeSeriesData, function (data) {\n        return moment.unix(parseInt(data.date, 10)).startOf('day').format('YYYY-MM-DD');\n      });\n\n      var monthlyGroupedResults = _.groupBy(workflowTimeSeriesData, function (data) {\n        return moment.unix(parseInt(data.date, 10)).startOf('month').format('YYYY-MM');\n      });\n\n      if (index < 4) {\n        plotData.xData.Hourly[index] = [];\n        plotData.yData.Hourly[index] = [];\n        Object.keys(hourlyGroupedResults).forEach(function (hour) {\n          var total = 0;\n          hourlyGroupedResults[hour].forEach(function (data) {\n            total += data.value;\n          });\n          plotData.xData.Hourly[index].push(hour);\n          plotData.yData.Hourly[index].push(total / hourlyGroupedResults[hour].length);\n        });\n        plotData.xData.Daily[index] = [];\n        plotData.yData.Daily[index] = [];\n        Object.keys(dailyGroupedResults).forEach(function (day) {\n          var total = 0;\n          dailyGroupedResults[day].forEach(function (data) {\n            total += data.value;\n          });\n          plotData.xData.Daily[index].push(day);\n          plotData.yData.Daily[index].push(total / dailyGroupedResults[day].length);\n        });\n        plotData.xData.Monthly[index] = [];\n        plotData.yData.Monthly[index] = [];\n        Object.keys(monthlyGroupedResults).forEach(function (month) {\n          var total = 0;\n          monthlyGroupedResults[month].forEach(function (data) {\n            total += data.value;\n          });\n          plotData.xData.Monthly[index].push(month);\n          plotData.yData.Monthly[index].push(total / monthlyGroupedResults[month].length);\n        });\n      }\n    });\n    setPlotDataForComparison(plotData);\n    setTotalValidWorkflowRunsCount(totalValidRuns);\n    var testsPassedPercentage = totalValidWorkflowRuns.tests_passed / (totalValidWorkflowRuns.tests_passed + totalValidWorkflowRuns.tests_failed) * 100;\n\n    var weeklyGroupedResults = _.groupBy(timeSeriesArrayForAveragePerWeek, function (data) {\n      return moment.unix(parseInt(data.date, 10)).startOf('isoWeek');\n    });\n\n    Object.keys(weeklyGroupedResults).forEach(function (week) {\n      workflowRunsPerWeek.push(weeklyGroupedResults[week].length);\n    });\n    setAnalyticsData({\n      avgWorkflows: workflowRunsPerWeek.reduce(function (a, b) {\n        return a + b;\n      }, 0) / workflowRunsPerWeek.length,\n      maxWorkflows: Math.max.apply(Math, workflowRunsPerWeek),\n      passPercentage: totalValidRuns > 0 && testsPassedPercentage >= 0 ? testsPassedPercentage : 0,\n      failPercentage: totalValidRuns > 0 && testsPassedPercentage >= 0 ? 100 - testsPassedPercentage : 0,\n      avgResilienceScore: totalValidWorkflowRuns.resilience_score / totalValidRuns\n    });\n  };\n\n  useEffect(function () {\n    if (!loading && !error && data && data.ListWorkflow.slice(0).length >= 1) {\n      setWorkflowDataPresent(true);\n      loadWorkflowAnalyticssData();\n    } else if (loading === false) {\n      setWorkflowDataPresent(false);\n    }\n\n    setTimeout(function () {\n      setIsChecking(false);\n    }, 500);\n  }, [data]);\n  useEffect(function () {\n    callbackToSetDataPresent(workflowDataPresent);\n  }, [workflowDataPresent]);\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      activities = _useState10[0],\n      setActivities = _useState10[1];\n\n  var fetchRandomActivities = useCallback(function () {\n    var activitiesList = [];\n    var notificationsList = [{\n      id: '1',\n      MessageType: 'New cluster',\n      Message: 'connected',\n      generatedTime: ''\n    }, {\n      id: '2',\n      MessageType: 'Argo Chaos workflow',\n      Message: 'crashed',\n      generatedTime: ''\n    }, {\n      id: '3',\n      MessageType: 'New workflow',\n      Message: 'created',\n      generatedTime: ''\n    }, {\n      id: '4',\n      MessageType: 'Pod Delete workflow',\n      Message: 'complete',\n      generatedTime: ''\n    }, {\n      id: '5',\n      MessageType: 'Argo Chaos workflow',\n      Message: 'started',\n      generatedTime: ''\n    }, {\n      id: '6',\n      MessageType: 'New project',\n      Message: 'Invite Recieved',\n      generatedTime: ''\n    }];\n    var iterations = notificationsList.length;\n    var oneDaySeconds = 60 * 60 * 24;\n    var curUnix = Math.round(new Date().getTime() / 1000 - iterations * oneDaySeconds);\n\n    for (var i = 0; i < iterations; i += 1) {\n      var notificationItem = notificationsList[i];\n      var message = {\n        sequenceID: i,\n        id: notificationItem.id,\n        messageType: notificationItem.MessageType,\n        date: curUnix,\n        text: \"\".concat(notificationItem.MessageType, \"- \").concat(notificationItem.Message)\n      };\n      curUnix += oneDaySeconds;\n      activitiesList.push(message);\n    }\n\n    activitiesList.reverse();\n    setActivities(activitiesList);\n  }, [setActivities]);\n  useEffect(function () {\n    fetchRandomActivities();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 5\n    }\n  }, ' ', isChecking ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.loader,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Loader, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 11\n    }\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 9\n    }\n  }, workflowDataPresent ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.cardsDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TotalWorkflows, {\n    workflow: totalValidWorkflowRunsCount,\n    average: parseFloat(analyticsData.avgWorkflows.toFixed(0)),\n    max: analyticsData.maxWorkflows,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(PassedVsFailed, {\n    passed: parseFloat(analyticsData.passPercentage.toFixed(2)),\n    failed: parseFloat(analyticsData.failPercentage.toFixed(2)),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(AverageResilienceScore, {\n    value: parseFloat(analyticsData.avgResilienceScore.toFixed(2)),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.othersDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.resilienceScoresDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.statsHeading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 21\n    }\n  }, t('home.resilienceScore'))), /*#__PURE__*/React.createElement(Paper, {\n    variant: \"outlined\",\n    className: classes.backgroundFix,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 19\n    }\n  }, plotDataForComparison ? /*#__PURE__*/React.createElement(ResilienceScoreComparisonPlot, {\n    xData: plotDataForComparison.xData,\n    yData: plotDataForComparison.yData,\n    labels: plotDataForComparison.labels,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 23\n    }\n  }) : /*#__PURE__*/React.createElement(Loader, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 23\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.extrasDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 447,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.btnHeaderDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.statsHeading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 25\n    }\n  }, t('home.recentActivity')))), /*#__PURE__*/React.createElement(Paper, {\n    variant: \"outlined\",\n    className: classes.fixedRecents,\n    onMouseEnter: function onMouseEnter() {\n      setMessageActive(true);\n    },\n    onMouseLeave: function onMouseLeave() {\n      setMessageActive(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 21\n    }\n  }, messageActive ? /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h4\",\n    className: classes.comingSoon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 475,\n      columnNumber: 25\n    }\n  }, t('home.comingSoon')) : /*#__PURE__*/React.createElement(RecentActivity, {\n    activities: activities,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 479,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.quickActionDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 483,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(QuickActionCard, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 484,\n      columnNumber: 21\n    }\n  }))))) : /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.loader,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Loader, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 15\n    }\n  }))));\n};\n\nexport default ReturningHome;","map":{"version":3,"sources":["/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/views/Home/ReturningHome/index.tsx"],"names":["useQuery","Paper","Typography","_","moment","React","useCallback","useEffect","useState","useTranslation","useSelector","Loader","QuickActionCard","WORKFLOW_LIST_DETAILS","AverageResilienceScore","PassedVsFailed","RecentActivity","ResilienceScoreComparisonPlot","TotalWorkflows","useStyles","ReturningHome","callbackToSetDataPresent","currentStatus","classes","t","userData","state","workflowDataPresent","setWorkflowDataPresent","isChecking","setIsChecking","plotDataForComparison","setPlotDataForComparison","totalValidWorkflowRunsCount","setTotalValidWorkflowRunsCount","messageActive","setMessageActive","avgWorkflows","maxWorkflows","passPercentage","failPercentage","avgResilienceScore","analyticsData","setAnalyticsData","variables","projectID","selectedProjectID","workflowIDs","data","loading","error","loadWorkflowAnalyticssData","plotData","xData","Hourly","Daily","Monthly","yData","labels","totalValidRuns","timeSeriesArray","timeSeriesArrayForAveragePerWeek","totalValidWorkflowRuns","tests_passed","tests_failed","resilience_score","workflowRunsPerWeek","ListWorkflow","forEach","workflowData","runs","workflow_runs","workflowTimeSeriesData","isWorkflowValid","length","executionData","JSON","parse","execution_data","nodes","experimentTestResultsArrayPerWorkflowRun","totalExperimentsPassed","weightsSum","isValid","Object","keys","key","node","chaosData","experimentVerdict","weightageMap","weightages","weightage","experiment_name","experimentName","push","event_type","reduce","a","b","date","last_updated","value","console","log","workflow_name","reverse","index","hourlyGroupedResults","groupBy","unix","parseInt","startOf","format","dailyGroupedResults","monthlyGroupedResults","hour","total","day","month","testsPassedPercentage","weeklyGroupedResults","week","Math","max","slice","setTimeout","activities","setActivities","fetchRandomActivities","activitiesList","notificationsList","id","MessageType","Message","generatedTime","iterations","oneDaySeconds","curUnix","round","Date","getTime","i","notificationItem","message","sequenceID","messageType","text","loader","cardsDiv","parseFloat","toFixed","othersDiv","resilienceScoresDiv","statsHeading","backgroundFix","extrasDiv","btnHeaderDiv","fixedRecents","comingSoon","quickActionDiv"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-expressions */\n/* eslint-disable no-loop-func */\n/* eslint-disable max-len */\n/* eslint-disable no-console */\nimport { useQuery } from '@apollo/client';\nimport { Paper, Typography } from '@material-ui/core';\nimport * as _ from 'lodash';\nimport moment from 'moment';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport Loader from '../../../components/Loader';\nimport QuickActionCard from '../../../components/QuickActionCard';\nimport { WORKFLOW_LIST_DETAILS } from '../../../graphql';\nimport { ExecutionData } from '../../../models/graphql/workflowData';\nimport {\n  WeightageMap,\n  WorkflowList,\n  WorkflowListDataVars,\n} from '../../../models/graphql/workflowListData';\nimport { Message } from '../../../models/header';\nimport { RootState } from '../../../redux/reducers';\nimport AverageResilienceScore from '../AverageResilienceScore';\nimport PassedVsFailed from '../PassedVsFailed';\nimport RecentActivity from '../RecentActivity';\nimport ResilienceScoreComparisonPlot from '../ResilienceScoreComparisonPlot';\nimport TotalWorkflows from '../TotalWorkflows';\nimport useStyles from './style';\n\ninterface DataPresentCallBackType {\n  (dataPresent: boolean): void;\n}\n\ninterface Analyticsdata {\n  avgWorkflows: number;\n  maxWorkflows: number;\n  passPercentage: number;\n  failPercentage: number;\n  avgResilienceScore: number;\n}\n\ninterface WorkflowRunData {\n  tests_passed: number;\n  tests_failed: number;\n  resilience_score: number;\n}\n\ninterface ResilienceScoreComparisonPlotProps {\n  xData: { Hourly: string[][]; Daily: string[][]; Monthly: string[][] };\n  yData: { Hourly: number[][]; Daily: number[][]; Monthly: number[][] };\n  labels: string[];\n}\n\ninterface DatedResilienceScore {\n  date: string;\n  value: number;\n}\n\ninterface ReturningHomeProps {\n  callbackToSetDataPresent: DataPresentCallBackType;\n  currentStatus: boolean;\n}\n\nconst ReturningHome: React.FC<ReturningHomeProps> = ({\n  callbackToSetDataPresent,\n  currentStatus,\n}) => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n  const userData = useSelector((state: RootState) => state.userData);\n  const [workflowDataPresent, setWorkflowDataPresent] = useState<boolean>(\n    currentStatus\n  );\n  const [isChecking, setIsChecking] = useState<boolean>(true);\n  const [plotDataForComparison, setPlotDataForComparison] = React.useState<\n    ResilienceScoreComparisonPlotProps\n  >();\n  const [\n    totalValidWorkflowRunsCount,\n    setTotalValidWorkflowRunsCount,\n  ] = React.useState<number>(0);\n  const [messageActive, setMessageActive] = useState<boolean>(false);\n  const [analyticsData, setAnalyticsData] = useState<Analyticsdata>({\n    avgWorkflows: 0,\n    maxWorkflows: 0,\n    passPercentage: 0,\n    failPercentage: 0,\n    avgResilienceScore: 0,\n  });\n\n  // Apollo query to get the scheduled workflow data\n  const { data, loading, error } = useQuery<WorkflowList, WorkflowListDataVars>(\n    WORKFLOW_LIST_DETAILS,\n    {\n      variables: { projectID: userData.selectedProjectID, workflowIDs: [] },\n    }\n  );\n\n  const loadWorkflowAnalyticssData = () => {\n    const plotData: ResilienceScoreComparisonPlotProps = {\n      xData: {\n        Hourly: [[]],\n        Daily: [[]],\n        Monthly: [[]],\n      },\n      yData: {\n        Hourly: [[]],\n        Daily: [[]],\n        Monthly: [[]],\n      },\n      labels: [],\n    };\n    let totalValidRuns: number = 0;\n    const timeSeriesArray: DatedResilienceScore[][] = [];\n    const timeSeriesArrayForAveragePerWeek: DatedResilienceScore[] = [];\n    const totalValidWorkflowRuns: WorkflowRunData = {\n      tests_passed: 0,\n      tests_failed: 0,\n      resilience_score: 0,\n    };\n    const workflowRunsPerWeek: number[] = [];\n    data?.ListWorkflow.forEach((workflowData) => {\n      const runs = workflowData ? workflowData.workflow_runs : [];\n      const workflowTimeSeriesData: DatedResilienceScore[] = [];\n      let isWorkflowValid: boolean = false;\n      if (data?.ListWorkflow.length === 1 && runs === null) {\n        setWorkflowDataPresent(false);\n      }\n      try {\n        runs.forEach((data) => {\n          try {\n            const executionData: ExecutionData = JSON.parse(\n              data.execution_data\n            );\n            const { nodes } = executionData;\n            const experimentTestResultsArrayPerWorkflowRun: number[] = [];\n            let totalExperimentsPassed: number = 0;\n            let weightsSum: number = 0;\n            let isValid: boolean = false;\n            for (const key of Object.keys(nodes)) {\n              const node = nodes[key];\n              if (node.chaosData) {\n                const { chaosData } = node;\n                if (\n                  chaosData.experimentVerdict === 'Pass' ||\n                  chaosData.experimentVerdict === 'Fail'\n                ) {\n                  const weightageMap: WeightageMap[] = workflowData\n                    ? workflowData.weightages\n                    : [];\n                  weightageMap.forEach((weightage) => {\n                    if (\n                      weightage.experiment_name === chaosData.experimentName\n                    ) {\n                      if (chaosData.experimentVerdict === 'Pass') {\n                        experimentTestResultsArrayPerWorkflowRun.push(\n                          weightage.weightage\n                        );\n                        totalExperimentsPassed += 1;\n                      }\n                      if (chaosData.experimentVerdict === 'Fail') {\n                        experimentTestResultsArrayPerWorkflowRun.push(0);\n                      }\n                      if (\n                        chaosData.experimentVerdict === 'Pass' ||\n                        chaosData.experimentVerdict === 'Fail'\n                      ) {\n                        weightsSum += weightage.weightage;\n                        isValid = true;\n                        isWorkflowValid = true;\n                      }\n                    }\n                  });\n                }\n              }\n            }\n            if (executionData.event_type === 'UPDATE' && isValid) {\n              totalValidRuns += 1;\n              totalValidWorkflowRuns.tests_passed += totalExperimentsPassed;\n              totalValidWorkflowRuns.tests_failed +=\n                experimentTestResultsArrayPerWorkflowRun.length -\n                totalExperimentsPassed;\n              totalValidWorkflowRuns.resilience_score += experimentTestResultsArrayPerWorkflowRun.length\n                ? (experimentTestResultsArrayPerWorkflowRun.reduce(\n                    (a, b) => a + b,\n                    0\n                  ) /\n                    weightsSum) *\n                  100\n                : 0;\n              workflowTimeSeriesData.push({\n                date: data.last_updated,\n                value: experimentTestResultsArrayPerWorkflowRun.length\n                  ? (experimentTestResultsArrayPerWorkflowRun.reduce(\n                      (a, b) => a + b,\n                      0\n                    ) /\n                      weightsSum) *\n                    100\n                  : 0,\n              });\n              timeSeriesArrayForAveragePerWeek.push({\n                date: data.last_updated,\n                value: experimentTestResultsArrayPerWorkflowRun.length\n                  ? (experimentTestResultsArrayPerWorkflowRun.reduce(\n                      (a, b) => a + b,\n                      0\n                    ) /\n                      weightsSum) *\n                    100\n                  : 0,\n              });\n            }\n          } catch (error) {\n            console.error(error);\n          }\n        });\n      } catch (error) {\n        console.log(error);\n      }\n      if (isWorkflowValid) {\n        plotData.labels.push(workflowData ? workflowData.workflow_name : '');\n        timeSeriesArray.push(workflowTimeSeriesData);\n      }\n    });\n\n    if (totalValidRuns === 0) {\n      setWorkflowDataPresent(false);\n    }\n\n    timeSeriesArray.reverse().forEach((workflowTimeSeriesData, index) => {\n      const hourlyGroupedResults = _.groupBy(workflowTimeSeriesData, (data) =>\n        moment\n          .unix(parseInt(data.date, 10))\n          .startOf('hour')\n          .format('YYYY-MM-DD HH:mm:ss')\n      );\n      const dailyGroupedResults = _.groupBy(workflowTimeSeriesData, (data) =>\n        moment.unix(parseInt(data.date, 10)).startOf('day').format('YYYY-MM-DD')\n      );\n      const monthlyGroupedResults = _.groupBy(workflowTimeSeriesData, (data) =>\n        moment.unix(parseInt(data.date, 10)).startOf('month').format('YYYY-MM')\n      );\n      if (index < 4) {\n        plotData.xData.Hourly[index] = [];\n        plotData.yData.Hourly[index] = [];\n        Object.keys(hourlyGroupedResults).forEach((hour) => {\n          let total = 0;\n          hourlyGroupedResults[hour].forEach((data) => {\n            total += data.value;\n          });\n          plotData.xData.Hourly[index].push(hour);\n          plotData.yData.Hourly[index].push(\n            total / hourlyGroupedResults[hour].length\n          );\n        });\n        plotData.xData.Daily[index] = [];\n        plotData.yData.Daily[index] = [];\n        Object.keys(dailyGroupedResults).forEach((day) => {\n          let total = 0;\n          dailyGroupedResults[day].forEach((data) => {\n            total += data.value;\n          });\n          plotData.xData.Daily[index].push(day);\n          plotData.yData.Daily[index].push(\n            total / dailyGroupedResults[day].length\n          );\n        });\n        plotData.xData.Monthly[index] = [];\n        plotData.yData.Monthly[index] = [];\n        Object.keys(monthlyGroupedResults).forEach((month) => {\n          let total = 0;\n          monthlyGroupedResults[month].forEach((data) => {\n            total += data.value;\n          });\n          plotData.xData.Monthly[index].push(month);\n          plotData.yData.Monthly[index].push(\n            total / monthlyGroupedResults[month].length\n          );\n        });\n      }\n    });\n    setPlotDataForComparison(plotData);\n    setTotalValidWorkflowRunsCount(totalValidRuns);\n    const testsPassedPercentage: number =\n      (totalValidWorkflowRuns.tests_passed /\n        (totalValidWorkflowRuns.tests_passed +\n          totalValidWorkflowRuns.tests_failed)) *\n      100;\n    const weeklyGroupedResults = _.groupBy(\n      timeSeriesArrayForAveragePerWeek,\n      (data) => moment.unix(parseInt(data.date, 10)).startOf('isoWeek')\n    );\n    Object.keys(weeklyGroupedResults).forEach((week) => {\n      workflowRunsPerWeek.push(weeklyGroupedResults[week].length);\n    });\n    setAnalyticsData({\n      avgWorkflows:\n        workflowRunsPerWeek.reduce((a, b) => a + b, 0) /\n        workflowRunsPerWeek.length,\n      maxWorkflows: Math.max(...workflowRunsPerWeek),\n      passPercentage:\n        totalValidRuns > 0 && testsPassedPercentage >= 0\n          ? testsPassedPercentage\n          : 0,\n      failPercentage:\n        totalValidRuns > 0 && testsPassedPercentage >= 0\n          ? 100 - testsPassedPercentage\n          : 0,\n      avgResilienceScore:\n        totalValidWorkflowRuns.resilience_score / totalValidRuns,\n    });\n  };\n\n  useEffect(() => {\n    if (!loading && !error && data && data.ListWorkflow.slice(0).length >= 1) {\n      setWorkflowDataPresent(true);\n      loadWorkflowAnalyticssData();\n    } else if (loading === false) {\n      setWorkflowDataPresent(false);\n    }\n    setTimeout(() => {\n      setIsChecking(false);\n    }, 500);\n  }, [data]);\n\n  useEffect(() => {\n    callbackToSetDataPresent(workflowDataPresent);\n  }, [workflowDataPresent]);\n\n  const [activities, setActivities] = useState<Message[]>([]);\n\n  const fetchRandomActivities = useCallback(() => {\n    const activitiesList = [];\n\n    const notificationsList = [\n      {\n        id: '1',\n        MessageType: 'New cluster',\n        Message: 'connected',\n        generatedTime: '',\n      },\n      {\n        id: '2',\n        MessageType: 'Argo Chaos workflow',\n        Message: 'crashed',\n        generatedTime: '',\n      },\n      {\n        id: '3',\n        MessageType: 'New workflow',\n        Message: 'created',\n        generatedTime: '',\n      },\n      {\n        id: '4',\n        MessageType: 'Pod Delete workflow',\n        Message: 'complete',\n        generatedTime: '',\n      },\n      {\n        id: '5',\n        MessageType: 'Argo Chaos workflow',\n        Message: 'started',\n        generatedTime: '',\n      },\n      {\n        id: '6',\n        MessageType: 'New project',\n        Message: 'Invite Recieved',\n        generatedTime: '',\n      },\n    ];\n\n    const iterations = notificationsList.length;\n\n    const oneDaySeconds = 60 * 60 * 24;\n\n    let curUnix = Math.round(\n      new Date().getTime() / 1000 - iterations * oneDaySeconds\n    );\n\n    for (let i = 0; i < iterations; i += 1) {\n      const notificationItem = notificationsList[i];\n      const message = {\n        sequenceID: (i as unknown) as string,\n        id: notificationItem.id,\n        messageType: notificationItem.MessageType,\n        date: curUnix,\n        text: `${notificationItem.MessageType}- ${notificationItem.Message}`,\n      };\n      curUnix += oneDaySeconds;\n      activitiesList.push(message);\n    }\n    activitiesList.reverse();\n    setActivities(activitiesList);\n  }, [setActivities]);\n\n  useEffect(() => {\n    fetchRandomActivities();\n  }, []);\n\n  return (\n    <div>\n      {' '}\n      {isChecking ? (\n        <div className={classes.loader}>\n          <Loader />\n        </div>\n      ) : (\n        <div>\n          {workflowDataPresent ? (\n            <div>\n              <div className={classes.cardsDiv}>\n                <TotalWorkflows\n                  workflow={totalValidWorkflowRunsCount}\n                  average={parseFloat(analyticsData.avgWorkflows.toFixed(0))}\n                  max={analyticsData.maxWorkflows}\n                />\n                <PassedVsFailed\n                  passed={parseFloat(analyticsData.passPercentage.toFixed(2))}\n                  failed={parseFloat(analyticsData.failPercentage.toFixed(2))}\n                />\n                <AverageResilienceScore\n                  value={parseFloat(\n                    analyticsData.avgResilienceScore.toFixed(2)\n                  )}\n                />\n              </div>\n              <div className={classes.othersDiv}>\n                <div className={classes.resilienceScoresDiv}>\n                  <Typography className={classes.statsHeading}>\n                    <strong>{t('home.resilienceScore')}</strong>\n                  </Typography>\n                  <Paper variant=\"outlined\" className={classes.backgroundFix}>\n                    {plotDataForComparison ? (\n                      <ResilienceScoreComparisonPlot\n                        xData={plotDataForComparison.xData}\n                        yData={plotDataForComparison.yData}\n                        labels={plotDataForComparison.labels}\n                      />\n                    ) : (\n                      <Loader />\n                    )}\n                  </Paper>\n                </div>\n                <div className={classes.extrasDiv}>\n                  <div>\n                    <div className={classes.btnHeaderDiv}>\n                      <Typography className={classes.statsHeading}>\n                        <strong>{t('home.recentActivity')}</strong>\n                      </Typography>\n                      {/*\n                  <Button className={classes.seeAllBtn}>\n                    <div className={classes.btnSpan}>\n                      <Typography className={classes.btnText}>\n                        {t('home.analytics.moreInfo')}\n                      </Typography>\n                      <img src=\"icons/next.png\" alt=\"next\" />\n                    </div>\n                  </Button>\n                  */}\n                    </div>\n                    <Paper\n                      variant=\"outlined\"\n                      className={classes.fixedRecents}\n                      onMouseEnter={() => {\n                        setMessageActive(true);\n                      }}\n                      onMouseLeave={() => {\n                        setMessageActive(false);\n                      }}\n                    >\n                      {messageActive ? (\n                        <Typography variant=\"h4\" className={classes.comingSoon}>\n                          {t('home.comingSoon')}\n                        </Typography>\n                      ) : (\n                        <RecentActivity activities={activities} />\n                      )}\n                    </Paper>\n                  </div>\n                  <div className={classes.quickActionDiv}>\n                    <QuickActionCard />\n                  </div>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className={classes.loader}>\n              <Loader />\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ReturningHome;\n"]},"metadata":{},"sourceType":"module"}