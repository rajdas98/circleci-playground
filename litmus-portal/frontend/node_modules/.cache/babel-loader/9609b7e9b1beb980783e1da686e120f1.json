{"ast":null,"code":"import _objectSpread from \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { AnalyticsActions } from '../../models/redux/analytics';\nimport createReducer from './createReducer';\nvar initialState = {\n  communityData: {\n    github: {\n      stars: '',\n      experimentsCount: ''\n    },\n    google: {\n      totalRuns: '',\n      operatorInstalls: '',\n      geoCity: [],\n      geoCountry: [],\n      dailyExperimentData: [],\n      dailyOperatorData: [],\n      monthlyExperimentData: [],\n      monthlyOperatorData: []\n    }\n  },\n  loading: false,\n  error: false\n};\nexport var communityData = createReducer(initialState, {\n  [AnalyticsActions.COMMUNITY_ANALYTICS_SUCCESS](state, action) {\n    var data = action.payload;\n    var geoCity = [];\n    data.google.geoCity.forEach(function (c) {\n      geoCity.push({\n        name: c[0],\n        latitude: c[1],\n        longitude: c[2],\n        count: c[3]\n      });\n    });\n    var geoCountry = data.google.geoCountry;\n    var dailyExperimentData = [];\n    data.google.dailyExperimentData.forEach(function (c) {\n      dailyExperimentData.push({\n        date: c[0],\n        count: c[1]\n      });\n    });\n    var dailyOperatorData = [];\n    data.google.dailyOperatorData.forEach(function (c) {\n      dailyOperatorData.push({\n        date: c[0],\n        count: c[1]\n      });\n    });\n    var monthlyExperimentData = [];\n    data.google.monthlyExperimentData.forEach(function (c) {\n      monthlyExperimentData.push({\n        date: c[0],\n        count: c[1]\n      });\n    });\n    var monthlyOperatorData = [];\n    data.google.monthlyOperatorData.forEach(function (c) {\n      monthlyOperatorData.push({\n        date: c[0],\n        count: c[1]\n      });\n    });\n    return _objectSpread(_objectSpread({}, state), {}, {\n      communityData: {\n        github: data.github,\n        google: {\n          totalRuns: data.google.totalRuns,\n          operatorInstalls: data.google.operatorInstalls,\n          geoCountry,\n          geoCity,\n          dailyExperimentData,\n          dailyOperatorData,\n          monthlyExperimentData,\n          monthlyOperatorData\n        }\n      },\n      loading: false,\n      error: false\n    });\n  },\n\n  [AnalyticsActions.COMMUNITY_ANALYTICS_LOADING](state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      loading: action.payload\n    });\n  },\n\n  [AnalyticsActions.COMMUNITY_ANALYTICS_ERROR](state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      loading: false,\n      error: action.payload\n    });\n  }\n\n});\nexport default communityData;","map":{"version":3,"sources":["/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/redux/reducers/analytics.ts"],"names":["AnalyticsActions","createReducer","initialState","communityData","github","stars","experimentsCount","google","totalRuns","operatorInstalls","geoCity","geoCountry","dailyExperimentData","dailyOperatorData","monthlyExperimentData","monthlyOperatorData","loading","error","COMMUNITY_ANALYTICS_SUCCESS","state","action","data","payload","forEach","c","push","name","latitude","longitude","count","date","COMMUNITY_ANALYTICS_LOADING","COMMUNITY_ANALYTICS_ERROR"],"mappings":";AAAA,SAEEA,gBAFF,QAOO,8BAPP;AAQA,OAAOC,aAAP,MAA0B,iBAA1B;AAEA,IAAMC,YAA2B,GAAG;AAClCC,EAAAA,aAAa,EAAE;AACbC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,gBAAgB,EAAE;AAA/B,KADK;AAEbC,IAAAA,MAAM,EAAE;AACNC,MAAAA,SAAS,EAAE,EADL;AAENC,MAAAA,gBAAgB,EAAE,EAFZ;AAGNC,MAAAA,OAAO,EAAE,EAHH;AAINC,MAAAA,UAAU,EAAE,EAJN;AAKNC,MAAAA,mBAAmB,EAAE,EALf;AAMNC,MAAAA,iBAAiB,EAAE,EANb;AAONC,MAAAA,qBAAqB,EAAE,EAPjB;AAQNC,MAAAA,mBAAmB,EAAE;AARf;AAFK,GADmB;AAclCC,EAAAA,OAAO,EAAE,KAdyB;AAelCC,EAAAA,KAAK,EAAE;AAf2B,CAApC;AAkBA,OAAO,IAAMd,aAAa,GAAGF,aAAa,CAAgBC,YAAhB,EAA8B;AACtE,GAACF,gBAAgB,CAACkB,2BAAlB,EACEC,KADF,EAEEC,MAFF,EAGE;AACA,QAAMC,IAAI,GAAGD,MAAM,CAACE,OAApB;AACA,QAAMZ,OAAkB,GAAG,EAA3B;AACAW,IAAAA,IAAI,CAACd,MAAL,CAAYG,OAAZ,CAAoBa,OAApB,CAA4B,UAACC,CAAD,EAAY;AACtCd,MAAAA,OAAO,CAACe,IAAR,CAAa;AACXC,QAAAA,IAAI,EAAEF,CAAC,CAAC,CAAD,CADI;AAEXG,QAAAA,QAAQ,EAAEH,CAAC,CAAC,CAAD,CAFA;AAGXI,QAAAA,SAAS,EAAEJ,CAAC,CAAC,CAAD,CAHD;AAIXK,QAAAA,KAAK,EAAEL,CAAC,CAAC,CAAD;AAJG,OAAb;AAMD,KAPD;AAHA,QAYQb,UAZR,GAYuBU,IAAI,CAACd,MAZ5B,CAYQI,UAZR;AAcA,QAAMC,mBAAiC,GAAG,EAA1C;AACAS,IAAAA,IAAI,CAACd,MAAL,CAAYK,mBAAZ,CAAgCW,OAAhC,CAAwC,UAACC,CAAD,EAAY;AAClDZ,MAAAA,mBAAmB,CAACa,IAApB,CAAyB;AACvBK,QAAAA,IAAI,EAAEN,CAAC,CAAC,CAAD,CADgB;AAEvBK,QAAAA,KAAK,EAAEL,CAAC,CAAC,CAAD;AAFe,OAAzB;AAID,KALD;AAOA,QAAMX,iBAA+B,GAAG,EAAxC;AACAQ,IAAAA,IAAI,CAACd,MAAL,CAAYM,iBAAZ,CAA8BU,OAA9B,CAAsC,UAACC,CAAD,EAAY;AAChDX,MAAAA,iBAAiB,CAACY,IAAlB,CAAuB;AACrBK,QAAAA,IAAI,EAAEN,CAAC,CAAC,CAAD,CADc;AAErBK,QAAAA,KAAK,EAAEL,CAAC,CAAC,CAAD;AAFa,OAAvB;AAID,KALD;AAOA,QAAMV,qBAAmC,GAAG,EAA5C;AACAO,IAAAA,IAAI,CAACd,MAAL,CAAYO,qBAAZ,CAAkCS,OAAlC,CAA0C,UAACC,CAAD,EAAY;AACpDV,MAAAA,qBAAqB,CAACW,IAAtB,CAA2B;AACzBK,QAAAA,IAAI,EAAEN,CAAC,CAAC,CAAD,CADkB;AAEzBK,QAAAA,KAAK,EAAEL,CAAC,CAAC,CAAD;AAFiB,OAA3B;AAID,KALD;AAOA,QAAMT,mBAAiC,GAAG,EAA1C;AACAM,IAAAA,IAAI,CAACd,MAAL,CAAYQ,mBAAZ,CAAgCQ,OAAhC,CAAwC,UAACC,CAAD,EAAY;AAClDT,MAAAA,mBAAmB,CAACU,IAApB,CAAyB;AACvBK,QAAAA,IAAI,EAAEN,CAAC,CAAC,CAAD,CADgB;AAEvBK,QAAAA,KAAK,EAAEL,CAAC,CAAC,CAAD;AAFe,OAAzB;AAID,KALD;AAOA,2CACKL,KADL;AAEEhB,MAAAA,aAAa,EAAE;AACbC,QAAAA,MAAM,EAAEiB,IAAI,CAACjB,MADA;AAEbG,QAAAA,MAAM,EAAE;AACNC,UAAAA,SAAS,EAAEa,IAAI,CAACd,MAAL,CAAYC,SADjB;AAENC,UAAAA,gBAAgB,EAAEY,IAAI,CAACd,MAAL,CAAYE,gBAFxB;AAGNE,UAAAA,UAHM;AAIND,UAAAA,OAJM;AAKNE,UAAAA,mBALM;AAMNC,UAAAA,iBANM;AAONC,UAAAA,qBAPM;AAQNC,UAAAA;AARM;AAFK,OAFjB;AAeEC,MAAAA,OAAO,EAAE,KAfX;AAgBEC,MAAAA,KAAK,EAAE;AAhBT;AAkBD,GApEqE;;AAqEtE,GAACjB,gBAAgB,CAAC+B,2BAAlB,EACEZ,KADF,EAEEC,MAFF,EAGE;AACA,2CACKD,KADL;AAEEH,MAAAA,OAAO,EAAEI,MAAM,CAACE;AAFlB;AAID,GA7EqE;;AA8EtE,GAACtB,gBAAgB,CAACgC,yBAAlB,EACEb,KADF,EAEEC,MAFF,EAGE;AACA,2CACKD,KADL;AAEEH,MAAAA,OAAO,EAAE,KAFX;AAGEC,MAAAA,KAAK,EAAEG,MAAM,CAACE;AAHhB;AAKD;;AAvFqE,CAA9B,CAAnC;AA0FP,eAAenB,aAAf","sourcesContent":["import {\n  AnalyticsAction,\n  AnalyticsActions,\n  AnalyticsData,\n  CommunityData,\n  GeoCity,\n  SeriesData,\n} from '../../models/redux/analytics';\nimport createReducer from './createReducer';\n\nconst initialState: AnalyticsData = {\n  communityData: {\n    github: { stars: '', experimentsCount: '' },\n    google: {\n      totalRuns: '',\n      operatorInstalls: '',\n      geoCity: [],\n      geoCountry: [],\n      dailyExperimentData: [],\n      dailyOperatorData: [],\n      monthlyExperimentData: [],\n      monthlyOperatorData: [],\n    },\n  },\n  loading: false,\n  error: false,\n};\n\nexport const communityData = createReducer<AnalyticsData>(initialState, {\n  [AnalyticsActions.COMMUNITY_ANALYTICS_SUCCESS](\n    state: AnalyticsData,\n    action: AnalyticsAction\n  ) {\n    const data = action.payload as CommunityData;\n    const geoCity: GeoCity[] = [];\n    data.google.geoCity.forEach((c: any) => {\n      geoCity.push({\n        name: c[0],\n        latitude: c[1],\n        longitude: c[2],\n        count: c[3],\n      });\n    });\n\n    const { geoCountry } = data.google;\n\n    const dailyExperimentData: SeriesData[] = [];\n    data.google.dailyExperimentData.forEach((c: any) => {\n      dailyExperimentData.push({\n        date: c[0],\n        count: c[1],\n      });\n    });\n\n    const dailyOperatorData: SeriesData[] = [];\n    data.google.dailyOperatorData.forEach((c: any) => {\n      dailyOperatorData.push({\n        date: c[0],\n        count: c[1],\n      });\n    });\n\n    const monthlyExperimentData: SeriesData[] = [];\n    data.google.monthlyExperimentData.forEach((c: any) => {\n      monthlyExperimentData.push({\n        date: c[0],\n        count: c[1],\n      });\n    });\n\n    const monthlyOperatorData: SeriesData[] = [];\n    data.google.monthlyOperatorData.forEach((c: any) => {\n      monthlyOperatorData.push({\n        date: c[0],\n        count: c[1],\n      });\n    });\n\n    return {\n      ...state,\n      communityData: {\n        github: data.github,\n        google: {\n          totalRuns: data.google.totalRuns,\n          operatorInstalls: data.google.operatorInstalls,\n          geoCountry,\n          geoCity,\n          dailyExperimentData,\n          dailyOperatorData,\n          monthlyExperimentData,\n          monthlyOperatorData,\n        },\n      },\n      loading: false,\n      error: false,\n    };\n  },\n  [AnalyticsActions.COMMUNITY_ANALYTICS_LOADING](\n    state: AnalyticsData,\n    action: AnalyticsAction\n  ) {\n    return {\n      ...state,\n      loading: action.payload as boolean,\n    };\n  },\n  [AnalyticsActions.COMMUNITY_ANALYTICS_ERROR](\n    state: AnalyticsData,\n    action: AnalyticsAction\n  ) {\n    return {\n      ...state,\n      loading: false,\n      error: action.payload as boolean,\n    };\n  },\n});\n\nexport default communityData;\n"]},"metadata":{},"sourceType":"module"}