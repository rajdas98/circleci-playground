{"ast":null,"code":"/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar Axes = require('../../plots/cartesian/axes');\n\nvar arraysToCalcdata = require('./arrays_to_calcdata');\n\nvar calcSelection = require('../scatter/calc_selection');\n\nvar BADNUM = require('../../constants/numerical').BADNUM;\n\nmodule.exports = function calc(gd, trace) {\n  var xa = Axes.getFromId(gd, trace.xaxis || 'x');\n  var ya = Axes.getFromId(gd, trace.yaxis || 'y');\n  var size, pos, i, cdi;\n\n  if (trace.orientation === 'h') {\n    size = xa.makeCalcdata(trace, 'x');\n    pos = ya.makeCalcdata(trace, 'y');\n  } else {\n    size = ya.makeCalcdata(trace, 'y');\n    pos = xa.makeCalcdata(trace, 'x');\n  } // create the \"calculated data\" to plot\n\n\n  var serieslen = Math.min(pos.length, size.length);\n  var cd = new Array(serieslen); // Unlike other bar-like traces funnels do not support base attribute.\n  // bases for funnels are computed internally in a way that\n  // the mid-point of each bar are located on the axis line.\n\n  trace._base = []; // set position and size\n\n  for (i = 0; i < serieslen; i++) {\n    // treat negative values as bad numbers\n    if (size[i] < 0) size[i] = BADNUM;\n    var connectToNext = false;\n\n    if (size[i] !== BADNUM) {\n      if (i + 1 < serieslen && size[i + 1] !== BADNUM) {\n        connectToNext = true;\n      }\n    }\n\n    cdi = cd[i] = {\n      p: pos[i],\n      s: size[i],\n      cNext: connectToNext\n    };\n    trace._base[i] = -0.5 * cdi.s;\n\n    if (trace.ids) {\n      cdi.id = String(trace.ids[i]);\n    } // calculate total values\n\n\n    if (i === 0) cd[0].vTotal = 0;\n    cd[0].vTotal += fixNum(cdi.s); // ratio from initial value\n\n    cdi.begR = fixNum(cdi.s) / fixNum(cd[0].s);\n  }\n\n  var prevGoodNum;\n\n  for (i = 0; i < serieslen; i++) {\n    cdi = cd[i];\n    if (cdi.s === BADNUM) continue; // ratio of total value\n\n    cdi.sumR = cdi.s / cd[0].vTotal; // ratio of previous (good) value\n\n    cdi.difR = prevGoodNum !== undefined ? cdi.s / prevGoodNum : 1;\n    prevGoodNum = cdi.s;\n  }\n\n  arraysToCalcdata(cd, trace);\n  calcSelection(cd, trace);\n  return cd;\n};\n\nfunction fixNum(a) {\n  return a === BADNUM ? 0 : a;\n}","map":{"version":3,"sources":["/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/node_modules/plotly.js/src/traces/funnel/calc.js"],"names":["Axes","require","arraysToCalcdata","calcSelection","BADNUM","module","exports","calc","gd","trace","xa","getFromId","xaxis","ya","yaxis","size","pos","i","cdi","orientation","makeCalcdata","serieslen","Math","min","length","cd","Array","_base","connectToNext","p","s","cNext","ids","id","String","vTotal","fixNum","begR","prevGoodNum","sumR","difR","undefined","a"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Axes = require('../../plots/cartesian/axes');\nvar arraysToCalcdata = require('./arrays_to_calcdata');\nvar calcSelection = require('../scatter/calc_selection');\nvar BADNUM = require('../../constants/numerical').BADNUM;\n\nmodule.exports = function calc(gd, trace) {\n    var xa = Axes.getFromId(gd, trace.xaxis || 'x');\n    var ya = Axes.getFromId(gd, trace.yaxis || 'y');\n    var size, pos, i, cdi;\n\n    if(trace.orientation === 'h') {\n        size = xa.makeCalcdata(trace, 'x');\n        pos = ya.makeCalcdata(trace, 'y');\n    } else {\n        size = ya.makeCalcdata(trace, 'y');\n        pos = xa.makeCalcdata(trace, 'x');\n    }\n\n    // create the \"calculated data\" to plot\n    var serieslen = Math.min(pos.length, size.length);\n    var cd = new Array(serieslen);\n\n    // Unlike other bar-like traces funnels do not support base attribute.\n    // bases for funnels are computed internally in a way that\n    // the mid-point of each bar are located on the axis line.\n    trace._base = [];\n\n    // set position and size\n    for(i = 0; i < serieslen; i++) {\n        // treat negative values as bad numbers\n        if(size[i] < 0) size[i] = BADNUM;\n\n        var connectToNext = false;\n        if(size[i] !== BADNUM) {\n            if(i + 1 < serieslen && size[i + 1] !== BADNUM) {\n                connectToNext = true;\n            }\n        }\n\n        cdi = cd[i] = {\n            p: pos[i],\n            s: size[i],\n            cNext: connectToNext\n        };\n\n        trace._base[i] = -0.5 * cdi.s;\n\n        if(trace.ids) {\n            cdi.id = String(trace.ids[i]);\n        }\n\n        // calculate total values\n        if(i === 0) cd[0].vTotal = 0;\n        cd[0].vTotal += fixNum(cdi.s);\n\n        // ratio from initial value\n        cdi.begR = fixNum(cdi.s) / fixNum(cd[0].s);\n    }\n\n    var prevGoodNum;\n    for(i = 0; i < serieslen; i++) {\n        cdi = cd[i];\n        if(cdi.s === BADNUM) continue;\n\n        // ratio of total value\n        cdi.sumR = cdi.s / cd[0].vTotal;\n\n        // ratio of previous (good) value\n        cdi.difR = (prevGoodNum !== undefined) ? cdi.s / prevGoodNum : 1;\n\n        prevGoodNum = cdi.s;\n    }\n\n    arraysToCalcdata(cd, trace);\n    calcSelection(cd, trace);\n\n    return cd;\n};\n\nfunction fixNum(a) {\n    return (a === BADNUM) ? 0 : a;\n}\n"]},"metadata":{},"sourceType":"script"}