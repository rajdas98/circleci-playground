{"ast":null,"code":"import _slicedToArray from \"/home/raj/.nvm/versions/node/v12.18.2/lib/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/views/CreateWorkflow/TuneWorkflow/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { Typography } from '@material-ui/core';\nimport Divider from '@material-ui/core/Divider';\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport YAML from 'yaml';\nimport { useTranslation } from 'react-i18next';\nimport Loader from '../../../components/Loader';\nimport YamlEditor from '../../../components/YamlEditor/Editor';\nimport useActions from '../../../redux/actions';\nimport * as WorkflowActions from '../../../redux/actions/workflow';\nimport useStyles from './styles';\n\nvar TuneWorkflow = function TuneWorkflow() {\n  _s();\n\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var workflowData = useSelector(function (state) {\n    return state.workflowData;\n  });\n  var workflow = useActions(WorkflowActions);\n  var name = workflowData.name,\n      link = workflowData.link,\n      yaml = workflowData.yaml,\n      id = workflowData.id,\n      description = workflowData.description;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      loadStateChanger = _useState2[1];\n\n  var _useState3 = useState(\"\".concat(link)),\n      _useState4 = _slicedToArray(_useState3, 2),\n      yamlFile = _useState4[0],\n      setYamlFile = _useState4[1];\n\n  function fetchYaml(link) {\n    fetch(link).then(function (data) {\n      data.text().then(function (yamlText) {\n        var parsedYaml = YAML.parse(yamlText);\n        delete parsedYaml.metadata.generateName;\n        parsedYaml.metadata.name = workflowData.name;\n        var nameMappedYaml = YAML.stringify(parsedYaml);\n        setYamlFile(nameMappedYaml);\n        workflow.setWorkflowDetails({\n          name,\n          link,\n          yaml: nameMappedYaml,\n          id,\n          description\n        });\n        loadStateChanger(false);\n      });\n    }).catch(function (err) {\n      console.error(\"Unable to fetch the yaml text\".concat(err));\n    });\n  }\n\n  useEffect(function () {\n    if (yaml === 'none' || yaml === '') {\n      fetchYaml(link);\n    } else {\n      setYamlFile(yaml);\n      loadStateChanger(false);\n    }\n  }, []);\n\n  if (isLoading) {\n    return /*#__PURE__*/React.createElement(Loader, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.tuneDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.heading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, t('createWorkflow.tuneWorkflow.header'))), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.description,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, t('createWorkflow.tuneWorkflow.info')), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.descriptionextended,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, t('createWorkflow.tuneWorkflow.infoExtended'))), /*#__PURE__*/React.createElement(Divider, {\n    variant: \"middle\",\n    className: classes.horizontalLine,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.editorfix,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(YamlEditor, {\n    content: yamlFile,\n    filename: name,\n    yamlLink: link,\n    id: id,\n    description: description,\n    readOnly: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  })));\n};\n\n_s(TuneWorkflow, \"5JSGN948K/cnnrLXiXWBD9fPJTE=\", false, function () {\n  return [useStyles, useTranslation, useSelector, useActions];\n});\n\n_c = TuneWorkflow;\nexport default TuneWorkflow;\n\nvar _c;\n\n$RefreshReg$(_c, \"TuneWorkflow\");","map":{"version":3,"sources":["/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/views/CreateWorkflow/TuneWorkflow/index.tsx"],"names":["Typography","Divider","React","useEffect","useState","useSelector","YAML","useTranslation","Loader","YamlEditor","useActions","WorkflowActions","useStyles","TuneWorkflow","classes","t","workflowData","state","workflow","name","link","yaml","id","description","isLoading","loadStateChanger","yamlFile","setYamlFile","fetchYaml","fetch","then","data","text","yamlText","parsedYaml","parse","metadata","generateName","nameMappedYaml","stringify","setWorkflowDetails","catch","err","console","error","root","tuneDiv","heading","descriptionextended","horizontalLine","editorfix"],"mappings":"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","sourcesContent":["import { Typography } from '@material-ui/core';\nimport Divider from '@material-ui/core/Divider';\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport YAML from 'yaml';\nimport { useTranslation } from 'react-i18next';\nimport Loader from '../../../components/Loader';\nimport YamlEditor from '../../../components/YamlEditor/Editor';\nimport { WorkflowData } from '../../../models/redux/workflow';\nimport useActions from '../../../redux/actions';\nimport * as WorkflowActions from '../../../redux/actions/workflow';\nimport { RootState } from '../../../redux/reducers';\nimport useStyles from './styles';\n\nconst TuneWorkflow: React.FC = () => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n\n  const workflowData: WorkflowData = useSelector(\n    (state: RootState) => state.workflowData\n  );\n\n  const workflow = useActions(WorkflowActions);\n\n  const { name, link, yaml, id, description } = workflowData;\n\n  const [isLoading, loadStateChanger] = useState(true);\n\n  const [yamlFile, setYamlFile] = useState(`${link}`);\n\n  function fetchYaml(link: string) {\n    fetch(link)\n      .then((data) => {\n        data.text().then((yamlText) => {\n          const parsedYaml = YAML.parse(yamlText);\n          delete parsedYaml.metadata.generateName;\n          parsedYaml.metadata.name = workflowData.name;\n          const nameMappedYaml = YAML.stringify(parsedYaml);\n          setYamlFile(nameMappedYaml);\n          workflow.setWorkflowDetails({\n            name,\n            link,\n            yaml: nameMappedYaml,\n            id,\n            description,\n          });\n          loadStateChanger(false);\n        });\n      })\n      .catch((err) => {\n        console.error(`Unable to fetch the yaml text${err}`);\n      });\n  }\n\n  useEffect(() => {\n    if (yaml === 'none' || yaml === '') {\n      fetchYaml(link);\n    } else {\n      setYamlFile(yaml);\n      loadStateChanger(false);\n    }\n  }, []);\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.tuneDiv}>\n        <Typography className={classes.heading}>\n          <strong>{t('createWorkflow.tuneWorkflow.header')}</strong>\n        </Typography>\n        <Typography className={classes.description}>\n          {t('createWorkflow.tuneWorkflow.info')}\n        </Typography>\n        <Typography className={classes.descriptionextended}>\n          {t('createWorkflow.tuneWorkflow.infoExtended')}\n        </Typography>\n      </div>\n\n      <Divider variant=\"middle\" className={classes.horizontalLine} />\n\n      <div className={classes.editorfix}>\n        <YamlEditor\n          content={yamlFile}\n          filename={name}\n          yamlLink={link}\n          id={id}\n          description={description}\n          readOnly={false}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default TuneWorkflow;\n"]},"metadata":{},"sourceType":"module"}