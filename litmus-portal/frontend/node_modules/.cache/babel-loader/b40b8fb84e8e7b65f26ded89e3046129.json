{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/views/Community/GeoMap/CityMap.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { ComposableMap, Geographies, Geography, Marker, ZoomableGroup } from 'react-simple-maps';\nimport datageo from './geo.json';\nimport useStyles from './styles';\nvar geoUrl = datageo;\n/* City geo Map is used for location of users with \nlat and lng wise to present it on map */\n\nvar CityMap = function CityMap() {\n  _s();\n\n  var classes = useStyles();\n\n  var _useSelector = useSelector(function (state) {\n    return state.communityData;\n  }),\n      communityData = _useSelector.communityData;\n\n  var geoCity = communityData.google.geoCity;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ComposableMap, {\n    projection: \"geoMercator\",\n    className: classes.cityMapComposableMap,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ZoomableGroup, {\n    center: [0, -675],\n    zoom: 0.85,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Geographies, {\n    geography: geoUrl,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }\n  }, function (_ref) {\n    var geographies = _ref.geographies;\n    return geographies.map(function (geo) {\n      return /*#__PURE__*/React.createElement(Geography, {\n        className: classes.cityMapGeography,\n        key: geo.rsmKey,\n        geography: geo,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 17\n        }\n      });\n    });\n  }), geoCity && geoCity.map(function (_ref2) {\n    var name = _ref2.name,\n        latitude = _ref2.latitude,\n        longitude = _ref2.longitude;\n    return name !== '(not set)' && /*#__PURE__*/React.createElement(Marker, {\n      className: classes.cityMapMarkerStyles,\n      key: \"\".concat(name, \"_\").concat(latitude, \"_\").concat(longitude),\n      coordinates: [parseFloat(longitude) - 4, parseFloat(latitude) + 4],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"circle\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }\n    }));\n  }))));\n};\n\n_s(CityMap, \"b4l9e4bMhxM3rZYwIX1Gl8WvLn4=\", false, function () {\n  return [useStyles, useSelector];\n});\n\n_c = CityMap;\nexport default CityMap;\n\nvar _c;\n\n$RefreshReg$(_c, \"CityMap\");","map":{"version":3,"sources":["/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/views/Community/GeoMap/CityMap.tsx"],"names":["React","useSelector","ComposableMap","Geographies","Geography","Marker","ZoomableGroup","datageo","useStyles","geoUrl","CityMap","classes","state","communityData","geoCity","google","cityMapComposableMap","geographies","map","geo","cityMapGeography","rsmKey","name","latitude","longitude","cityMapMarkerStyles","parseFloat"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SACEC,aADF,EAEEC,WAFF,EAGEC,SAHF,EAIEC,MAJF,EAKEC,aALF,QAMO,mBANP;AAQA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,SAAP,MAAsB,UAAtB;AAEA,IAAMC,MAAM,GAAGF,OAAf;AAEA;AACA;;AACA,IAAMG,OAAiB,GAAG,SAApBA,OAAoB,GAAM;AAAA;;AAC9B,MAAMC,OAAO,GAAGH,SAAS,EAAzB;;AAD8B,qBAGJP,WAAW,CACnC,UAACW,KAAD;AAAA,WAAsBA,KAAK,CAACC,aAA5B;AAAA,GADmC,CAHP;AAAA,MAGtBA,aAHsB,gBAGtBA,aAHsB;;AAAA,MAMtBC,OANsB,GAMVD,aAAa,CAACE,MANJ,CAMtBD,OANsB;AAO9B,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AACE,IAAA,UAAU,EAAC,aADb;AAEE,IAAA,SAAS,EAAEH,OAAO,CAACK,oBAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIE,oBAAC,aAAD;AAAe,IAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAC,GAAL,CAAvB;AAAkC,IAAA,IAAI,EAAE,IAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAEP,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG;AAAA,QAAGQ,WAAH,QAAGA,WAAH;AAAA,WACCA,WAAW,CAACC,GAAZ,CAAgB,UAACC,GAAD;AAAA,0BACd,oBAAC,SAAD;AACE,QAAA,SAAS,EAAER,OAAO,CAACS,gBADrB;AAEE,QAAA,GAAG,EAAED,GAAG,CAACE,MAFX;AAGE,QAAA,SAAS,EAAEF,GAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADc;AAAA,KAAhB,CADD;AAAA,GADH,CADF,EAYGL,OAAO,IACNA,OAAO,CAACI,GAAR,CACE;AAAA,QAAGI,IAAH,SAAGA,IAAH;AAAA,QAASC,QAAT,SAASA,QAAT;AAAA,QAAmBC,SAAnB,SAAmBA,SAAnB;AAAA,WACEF,IAAI,KAAK,WAAT,iBACE,oBAAC,MAAD;AACE,MAAA,SAAS,EAAEX,OAAO,CAACc,mBADrB;AAEE,MAAA,GAAG,YAAKH,IAAL,cAAaC,QAAb,cAAyBC,SAAzB,CAFL;AAGE,MAAA,WAAW,EAAE,CACXE,UAAU,CAACF,SAAD,CAAV,GAAwB,CADb,EAEXE,UAAU,CAACH,QAAD,CAAV,GAAuB,CAFZ,CAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,CAFJ;AAAA,GADF,CAbJ,CAJF,CADF,CADF;AAsCD,CA7CD;;GAAMb,O;UACYF,S,EAEUP,W;;;KAHtBS,O;AA+CN,eAAeA,OAAf","sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker,\n  ZoomableGroup,\n} from 'react-simple-maps';\nimport { RootState } from '../../../redux/reducers';\nimport datageo from './geo.json';\nimport useStyles from './styles';\n\nconst geoUrl = datageo;\n\n/* City geo Map is used for location of users with \nlat and lng wise to present it on map */\nconst CityMap: React.FC = () => {\n  const classes = useStyles();\n\n  const { communityData } = useSelector(\n    (state: RootState) => state.communityData\n  );\n  const { geoCity } = communityData.google;\n  return (\n    <div>\n      <ComposableMap\n        projection=\"geoMercator\"\n        className={classes.cityMapComposableMap}\n      >\n        <ZoomableGroup center={[0, -675]} zoom={0.85}>\n          <Geographies geography={geoUrl}>\n            {({ geographies }) =>\n              geographies.map((geo) => (\n                <Geography\n                  className={classes.cityMapGeography}\n                  key={geo.rsmKey}\n                  geography={geo}\n                />\n              ))\n            }\n          </Geographies>\n          {geoCity &&\n            geoCity.map(\n              ({ name, latitude, longitude }) =>\n                name !== '(not set)' && (\n                  <Marker\n                    className={classes.cityMapMarkerStyles}\n                    key={`${name}_${latitude}_${longitude}`}\n                    coordinates={[\n                      parseFloat(longitude) - 4,\n                      parseFloat(latitude) + 4,\n                    ]}\n                  >\n                    <circle />\n                  </Marker>\n                )\n            )}\n        </ZoomableGroup>\n      </ComposableMap>\n    </div>\n  );\n};\n\nexport default CityMap;\n"]},"metadata":{},"sourceType":"module"}