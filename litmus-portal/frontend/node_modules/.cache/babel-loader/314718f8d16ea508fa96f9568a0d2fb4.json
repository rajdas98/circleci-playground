{"ast":null,"code":"\"use strict\";\n\nvar intersectRect = require(\"./intersect/intersect-rect\");\n\nvar intersectEllipse = require(\"./intersect/intersect-ellipse\");\n\nvar intersectCircle = require(\"./intersect/intersect-circle\");\n\nvar intersectPolygon = require(\"./intersect/intersect-polygon\");\n\nmodule.exports = {\n  rect: rect,\n  ellipse: ellipse,\n  circle: circle,\n  diamond: diamond\n};\n\nfunction rect(parent, bbox, node) {\n  var shapeSvg = parent.insert(\"rect\", \":first-child\").attr(\"rx\", node.rx).attr(\"ry\", node.ry).attr(\"x\", -bbox.width / 2).attr(\"y\", -bbox.height / 2).attr(\"width\", bbox.width).attr(\"height\", bbox.height);\n\n  node.intersect = function (point) {\n    return intersectRect(node, point);\n  };\n\n  return shapeSvg;\n}\n\nfunction ellipse(parent, bbox, node) {\n  var rx = bbox.width / 2;\n  var ry = bbox.height / 2;\n  var shapeSvg = parent.insert(\"ellipse\", \":first-child\").attr(\"x\", -bbox.width / 2).attr(\"y\", -bbox.height / 2).attr(\"rx\", rx).attr(\"ry\", ry);\n\n  node.intersect = function (point) {\n    return intersectEllipse(node, rx, ry, point);\n  };\n\n  return shapeSvg;\n}\n\nfunction circle(parent, bbox, node) {\n  var r = Math.max(bbox.width, bbox.height) / 2;\n  var shapeSvg = parent.insert(\"circle\", \":first-child\").attr(\"x\", -bbox.width / 2).attr(\"y\", -bbox.height / 2).attr(\"r\", r);\n\n  node.intersect = function (point) {\n    return intersectCircle(node, r, point);\n  };\n\n  return shapeSvg;\n} // Circumscribe an ellipse for the bounding box with a diamond shape. I derived\n// the function to calculate the diamond shape from:\n// http://mathforum.org/kb/message.jspa?messageID=3750236\n\n\nfunction diamond(parent, bbox, node) {\n  var w = bbox.width * Math.SQRT2 / 2;\n  var h = bbox.height * Math.SQRT2 / 2;\n  var points = [{\n    x: 0,\n    y: -h\n  }, {\n    x: -w,\n    y: 0\n  }, {\n    x: 0,\n    y: h\n  }, {\n    x: w,\n    y: 0\n  }];\n  var shapeSvg = parent.insert(\"polygon\", \":first-child\").attr(\"points\", points.map(function (p) {\n    return p.x + \",\" + p.y;\n  }).join(\" \"));\n\n  node.intersect = function (p) {\n    return intersectPolygon(node, points, p);\n  };\n\n  return shapeSvg;\n}","map":{"version":3,"sources":["/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/node_modules/dagre-d3/lib/shapes.js"],"names":["intersectRect","require","intersectEllipse","intersectCircle","intersectPolygon","module","exports","rect","ellipse","circle","diamond","parent","bbox","node","shapeSvg","insert","attr","rx","ry","width","height","intersect","point","r","Math","max","w","SQRT2","h","points","x","y","map","p","join"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar intersectRect = require(\"./intersect/intersect-rect\");\nvar intersectEllipse = require(\"./intersect/intersect-ellipse\");\nvar intersectCircle = require(\"./intersect/intersect-circle\");\nvar intersectPolygon = require(\"./intersect/intersect-polygon\");\n\nmodule.exports = {\n  rect: rect,\n  ellipse: ellipse,\n  circle: circle,\n  diamond: diamond\n};\n\nfunction rect(parent, bbox, node) {\n  var shapeSvg = parent.insert(\"rect\", \":first-child\")\n    .attr(\"rx\", node.rx)\n    .attr(\"ry\", node.ry)\n    .attr(\"x\", -bbox.width / 2)\n    .attr(\"y\", -bbox.height / 2)\n    .attr(\"width\", bbox.width)\n    .attr(\"height\", bbox.height);\n\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n\n  return shapeSvg;\n}\n\nfunction ellipse(parent, bbox, node) {\n  var rx = bbox.width / 2;\n  var ry = bbox.height / 2;\n  var shapeSvg = parent.insert(\"ellipse\", \":first-child\")\n    .attr(\"x\", -bbox.width / 2)\n    .attr(\"y\", -bbox.height / 2)\n    .attr(\"rx\", rx)\n    .attr(\"ry\", ry);\n\n  node.intersect = function(point) {\n    return intersectEllipse(node, rx, ry, point);\n  };\n\n  return shapeSvg;\n}\n\nfunction circle(parent, bbox, node) {\n  var r = Math.max(bbox.width, bbox.height) / 2;\n  var shapeSvg = parent.insert(\"circle\", \":first-child\")\n    .attr(\"x\", -bbox.width / 2)\n    .attr(\"y\", -bbox.height / 2)\n    .attr(\"r\", r);\n\n  node.intersect = function(point) {\n    return intersectCircle(node, r, point);\n  };\n\n  return shapeSvg;\n}\n\n// Circumscribe an ellipse for the bounding box with a diamond shape. I derived\n// the function to calculate the diamond shape from:\n// http://mathforum.org/kb/message.jspa?messageID=3750236\nfunction diamond(parent, bbox, node) {\n  var w = (bbox.width * Math.SQRT2) / 2;\n  var h = (bbox.height * Math.SQRT2) / 2;\n  var points = [\n    { x:  0, y: -h },\n    { x: -w, y:  0 },\n    { x:  0, y:  h },\n    { x:  w, y:  0 }\n  ];\n  var shapeSvg = parent.insert(\"polygon\", \":first-child\")\n    .attr(\"points\", points.map(function(p) { return p.x + \",\" + p.y; }).join(\" \"));\n\n  node.intersect = function(p) {\n    return intersectPolygon(node, points, p);\n  };\n\n  return shapeSvg;\n}\n"]},"metadata":{},"sourceType":"script"}