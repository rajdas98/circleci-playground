{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/pages/WorkflowDetails/TopNavButtons.tsx\";\n\nimport React from 'react';\nimport BackButton from '../../components/Button/BackButton';\nimport ButtonFilled from '../../components/Button/ButtonFilled';\nimport ButtonOutline from '../../components/Button/ButtonOutline';\nimport useStyles from './styles';\n\nvar TopNavButtons = function TopNavButtons(_ref) {\n  var isToggled = _ref.isToggled,\n      setIsToggled = _ref.setIsToggled;\n  var classes = useStyles();\n\n  var setFilledButtonState = function setFilledButtonState(buttonName, buttonIcon) {\n    return /*#__PURE__*/React.createElement(ButtonFilled, {\n      styles: {\n        height: '2.2rem'\n      },\n      isPrimary: true,\n      handleClick: function handleClick() {\n        return setIsToggled({\n          isAnalyticsToggled: false,\n          isExportToggled: false,\n          isInfoToggled: false\n        });\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: \"/icons/\".concat(buttonIcon, \".svg\"),\n      alt: \"\".concat(buttonName, \" Icon\"),\n      className: classes.icon,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }\n    }), buttonName);\n  };\n\n  var setButtonOutlinedState = function setButtonOutlinedState(buttonName, buttonIcon, setIsToggleValues) {\n    return /*#__PURE__*/React.createElement(ButtonOutline, {\n      styles: {\n        height: '2.2rem'\n      },\n      isDisabled: false,\n      handleClick: function handleClick() {\n        return setIsToggled(setIsToggleValues);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: \"/icons/\".concat(buttonIcon, \".svg\"),\n      alt: \"\".concat(buttonName, \" Icon\"),\n      className: classes.icon,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }\n    }), buttonName);\n  };\n  /*\n  const AnalyticsButton = () =>\n    isToggled.isAnalyticsToggled\n      ? setFilledButtonState('Analytics', 'show-analytics')\n      : setButtonOutlinedState('Analytics', 'show-analytics', {\n          isAnalyticsToggled: true,\n          isExportToggled: false,\n          isInfoToggled: false,\n        });\n   const ExportButton = () =>\n    isToggled.isExportToggled\n      ? setFilledButtonState('Export', 'export')\n      : setButtonOutlinedState('Export', 'export', {\n          isAnalyticsToggled: false,\n          isExportToggled: true,\n          isInfoToggled: false,\n        });\n  */\n\n\n  var InfoButton = function InfoButton() {\n    return isToggled.isInfoToggled ? setFilledButtonState('Info', 'alignment') : setButtonOutlinedState('Info', 'alignment', {\n      isAnalyticsToggled: false,\n      isExportToggled: false,\n      isInfoToggled: true\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.button,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(BackButton, {\n    isDisabled: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, InfoButton()));\n};\n\nexport default TopNavButtons;","map":{"version":3,"sources":["/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/pages/WorkflowDetails/TopNavButtons.tsx"],"names":["React","BackButton","ButtonFilled","ButtonOutline","useStyles","TopNavButtons","isToggled","setIsToggled","classes","setFilledButtonState","buttonName","buttonIcon","height","isAnalyticsToggled","isExportToggled","isInfoToggled","icon","setButtonOutlinedState","setIsToggleValues","InfoButton","button"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,OAAOC,YAAP,MAAyB,sCAAzB;AACA,OAAOC,aAAP,MAA0B,uCAA1B;AACA,OAAOC,SAAP,MAAsB,UAAtB;;AAaA,IAAMC,aAA8B,GAAG,SAAjCA,aAAiC,OAAiC;AAAA,MAA9BC,SAA8B,QAA9BA,SAA8B;AAAA,MAAnBC,YAAmB,QAAnBA,YAAmB;AACtE,MAAMC,OAAO,GAAGJ,SAAS,EAAzB;;AAEA,MAAMK,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,UAAD,EAAqBC,UAArB,EAA4C;AACvE,wBACE,oBAAC,YAAD;AACE,MAAA,MAAM,EAAE;AAAEC,QAAAA,MAAM,EAAE;AAAV,OADV;AAEE,MAAA,SAAS,MAFX;AAGE,MAAA,WAAW,EAAE;AAAA,eACXL,YAAY,CAAC;AACXM,UAAAA,kBAAkB,EAAE,KADT;AAEXC,UAAAA,eAAe,EAAE,KAFN;AAGXC,UAAAA,aAAa,EAAE;AAHJ,SAAD,CADD;AAAA,OAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAWE;AACE,MAAA,GAAG,mBAAYJ,UAAZ,SADL;AAEE,MAAA,GAAG,YAAKD,UAAL,UAFL;AAGE,MAAA,SAAS,EAAEF,OAAO,CAACQ,IAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXF,EAgBGN,UAhBH,CADF;AAoBD,GArBD;;AAuBA,MAAMO,sBAAsB,GAAG,SAAzBA,sBAAyB,CAC7BP,UAD6B,EAE7BC,UAF6B,EAG7BO,iBAH6B,EAI1B;AACH,wBACE,oBAAC,aAAD;AACE,MAAA,MAAM,EAAE;AAAEN,QAAAA,MAAM,EAAE;AAAV,OADV;AAEE,MAAA,UAAU,EAAE,KAFd;AAGE,MAAA,WAAW,EAAE;AAAA,eAAML,YAAY,CAACW,iBAAD,CAAlB;AAAA,OAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAKE;AACE,MAAA,GAAG,mBAAYP,UAAZ,SADL;AAEE,MAAA,GAAG,YAAKD,UAAL,UAFL;AAGE,MAAA,SAAS,EAAEF,OAAO,CAACQ,IAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,EAUGN,UAVH,CADF;AAcD,GAnBD;AAoBA;;;;;;;;;;;;;;;;;;;;AAmBA,MAAMS,UAAU,GAAG,SAAbA,UAAa;AAAA,WACjBb,SAAS,CAACS,aAAV,GACIN,oBAAoB,CAAC,MAAD,EAAS,WAAT,CADxB,GAEIQ,sBAAsB,CAAC,MAAD,EAAS,WAAT,EAAsB;AAC1CJ,MAAAA,kBAAkB,EAAE,KADsB;AAE1CC,MAAAA,eAAe,EAAE,KAFyB;AAG1CC,MAAAA,aAAa,EAAE;AAH2B,KAAtB,CAHT;AAAA,GAAnB;;AASA,sBACE;AAAK,IAAA,SAAS,EAAEP,OAAO,CAACY,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,UAAU,EAAE,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGGD,UAAU,EAHb,CAJF,CADF;AAYD,CAtFD;;AAwFA,eAAed,aAAf","sourcesContent":["import React from 'react';\nimport BackButton from '../../components/Button/BackButton';\nimport ButtonFilled from '../../components/Button/ButtonFilled';\nimport ButtonOutline from '../../components/Button/ButtonOutline';\nimport useStyles from './styles';\n\ninterface TopNavButtonsProps {\n  isAnalyticsToggled: boolean;\n  isExportToggled: boolean;\n  isInfoToggled: boolean;\n}\n\ninterface Props {\n  isToggled: TopNavButtonsProps;\n  setIsToggled: React.Dispatch<React.SetStateAction<TopNavButtonsProps>>;\n}\n\nconst TopNavButtons: React.FC<Props> = ({ isToggled, setIsToggled }) => {\n  const classes = useStyles();\n\n  const setFilledButtonState = (buttonName: string, buttonIcon: string) => {\n    return (\n      <ButtonFilled\n        styles={{ height: '2.2rem' }}\n        isPrimary\n        handleClick={() =>\n          setIsToggled({\n            isAnalyticsToggled: false,\n            isExportToggled: false,\n            isInfoToggled: false,\n          })\n        }\n      >\n        <img\n          src={`/icons/${buttonIcon}.svg`}\n          alt={`${buttonName} Icon`}\n          className={classes.icon}\n        />\n        {buttonName}\n      </ButtonFilled>\n    );\n  };\n\n  const setButtonOutlinedState = (\n    buttonName: string,\n    buttonIcon: string,\n    setIsToggleValues: TopNavButtonsProps\n  ) => {\n    return (\n      <ButtonOutline\n        styles={{ height: '2.2rem' }}\n        isDisabled={false}\n        handleClick={() => setIsToggled(setIsToggleValues)}\n      >\n        <img\n          src={`/icons/${buttonIcon}.svg`}\n          alt={`${buttonName} Icon`}\n          className={classes.icon}\n        />\n        {buttonName}\n      </ButtonOutline>\n    );\n  };\n  /*\n  const AnalyticsButton = () =>\n    isToggled.isAnalyticsToggled\n      ? setFilledButtonState('Analytics', 'show-analytics')\n      : setButtonOutlinedState('Analytics', 'show-analytics', {\n          isAnalyticsToggled: true,\n          isExportToggled: false,\n          isInfoToggled: false,\n        });\n\n  const ExportButton = () =>\n    isToggled.isExportToggled\n      ? setFilledButtonState('Export', 'export')\n      : setButtonOutlinedState('Export', 'export', {\n          isAnalyticsToggled: false,\n          isExportToggled: true,\n          isInfoToggled: false,\n        });\n*/\n  const InfoButton = () =>\n    isToggled.isInfoToggled\n      ? setFilledButtonState('Info', 'alignment')\n      : setButtonOutlinedState('Info', 'alignment', {\n          isAnalyticsToggled: false,\n          isExportToggled: false,\n          isInfoToggled: true,\n        });\n\n  return (\n    <div className={classes.button}>\n      <div>\n        <BackButton isDisabled={false} />\n      </div>\n      <div>\n        {/* AnalyticsButton() */}\n        {/* ExportButton() */}\n        {InfoButton()}\n      </div>\n    </div>\n  );\n};\n\nexport default TopNavButtons;\n"]},"metadata":{},"sourceType":"module"}