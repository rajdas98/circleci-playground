{"ast":null,"code":"import _objectSpread from \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/views/WorkflowDetails/WorkflowInfo/index.tsx\";\n\nimport { Typography } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport timeDifference from '../../../utils/datesModifier';\nimport useStyles from './styles';\n\nvar WorkflowInfo = function WorkflowInfo(_ref) {\n  var workflow_name = _ref.workflow_name,\n      execution_data = _ref.execution_data,\n      cluster_name = _ref.cluster_name;\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t; // Get selected node data from redux\n\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      duration = _useState2[0],\n      setDuration = _useState2[1];\n\n  var _useState3 = useState({\n    currentRunningNodes: [],\n    executedNodes: []\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      data = _useState4[0],\n      setData = _useState4[1];\n\n  useEffect(function () {\n    setDuration((parseInt(execution_data.finishedAt, 10) - parseInt(execution_data.startedAt, 10)) / 60); // If the Workflow is Running [Data is being received through Subscription]\n    // Set the currently executed node in a local state\n\n    var executedNodes = [];\n    var currentRunningNodes = [];\n\n    for (var _i = 0, _Object$values = Object.values(execution_data.nodes); _i < _Object$values.length; _i++) {\n      var val = _Object$values[_i];\n      if (val.type !== 'StepGroup' && val.phase === 'Running') currentRunningNodes.push(val.name);else if (val.type !== 'StepGroup' && val.phase === 'Succeeded') executedNodes.push(val.name);\n    }\n\n    setData(_objectSpread(_objectSpread({}, data), {}, {\n      currentRunningNodes,\n      executedNodes\n    }));\n  }, [execution_data.nodes, execution_data.phase]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.heightMaintainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.workflowSpacing,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.bold,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }, t('workflowDetailsView.workflowInfo.header'), \":\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }), workflow_name)), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.workflowSpacing,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.heightMaintainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.bold,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, t('workflowDetailsView.workflowInfo.param.state'), \":\"), ' ', execution_data.phase), /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.bold,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, t('workflowDetailsView.workflowInfo.param.startTime'), \":\"), ' ', timeDifference(execution_data.startedAt)), execution_data.phase !== 'Running' ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.bold,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }\n  }, t('workflowDetailsView.workflowInfo.param.endTime'), \":\"), ' ', timeDifference(execution_data.finishedAt)), /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.bold,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  }, t('workflowDetailsView.workflowInfo.param.duration'), \":\"), ' ', \"\".concat(duration.toFixed(1), \" minutes\"))) : /*#__PURE__*/React.createElement(React.Fragment, null), /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.bold,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, t('workflowDetailsView.workflowInfo.param.namespace'), \":\"), ' ', execution_data.namespace))), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.workflowSpacing,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.heightMaintainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }, execution_data.phase === 'Running' ? /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.bold,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 15\n    }\n  }, t('workflowDetailsView.workflowInfo.nodeDetails.curr'), \":\"), ' ', /*#__PURE__*/React.createElement(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 15\n    }\n  }, data.currentRunningNodes.map(function (node) {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: node,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 19\n      }\n    }, node);\n  }))) : /*#__PURE__*/React.createElement(React.Fragment, null), /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.bold,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }, t('workflowDetailsView.workflowInfo.nodeDetails.exec'), \":\"), ' ', data.executedNodes.length ? /*#__PURE__*/React.createElement(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 15\n    }\n  }, data.executedNodes.map(function (node) {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: node,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 19\n      }\n    }, node);\n  })) : /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 15\n    }\n  }, t('workflowDetailsView.workflowInfo.nodeDetails.noExec'))))), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.workflowSpacing,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.heightMaintainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.bold,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }\n  }, t('workflowDetailsView.workflowInfo.cluster'), \":\"), ' ', cluster_name))));\n};\n\nexport default WorkflowInfo;","map":{"version":3,"sources":["/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/views/WorkflowDetails/WorkflowInfo/index.tsx"],"names":["Typography","React","useEffect","useState","useTranslation","timeDifference","useStyles","WorkflowInfo","workflow_name","execution_data","cluster_name","classes","t","duration","setDuration","currentRunningNodes","executedNodes","data","setData","parseInt","finishedAt","startedAt","Object","values","nodes","val","type","phase","push","name","root","heightMaintainer","workflowSpacing","bold","toFixed","namespace","map","node","length"],"mappings":"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","sourcesContent":["import { Typography } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ExecutionData } from '../../../models/graphql/workflowData';\nimport timeDifference from '../../../utils/datesModifier';\nimport useStyles from './styles';\n\ninterface WorkflowInfoProps {\n  workflow_name: string;\n  execution_data: ExecutionData;\n  cluster_name: string;\n}\n\ninterface SidebarState {\n  currentRunningNodes: string[];\n  executedNodes: string[];\n}\n\nconst WorkflowInfo: React.FC<WorkflowInfoProps> = ({\n  workflow_name,\n  execution_data,\n  cluster_name,\n}) => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n  // Get selected node data from redux\n\n  const [duration, setDuration] = useState<number>(0);\n  const [data, setData] = useState<SidebarState>({\n    currentRunningNodes: [],\n    executedNodes: [],\n  });\n\n  useEffect(() => {\n    setDuration(\n      (parseInt(execution_data.finishedAt, 10) -\n        parseInt(execution_data.startedAt, 10)) /\n        60\n    );\n\n    // If the Workflow is Running [Data is being received through Subscription]\n    // Set the currently executed node in a local state\n    const executedNodes: string[] = [];\n    const currentRunningNodes: string[] = [];\n\n    for (const val of Object.values(execution_data.nodes))\n      if (val.type !== 'StepGroup' && val.phase === 'Running')\n        currentRunningNodes.push(val.name);\n      else if (val.type !== 'StepGroup' && val.phase === 'Succeeded')\n        executedNodes.push(val.name);\n\n    setData({\n      ...data,\n      currentRunningNodes,\n      executedNodes,\n    });\n  }, [execution_data.nodes, execution_data.phase]);\n\n  return (\n    <div className={classes.root}>\n      {/* Workflow Information */}\n      <div className={classes.heightMaintainer}>\n        <Typography className={classes.workflowSpacing}>\n          <span className={classes.bold}>\n            {t('workflowDetailsView.workflowInfo.header')}:\n          </span>\n          <br />\n          {workflow_name}\n        </Typography>\n      </div>\n      <hr />\n\n      {/* Workflow Details\n      @param State\n      @param Start Time\n      @param End Time\n      @param Duration\n      @param Namespace */}\n\n      <div className={classes.workflowSpacing}>\n        <div className={classes.heightMaintainer}>\n          <Typography>\n            <span className={classes.bold}>\n              {t('workflowDetailsView.workflowInfo.param.state')}:\n            </span>{' '}\n            {execution_data.phase}\n          </Typography>\n          <Typography>\n            <span className={classes.bold}>\n              {t('workflowDetailsView.workflowInfo.param.startTime')}:\n            </span>{' '}\n            {timeDifference(execution_data.startedAt)}\n          </Typography>\n          {execution_data.phase !== 'Running' ? (\n            <>\n              <Typography>\n                <span className={classes.bold}>\n                  {t('workflowDetailsView.workflowInfo.param.endTime')}:\n                </span>{' '}\n                {timeDifference(execution_data.finishedAt)}\n              </Typography>\n              <Typography>\n                <span className={classes.bold}>\n                  {t('workflowDetailsView.workflowInfo.param.duration')}:\n                </span>{' '}\n                {`${duration.toFixed(1)} minutes`}\n              </Typography>\n            </>\n          ) : (\n            <></>\n          )}\n          <Typography>\n            <span className={classes.bold}>\n              {t('workflowDetailsView.workflowInfo.param.namespace')}:\n            </span>{' '}\n            {execution_data.namespace}\n          </Typography>\n        </div>\n      </div>\n      <hr />\n\n      {/* Workflow Node Details\n      @param Currently Running Node\n      @param Executed Nodes */}\n\n      <div className={classes.workflowSpacing}>\n        <div className={classes.heightMaintainer}>\n          {execution_data.phase === 'Running' ? (\n            <Typography>\n              <span className={classes.bold}>\n                {t('workflowDetailsView.workflowInfo.nodeDetails.curr')}:\n              </span>{' '}\n              <ul>\n                {data.currentRunningNodes.map((node) => (\n                  <li key={node}>{node}</li>\n                ))}\n              </ul>\n            </Typography>\n          ) : (\n            <></>\n          )}\n          <Typography>\n            <span className={classes.bold}>\n              {t('workflowDetailsView.workflowInfo.nodeDetails.exec')}:\n            </span>{' '}\n            {data.executedNodes.length ? (\n              <ul>\n                {data.executedNodes.map((node) => (\n                  <li key={node}>{node}</li>\n                ))}\n              </ul>\n            ) : (\n              <Typography>\n                {t('workflowDetailsView.workflowInfo.nodeDetails.noExec')}\n              </Typography>\n            )}\n          </Typography>\n        </div>\n      </div>\n      <hr />\n\n      {/* Cluster Details\n      @param Cluster Name */}\n\n      <div className={classes.workflowSpacing}>\n        <div className={classes.heightMaintainer}>\n          <Typography>\n            <span className={classes.bold}>\n              {t('workflowDetailsView.workflowInfo.cluster')}:\n            </span>{' '}\n            {cluster_name}\n          </Typography>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default WorkflowInfo;\n"]},"metadata":{},"sourceType":"module"}