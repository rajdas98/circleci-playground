{"ast":null,"code":"/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar d3 = require('d3');\n\nvar tinycolor = require('tinycolor2');\n\nvar supportsPassive = require('has-passive-events');\n\nvar Registry = require('../../registry');\n\nvar Lib = require('../../lib');\n\nvar svgTextUtils = require('../../lib/svg_text_utils');\n\nvar Color = require('../../components/color');\n\nvar Drawing = require('../../components/drawing');\n\nvar Fx = require('../../components/fx');\n\nvar Axes = require('./axes');\n\nvar setCursor = require('../../lib/setcursor');\n\nvar dragElement = require('../../components/dragelement');\n\nvar helpers = require('../../components/dragelement/helpers');\n\nvar selectingOrDrawing = helpers.selectingOrDrawing;\nvar freeMode = helpers.freeMode;\n\nvar FROM_TL = require('../../constants/alignment').FROM_TL;\n\nvar clearGlCanvases = require('../../lib/clear_gl_canvases');\n\nvar redrawReglTraces = require('../../plot_api/subroutines').redrawReglTraces;\n\nvar Plots = require('../plots');\n\nvar getFromId = require('./axis_ids').getFromId;\n\nvar prepSelect = require('./select').prepSelect;\n\nvar clearSelect = require('./select').clearSelect;\n\nvar selectOnClick = require('./select').selectOnClick;\n\nvar scaleZoom = require('./scale_zoom');\n\nvar constants = require('./constants');\n\nvar MINDRAG = constants.MINDRAG;\nvar MINZOOM = constants.MINZOOM; // flag for showing \"doubleclick to zoom out\" only at the beginning\n\nvar SHOWZOOMOUTTIP = true; // dragBox: create an element to drag one or more axis ends\n// inputs:\n//      plotinfo - which subplot are we making dragboxes on?\n//      x,y,w,h - left, top, width, height of the box\n//      ns - how does this drag the vertical axis?\n//          'n' - top only\n//          's' - bottom only\n//          'ns' - top and bottom together, difference unchanged\n//      ew - same for horizontal axis\n\nfunction makeDragBox(gd, plotinfo, x, y, w, h, ns, ew) {\n  // mouseDown stores ms of first mousedown event in the last\n  // `gd._context.doubleClickDelay` ms on the drag bars\n  // numClicks stores how many mousedowns have been seen\n  // within `gd._context.doubleClickDelay` so we can check for click or doubleclick events\n  // dragged stores whether a drag has occurred, so we don't have to\n  // redraw unnecessarily, ie if no move bigger than MINDRAG or MINZOOM px\n  var zoomlayer = gd._fullLayout._zoomlayer;\n  var isMainDrag = ns + ew === 'nsew';\n  var singleEnd = (ns + ew).length === 1; // main subplot x and y (i.e. found in plotinfo - the main ones)\n\n  var xa0, ya0; // {ax._id: ax} hash objects\n\n  var xaHash, yaHash; // xaHash/yaHash values (arrays)\n\n  var xaxes, yaxes; // main axis offsets\n\n  var xs, ys; // main axis lengths\n\n  var pw, ph; // contains keys 'xaHash', 'yaHash', 'xaxes', and 'yaxes'\n  // which are the x/y {ax._id: ax} hash objects and their values\n  // for linked axis relative to this subplot\n\n  var links; // similar to `links` but for matching axes\n\n  var matches; // set to ew/ns val when active, set to '' when inactive\n\n  var xActive, yActive; // are all axes in this subplot are fixed?\n\n  var allFixedRanges; // do we need to edit x/y ranges?\n\n  var editX, editY; // graph-wide optimization flags\n\n  var hasScatterGl, hasSplom, hasSVG; // collected changes to be made to the plot by relayout at the end\n\n  var updates;\n\n  function recomputeAxisLists() {\n    xa0 = plotinfo.xaxis;\n    ya0 = plotinfo.yaxis;\n    pw = xa0._length;\n    ph = ya0._length;\n    xs = xa0._offset;\n    ys = ya0._offset;\n    xaHash = {};\n    xaHash[xa0._id] = xa0;\n    yaHash = {};\n    yaHash[ya0._id] = ya0; // if we're dragging two axes at once, also drag overlays\n\n    if (ns && ew) {\n      var overlays = plotinfo.overlays;\n\n      for (var i = 0; i < overlays.length; i++) {\n        var xa = overlays[i].xaxis;\n        xaHash[xa._id] = xa;\n        var ya = overlays[i].yaxis;\n        yaHash[ya._id] = ya;\n      }\n    }\n\n    xaxes = hashValues(xaHash);\n    yaxes = hashValues(yaHash);\n    xActive = isDirectionActive(xaxes, ew);\n    yActive = isDirectionActive(yaxes, ns);\n    allFixedRanges = !yActive && !xActive;\n    links = calcLinks(gd, gd._fullLayout._axisConstraintGroups, xaHash, yaHash);\n    matches = calcLinks(gd, gd._fullLayout._axisMatchGroups, xaHash, yaHash);\n    editX = ew || links.isSubplotConstrained || matches.isSubplotConstrained;\n    editY = ns || links.isSubplotConstrained || matches.isSubplotConstrained;\n    var fullLayout = gd._fullLayout;\n    hasScatterGl = fullLayout._has('scattergl');\n    hasSplom = fullLayout._has('splom');\n    hasSVG = fullLayout._has('svg');\n  }\n\n  recomputeAxisLists();\n  var cursor = getDragCursor(yActive + xActive, gd._fullLayout.dragmode, isMainDrag);\n  var dragger = makeRectDragger(plotinfo, ns + ew + 'drag', cursor, x, y, w, h); // still need to make the element if the axes are disabled\n  // but nuke its events (except for maindrag which needs them for hover)\n  // and stop there\n\n  if (allFixedRanges && !isMainDrag) {\n    dragger.onmousedown = null;\n    dragger.style.pointerEvents = 'none';\n    return dragger;\n  }\n\n  var dragOptions = {\n    element: dragger,\n    gd: gd,\n    plotinfo: plotinfo\n  };\n\n  dragOptions.prepFn = function (e, startX, startY) {\n    var dragModePrev = dragOptions.dragmode;\n    var dragModeNow = gd._fullLayout.dragmode;\n\n    if (dragModeNow !== dragModePrev) {\n      dragOptions.dragmode = dragModeNow;\n    }\n\n    recomputeAxisLists();\n\n    if (!allFixedRanges) {\n      if (isMainDrag) {\n        // main dragger handles all drag modes, and changes\n        // to pan (or to zoom if it already is pan) on shift\n        if (e.shiftKey) {\n          if (dragModeNow === 'pan') dragModeNow = 'zoom';else if (!selectingOrDrawing(dragModeNow)) dragModeNow = 'pan';\n        } else if (e.ctrlKey) {\n          dragModeNow = 'pan';\n        }\n      } else {\n        // all other draggers just pan\n        dragModeNow = 'pan';\n      }\n    }\n\n    if (freeMode(dragModeNow)) dragOptions.minDrag = 1;else dragOptions.minDrag = undefined;\n\n    if (selectingOrDrawing(dragModeNow)) {\n      dragOptions.xaxes = xaxes;\n      dragOptions.yaxes = yaxes; // this attaches moveFn, clickFn, doneFn on dragOptions\n\n      prepSelect(e, startX, startY, dragOptions, dragModeNow);\n    } else {\n      dragOptions.clickFn = clickFn;\n\n      if (selectingOrDrawing(dragModePrev)) {\n        // TODO Fix potential bug\n        // Note: clearing / resetting selection state only happens, when user\n        // triggers at least one interaction in pan/zoom mode. Otherwise, the\n        // select/lasso outlines are deleted (in plots.js.cleanPlot) but the selection\n        // cache isn't cleared. So when the user switches back to select/lasso and\n        // 'adds to a selection' with Shift, the \"old\", seemingly removed outlines\n        // are redrawn again because the selection cache still holds their coordinates.\n        // However, this isn't easily solved, since plots.js would need\n        // to have a reference to the dragOptions object (which holds the\n        // selection cache).\n        clearAndResetSelect();\n      }\n\n      if (!allFixedRanges) {\n        if (dragModeNow === 'zoom') {\n          dragOptions.moveFn = zoomMove;\n          dragOptions.doneFn = zoomDone; // zoomMove takes care of the threshold, but we need to\n          // minimize this so that constrained zoom boxes will flip\n          // orientation at the right place\n\n          dragOptions.minDrag = 1;\n          zoomPrep(e, startX, startY);\n        } else if (dragModeNow === 'pan') {\n          dragOptions.moveFn = plotDrag;\n          dragOptions.doneFn = dragTail;\n        }\n      }\n    }\n\n    gd._fullLayout._redrag = function () {\n      var dragDataNow = gd._dragdata;\n\n      if (dragDataNow && dragDataNow.element === dragger) {\n        var dragModeNow = gd._fullLayout.dragmode;\n\n        if (!selectingOrDrawing(dragModeNow)) {\n          recomputeAxisLists();\n          updateSubplots([0, 0, pw, ph]);\n          dragOptions.moveFn(dragDataNow.dx, dragDataNow.dy);\n        } // TODO should we try to \"re-select\" under select/lasso modes?\n        // probably best to wait for https://github.com/plotly/plotly.js/issues/1851\n\n      }\n    };\n  };\n\n  function clearAndResetSelect() {\n    // clear selection polygon cache (if any)\n    dragOptions.plotinfo.selection = false; // clear selection outlines\n\n    clearSelect(gd);\n  }\n\n  function clickFn(numClicks, evt) {\n    var gd = dragOptions.gd;\n\n    if (gd._fullLayout._activeShapeIndex >= 0) {\n      gd._fullLayout._deactivateShape(gd);\n\n      return;\n    }\n\n    var clickmode = gd._fullLayout.clickmode;\n    removeZoombox(gd);\n    if (numClicks === 2 && !singleEnd) doubleClick();\n\n    if (isMainDrag) {\n      if (clickmode.indexOf('select') > -1) {\n        selectOnClick(evt, gd, xaxes, yaxes, plotinfo.id, dragOptions);\n      }\n\n      if (clickmode.indexOf('event') > -1) {\n        Fx.click(gd, evt, plotinfo.id);\n      }\n    } else if (numClicks === 1 && singleEnd) {\n      var ax = ns ? ya0 : xa0;\n      var end = ns === 's' || ew === 'w' ? 0 : 1;\n      var attrStr = ax._name + '.range[' + end + ']';\n      var initialText = getEndText(ax, end);\n      var hAlign = 'left';\n      var vAlign = 'middle';\n      if (ax.fixedrange) return;\n\n      if (ns) {\n        vAlign = ns === 'n' ? 'top' : 'bottom';\n        if (ax.side === 'right') hAlign = 'right';\n      } else if (ew === 'e') hAlign = 'right';\n\n      if (gd._context.showAxisRangeEntryBoxes) {\n        d3.select(dragger).call(svgTextUtils.makeEditable, {\n          gd: gd,\n          immediate: true,\n          background: gd._fullLayout.paper_bgcolor,\n          text: String(initialText),\n          fill: ax.tickfont ? ax.tickfont.color : '#444',\n          horizontalAlign: hAlign,\n          verticalAlign: vAlign\n        }).on('edit', function (text) {\n          var v = ax.d2r(text);\n\n          if (v !== undefined) {\n            Registry.call('_guiRelayout', gd, attrStr, v);\n          }\n        });\n      }\n    }\n  }\n\n  dragElement.init(dragOptions); // x/y px position at start of drag\n\n  var x0, y0; // bbox object of the zoombox\n\n  var box; // luminance of bg behind zoombox\n\n  var lum; // zoombox path outline\n\n  var path0; // is zoombox dimmed (during drag)\n\n  var dimmed; // 'x'-only, 'y' or 'xy' zooming\n\n  var zoomMode; // zoombox d3 selection\n\n  var zb; // zoombox corner d3 selection\n\n  var corners; // zoom takes over minDrag, so it also has to take over gd._dragged\n\n  var zoomDragged;\n\n  function zoomPrep(e, startX, startY) {\n    var dragBBox = dragger.getBoundingClientRect();\n    x0 = startX - dragBBox.left;\n    y0 = startY - dragBBox.top;\n    box = {\n      l: x0,\n      r: x0,\n      w: 0,\n      t: y0,\n      b: y0,\n      h: 0\n    };\n    lum = gd._hmpixcount ? gd._hmlumcount / gd._hmpixcount : tinycolor(gd._fullLayout.plot_bgcolor).getLuminance();\n    path0 = 'M0,0H' + pw + 'V' + ph + 'H0V0';\n    dimmed = false;\n    zoomMode = 'xy';\n    zoomDragged = false;\n    zb = makeZoombox(zoomlayer, lum, xs, ys, path0);\n    corners = makeCorners(zoomlayer, xs, ys);\n  }\n\n  function zoomMove(dx0, dy0) {\n    if (gd._transitioningWithDuration) {\n      return false;\n    }\n\n    var x1 = Math.max(0, Math.min(pw, dx0 + x0));\n    var y1 = Math.max(0, Math.min(ph, dy0 + y0));\n    var dx = Math.abs(x1 - x0);\n    var dy = Math.abs(y1 - y0);\n    box.l = Math.min(x0, x1);\n    box.r = Math.max(x0, x1);\n    box.t = Math.min(y0, y1);\n    box.b = Math.max(y0, y1);\n\n    function noZoom() {\n      zoomMode = '';\n      box.r = box.l;\n      box.t = box.b;\n      corners.attr('d', 'M0,0Z');\n    }\n\n    if (links.isSubplotConstrained) {\n      if (dx > MINZOOM || dy > MINZOOM) {\n        zoomMode = 'xy';\n\n        if (dx / pw > dy / ph) {\n          dy = dx * ph / pw;\n          if (y0 > y1) box.t = y0 - dy;else box.b = y0 + dy;\n        } else {\n          dx = dy * pw / ph;\n          if (x0 > x1) box.l = x0 - dx;else box.r = x0 + dx;\n        }\n\n        corners.attr('d', xyCorners(box));\n      } else {\n        noZoom();\n      }\n    } else if (matches.isSubplotConstrained) {\n      if (dx > MINZOOM || dy > MINZOOM) {\n        zoomMode = 'xy';\n        var r0 = Math.min(box.l / pw, (ph - box.b) / ph);\n        var r1 = Math.max(box.r / pw, (ph - box.t) / ph);\n        box.l = r0 * pw;\n        box.r = r1 * pw;\n        box.b = (1 - r0) * ph;\n        box.t = (1 - r1) * ph;\n        corners.attr('d', xyCorners(box));\n      } else {\n        noZoom();\n      }\n    } else if (!yActive || dy < Math.min(Math.max(dx * 0.6, MINDRAG), MINZOOM)) {\n      // look for small drags in one direction or the other,\n      // and only drag the other axis\n      if (dx < MINDRAG || !xActive) {\n        noZoom();\n      } else {\n        box.t = 0;\n        box.b = ph;\n        zoomMode = 'x';\n        corners.attr('d', xCorners(box, y0));\n      }\n    } else if (!xActive || dx < Math.min(dy * 0.6, MINZOOM)) {\n      box.l = 0;\n      box.r = pw;\n      zoomMode = 'y';\n      corners.attr('d', yCorners(box, x0));\n    } else {\n      zoomMode = 'xy';\n      corners.attr('d', xyCorners(box));\n    }\n\n    box.w = box.r - box.l;\n    box.h = box.b - box.t;\n    if (zoomMode) zoomDragged = true;\n    gd._dragged = zoomDragged;\n    updateZoombox(zb, corners, box, path0, dimmed, lum);\n    computeZoomUpdates();\n    gd.emit('plotly_relayouting', updates);\n    dimmed = true;\n  }\n\n  function computeZoomUpdates() {\n    updates = {}; // TODO: edit linked axes in zoomAxRanges and in dragTail\n\n    if (zoomMode === 'xy' || zoomMode === 'x') {\n      zoomAxRanges(xaxes, box.l / pw, box.r / pw, updates, links.xaxes);\n      updateMatchedAxRange('x', updates);\n    }\n\n    if (zoomMode === 'xy' || zoomMode === 'y') {\n      zoomAxRanges(yaxes, (ph - box.b) / ph, (ph - box.t) / ph, updates, links.yaxes);\n      updateMatchedAxRange('y', updates);\n    }\n  }\n\n  function zoomDone() {\n    computeZoomUpdates();\n    removeZoombox(gd);\n    dragTail();\n    showDoubleClickNotifier(gd);\n  } // scroll zoom, on all draggers except corners\n\n\n  var scrollViewBox = [0, 0, pw, ph]; // wait a little after scrolling before redrawing\n\n  var redrawTimer = null;\n  var REDRAWDELAY = constants.REDRAWDELAY;\n  var mainplot = plotinfo.mainplot ? gd._fullLayout._plots[plotinfo.mainplot] : plotinfo;\n\n  function zoomWheel(e) {\n    // deactivate mousewheel scrolling on embedded graphs\n    // devs can override this with layout._enablescrollzoom,\n    // but _ ensures this setting won't leave their page\n    if (!gd._context._scrollZoom.cartesian && !gd._fullLayout._enablescrollzoom) {\n      return;\n    }\n\n    clearAndResetSelect(); // If a transition is in progress, then disable any behavior:\n\n    if (gd._transitioningWithDuration) {\n      e.preventDefault();\n      e.stopPropagation();\n      return;\n    }\n\n    recomputeAxisLists();\n    clearTimeout(redrawTimer);\n    var wheelDelta = -e.deltaY;\n    if (!isFinite(wheelDelta)) wheelDelta = e.wheelDelta / 10;\n\n    if (!isFinite(wheelDelta)) {\n      Lib.log('Did not find wheel motion attributes: ', e);\n      return;\n    }\n\n    var zoom = Math.exp(-Math.min(Math.max(wheelDelta, -20), 20) / 200);\n    var gbb = mainplot.draglayer.select('.nsewdrag').node().getBoundingClientRect();\n    var xfrac = (e.clientX - gbb.left) / gbb.width;\n    var yfrac = (gbb.bottom - e.clientY) / gbb.height;\n    var i;\n\n    function zoomWheelOneAxis(ax, centerFraction, zoom) {\n      if (ax.fixedrange) return;\n      var axRange = Lib.simpleMap(ax.range, ax.r2l);\n      var v0 = axRange[0] + (axRange[1] - axRange[0]) * centerFraction;\n\n      function doZoom(v) {\n        return ax.l2r(v0 + (v - v0) * zoom);\n      }\n\n      ax.range = axRange.map(doZoom);\n    }\n\n    if (editX) {\n      // if we're only zooming this axis because of constraints,\n      // zoom it about the center\n      if (!ew) xfrac = 0.5;\n\n      for (i = 0; i < xaxes.length; i++) {\n        zoomWheelOneAxis(xaxes[i], xfrac, zoom);\n      }\n\n      updateMatchedAxRange('x');\n      scrollViewBox[2] *= zoom;\n      scrollViewBox[0] += scrollViewBox[2] * xfrac * (1 / zoom - 1);\n    }\n\n    if (editY) {\n      if (!ns) yfrac = 0.5;\n\n      for (i = 0; i < yaxes.length; i++) {\n        zoomWheelOneAxis(yaxes[i], yfrac, zoom);\n      }\n\n      updateMatchedAxRange('y');\n      scrollViewBox[3] *= zoom;\n      scrollViewBox[1] += scrollViewBox[3] * (1 - yfrac) * (1 / zoom - 1);\n    } // viewbox redraw at first\n\n\n    updateSubplots(scrollViewBox);\n    ticksAndAnnotations();\n    gd.emit('plotly_relayouting', updates); // then replot after a delay to make sure\n    // no more scrolling is coming\n\n    redrawTimer = setTimeout(function () {\n      scrollViewBox = [0, 0, pw, ph];\n      dragTail();\n    }, REDRAWDELAY);\n    e.preventDefault();\n    return;\n  } // everything but the corners gets wheel zoom\n\n\n  if (ns.length * ew.length !== 1) {\n    attachWheelEventHandler(dragger, zoomWheel);\n  } // plotDrag: move the plot in response to a drag\n\n\n  function plotDrag(dx, dy) {\n    // If a transition is in progress, then disable any behavior:\n    if (gd._transitioningWithDuration) {\n      return;\n    } // prevent axis drawing from monkeying with margins until we're done\n\n\n    gd._fullLayout._replotting = true;\n\n    if (xActive === 'ew' || yActive === 'ns') {\n      if (xActive) {\n        dragAxList(xaxes, dx);\n        updateMatchedAxRange('x');\n      }\n\n      if (yActive) {\n        dragAxList(yaxes, dy);\n        updateMatchedAxRange('y');\n      }\n\n      updateSubplots([xActive ? -dx : 0, yActive ? -dy : 0, pw, ph]);\n      ticksAndAnnotations();\n      gd.emit('plotly_relayouting', updates);\n      return;\n    } // dz: set a new value for one end (0 or 1) of an axis array axArray,\n    // and return a pixel shift for that end for the viewbox\n    // based on pixel drag distance d\n    // TODO: this makes (generally non-fatal) errors when you get\n    // near floating point limits\n\n\n    function dz(axArray, end, d) {\n      var otherEnd = 1 - end;\n      var movedAx;\n      var newLinearizedEnd;\n\n      for (var i = 0; i < axArray.length; i++) {\n        var axi = axArray[i];\n        if (axi.fixedrange) continue;\n        movedAx = axi;\n        newLinearizedEnd = axi._rl[otherEnd] + (axi._rl[end] - axi._rl[otherEnd]) / dZoom(d / axi._length);\n        var newEnd = axi.l2r(newLinearizedEnd); // if l2r comes back false or undefined, it means we've dragged off\n        // the end of valid ranges - so stop.\n\n        if (newEnd !== false && newEnd !== undefined) axi.range[end] = newEnd;\n      }\n\n      return movedAx._length * (movedAx._rl[end] - newLinearizedEnd) / (movedAx._rl[end] - movedAx._rl[otherEnd]);\n    }\n\n    if (links.isSubplotConstrained && xActive && yActive) {\n      // dragging a corner of a constrained subplot:\n      // respect the fixed corner, but harmonize dx and dy\n      var dxySign = xActive === 'w' === (yActive === 'n') ? 1 : -1;\n      var dxyFraction = (dx / pw + dxySign * dy / ph) / 2;\n      dx = dxyFraction * pw;\n      dy = dxySign * dxyFraction * ph;\n    }\n\n    if (xActive === 'w') dx = dz(xaxes, 0, dx);else if (xActive === 'e') dx = dz(xaxes, 1, -dx);else if (!xActive) dx = 0;\n    if (yActive === 'n') dy = dz(yaxes, 1, dy);else if (yActive === 's') dy = dz(yaxes, 0, -dy);else if (!yActive) dy = 0;\n    var xStart = xActive === 'w' ? dx : 0;\n    var yStart = yActive === 'n' ? dy : 0;\n\n    if (links.isSubplotConstrained) {\n      var i;\n\n      if (!xActive && yActive.length === 1) {\n        // dragging one end of the y axis of a constrained subplot\n        // scale the other axis the same about its middle\n        for (i = 0; i < xaxes.length; i++) {\n          xaxes[i].range = xaxes[i]._r.slice();\n          scaleZoom(xaxes[i], 1 - dy / ph);\n        }\n\n        dx = dy * pw / ph;\n        xStart = dx / 2;\n      }\n\n      if (!yActive && xActive.length === 1) {\n        for (i = 0; i < yaxes.length; i++) {\n          yaxes[i].range = yaxes[i]._r.slice();\n          scaleZoom(yaxes[i], 1 - dx / pw);\n        }\n\n        dy = dx * ph / pw;\n        yStart = dy / 2;\n      }\n    }\n\n    updateMatchedAxRange('x');\n    updateMatchedAxRange('y');\n    updateSubplots([xStart, yStart, pw - dx, ph - dy]);\n    ticksAndAnnotations();\n    gd.emit('plotly_relayouting', updates);\n  }\n\n  function updateMatchedAxRange(axLetter, out) {\n    var matchedAxes = matches.isSubplotConstrained ? {\n      x: yaxes,\n      y: xaxes\n    }[axLetter] : matches[axLetter + 'axes'];\n    var constrainedAxes = matches.isSubplotConstrained ? {\n      x: xaxes,\n      y: yaxes\n    }[axLetter] : [];\n\n    for (var i = 0; i < matchedAxes.length; i++) {\n      var ax = matchedAxes[i];\n      var axId = ax._id;\n      var axId2 = matches.xLinks[axId] || matches.yLinks[axId];\n      var ax2 = constrainedAxes[0] || xaHash[axId2] || yaHash[axId2];\n\n      if (ax2) {\n        if (out) {\n          // zoombox case - don't mutate 'range', just add keys in 'updates'\n          out[ax._name + '.range[0]'] = out[ax2._name + '.range[0]'];\n          out[ax._name + '.range[1]'] = out[ax2._name + '.range[1]'];\n        } else {\n          ax.range = ax2.range.slice();\n        }\n      }\n    }\n  } // Draw ticks and annotations (and other components) when ranges change.\n  // Also records the ranges that have changed for use by update at the end.\n\n\n  function ticksAndAnnotations() {\n    var activeAxIds = [];\n    var i;\n\n    function pushActiveAxIds(axList) {\n      for (i = 0; i < axList.length; i++) {\n        if (!axList[i].fixedrange) activeAxIds.push(axList[i]._id);\n      }\n    }\n\n    if (editX) {\n      pushActiveAxIds(xaxes);\n      pushActiveAxIds(links.xaxes);\n      pushActiveAxIds(matches.xaxes);\n    }\n\n    if (editY) {\n      pushActiveAxIds(yaxes);\n      pushActiveAxIds(links.yaxes);\n      pushActiveAxIds(matches.yaxes);\n    }\n\n    updates = {};\n\n    for (i = 0; i < activeAxIds.length; i++) {\n      var axId = activeAxIds[i];\n      var ax = getFromId(gd, axId);\n      Axes.drawOne(gd, ax, {\n        skipTitle: true\n      });\n      updates[ax._name + '.range[0]'] = ax.range[0];\n      updates[ax._name + '.range[1]'] = ax.range[1];\n    }\n\n    Axes.redrawComponents(gd, activeAxIds);\n  }\n\n  function doubleClick() {\n    if (gd._transitioningWithDuration) return;\n    var doubleClickConfig = gd._context.doubleClick;\n    var axList = [];\n    if (xActive) axList = axList.concat(xaxes);\n    if (yActive) axList = axList.concat(yaxes);\n    if (matches.xaxes) axList = axList.concat(matches.xaxes);\n    if (matches.yaxes) axList = axList.concat(matches.yaxes);\n    var attrs = {};\n    var ax, i, rangeInitial; // For reset+autosize mode:\n    // If *any* of the main axes is not at its initial range\n    // (or autoranged, if we have no initial range, to match the logic in\n    // doubleClickConfig === 'reset' below), we reset.\n    // If they are *all* at their initial ranges, then we autosize.\n\n    if (doubleClickConfig === 'reset+autosize') {\n      doubleClickConfig = 'autosize';\n\n      for (i = 0; i < axList.length; i++) {\n        ax = axList[i];\n\n        if (ax._rangeInitial && (ax.range[0] !== ax._rangeInitial[0] || ax.range[1] !== ax._rangeInitial[1]) || !ax._rangeInitial && !ax.autorange) {\n          doubleClickConfig = 'reset';\n          break;\n        }\n      }\n    }\n\n    if (doubleClickConfig === 'autosize') {\n      // don't set the linked axes here, so relayout marks them as shrinkable\n      // and we autosize just to the requested axis/axes\n      for (i = 0; i < axList.length; i++) {\n        ax = axList[i];\n        if (!ax.fixedrange) attrs[ax._name + '.autorange'] = true;\n      }\n    } else if (doubleClickConfig === 'reset') {\n      // when we're resetting, reset all linked axes too, so we get back\n      // to the fully-auto-with-constraints situation\n      if (xActive || links.isSubplotConstrained) axList = axList.concat(links.xaxes);\n      if (yActive && !links.isSubplotConstrained) axList = axList.concat(links.yaxes);\n\n      if (links.isSubplotConstrained) {\n        if (!xActive) axList = axList.concat(xaxes);else if (!yActive) axList = axList.concat(yaxes);\n      }\n\n      for (i = 0; i < axList.length; i++) {\n        ax = axList[i];\n\n        if (!ax.fixedrange) {\n          if (!ax._rangeInitial) {\n            attrs[ax._name + '.autorange'] = true;\n          } else {\n            rangeInitial = ax._rangeInitial;\n            attrs[ax._name + '.range[0]'] = rangeInitial[0];\n            attrs[ax._name + '.range[1]'] = rangeInitial[1];\n          }\n        }\n      }\n    }\n\n    gd.emit('plotly_doubleclick', null);\n    Registry.call('_guiRelayout', gd, attrs);\n  } // dragTail - finish a drag event with a redraw\n\n\n  function dragTail() {\n    // put the subplot viewboxes back to default (Because we're going to)\n    // be repositioning the data in the relayout. But DON'T call\n    // ticksAndAnnotations again - it's unnecessary and would overwrite `updates`\n    updateSubplots([0, 0, pw, ph]); // since we may have been redrawing some things during the drag, we may have\n    // accumulated MathJax promises - wait for them before we relayout.\n\n    Lib.syncOrAsync([Plots.previousPromises, function () {\n      gd._fullLayout._replotting = false;\n      Registry.call('_guiRelayout', gd, updates);\n    }], gd);\n  } // updateSubplots - find all plot viewboxes that should be\n  // affected by this drag, and update them. look for all plots\n  // sharing an affected axis (including the one being dragged),\n  // includes also scattergl and splom logic.\n\n\n  function updateSubplots(viewBox) {\n    var fullLayout = gd._fullLayout;\n    var plotinfos = fullLayout._plots;\n    var subplots = fullLayout._subplots.cartesian;\n    var i, sp, xa, ya;\n\n    if (hasSplom) {\n      Registry.subplotsRegistry.splom.drag(gd);\n    }\n\n    if (hasScatterGl) {\n      for (i = 0; i < subplots.length; i++) {\n        sp = plotinfos[subplots[i]];\n        xa = sp.xaxis;\n        ya = sp.yaxis;\n\n        if (sp._scene) {\n          var xrng = Lib.simpleMap(xa.range, xa.r2l);\n          var yrng = Lib.simpleMap(ya.range, ya.r2l);\n\n          sp._scene.update({\n            range: [xrng[0], yrng[0], xrng[1], yrng[1]]\n          });\n        }\n      }\n    }\n\n    if (hasSplom || hasScatterGl) {\n      clearGlCanvases(gd);\n      redrawReglTraces(gd);\n    }\n\n    if (hasSVG) {\n      var xScaleFactor = viewBox[2] / xa0._length;\n      var yScaleFactor = viewBox[3] / ya0._length;\n\n      for (i = 0; i < subplots.length; i++) {\n        sp = plotinfos[subplots[i]];\n        xa = sp.xaxis;\n        ya = sp.yaxis;\n        var editX2 = editX && !xa.fixedrange && xaHash[xa._id];\n        var editY2 = editY && !ya.fixedrange && yaHash[ya._id];\n        var xScaleFactor2, yScaleFactor2;\n        var clipDx, clipDy;\n\n        if (editX2) {\n          xScaleFactor2 = xScaleFactor;\n          clipDx = ew ? viewBox[0] : getShift(xa, xScaleFactor2);\n        } else if (matches.xaHash[xa._id]) {\n          xScaleFactor2 = xScaleFactor;\n          clipDx = viewBox[0] * xa._length / xa0._length;\n        } else if (matches.yaHash[xa._id]) {\n          xScaleFactor2 = yScaleFactor;\n          clipDx = yActive === 'ns' ? -viewBox[1] * xa._length / ya0._length : getShift(xa, xScaleFactor2, {\n            n: 'top',\n            s: 'bottom'\n          }[yActive]);\n        } else {\n          xScaleFactor2 = getLinkedScaleFactor(xa, xScaleFactor, yScaleFactor);\n          clipDx = scaleAndGetShift(xa, xScaleFactor2);\n        }\n\n        if (editY2) {\n          yScaleFactor2 = yScaleFactor;\n          clipDy = ns ? viewBox[1] : getShift(ya, yScaleFactor2);\n        } else if (matches.yaHash[ya._id]) {\n          yScaleFactor2 = yScaleFactor;\n          clipDy = viewBox[1] * ya._length / ya0._length;\n        } else if (matches.xaHash[ya._id]) {\n          yScaleFactor2 = xScaleFactor;\n          clipDy = xActive === 'ew' ? -viewBox[0] * ya._length / xa0._length : getShift(ya, yScaleFactor2, {\n            e: 'right',\n            w: 'left'\n          }[xActive]);\n        } else {\n          yScaleFactor2 = getLinkedScaleFactor(ya, xScaleFactor, yScaleFactor);\n          clipDy = scaleAndGetShift(ya, yScaleFactor2);\n        } // don't scale at all if neither axis is scalable here\n\n\n        if (!xScaleFactor2 && !yScaleFactor2) {\n          continue;\n        } // but if only one is, reset the other axis scaling\n\n\n        if (!xScaleFactor2) xScaleFactor2 = 1;\n        if (!yScaleFactor2) yScaleFactor2 = 1;\n        var plotDx = xa._offset - clipDx / xScaleFactor2;\n        var plotDy = ya._offset - clipDy / yScaleFactor2; // TODO could be more efficient here:\n        // setTranslate and setScale do a lot of extra work\n        // when working independently, should perhaps combine\n        // them into a single routine.\n\n        sp.clipRect.call(Drawing.setTranslate, clipDx, clipDy).call(Drawing.setScale, xScaleFactor2, yScaleFactor2);\n        sp.plot.call(Drawing.setTranslate, plotDx, plotDy).call(Drawing.setScale, 1 / xScaleFactor2, 1 / yScaleFactor2); // apply an inverse scale to individual points to counteract\n        // the scale of the trace group.\n        // apply only when scale changes, as adjusting the scale of\n        // all the points can be expansive.\n\n        if (xScaleFactor2 !== sp.xScaleFactor || yScaleFactor2 !== sp.yScaleFactor) {\n          Drawing.setPointGroupScale(sp.zoomScalePts, xScaleFactor2, yScaleFactor2);\n          Drawing.setTextPointsScale(sp.zoomScaleTxt, xScaleFactor2, yScaleFactor2);\n        }\n\n        Drawing.hideOutsideRangePoints(sp.clipOnAxisFalseTraces, sp); // update x/y scaleFactor stash\n\n        sp.xScaleFactor = xScaleFactor2;\n        sp.yScaleFactor = yScaleFactor2;\n      }\n    }\n  } // Find the appropriate scaling for this axis, if it's linked to the\n  // dragged axes by constraints. 0 is special, it means this axis shouldn't\n  // ever be scaled (will be converted to 1 if the other axis is scaled)\n\n\n  function getLinkedScaleFactor(ax, xScaleFactor, yScaleFactor) {\n    if (ax.fixedrange) return 0;\n\n    if (editX && links.xaHash[ax._id]) {\n      return xScaleFactor;\n    }\n\n    if (editY && (links.isSubplotConstrained ? links.xaHash : links.yaHash)[ax._id]) {\n      return yScaleFactor;\n    }\n\n    return 0;\n  }\n\n  function scaleAndGetShift(ax, scaleFactor) {\n    if (scaleFactor) {\n      ax.range = ax._r.slice();\n      scaleZoom(ax, scaleFactor);\n      return getShift(ax, scaleFactor);\n    }\n\n    return 0;\n  }\n\n  function getShift(ax, scaleFactor, from) {\n    return ax._length * (1 - scaleFactor) * FROM_TL[from || ax.constraintoward || 'middle'];\n  }\n\n  return dragger;\n}\n\nfunction makeDragger(plotinfo, nodeName, dragClass, cursor) {\n  var dragger3 = Lib.ensureSingle(plotinfo.draglayer, nodeName, dragClass, function (s) {\n    s.classed('drag', true).style({\n      fill: 'transparent',\n      'stroke-width': 0\n    }).attr('data-subplot', plotinfo.id);\n  });\n  dragger3.call(setCursor, cursor);\n  return dragger3.node();\n}\n\nfunction makeRectDragger(plotinfo, dragClass, cursor, x, y, w, h) {\n  var dragger = makeDragger(plotinfo, 'rect', dragClass, cursor);\n  d3.select(dragger).call(Drawing.setRect, x, y, w, h);\n  return dragger;\n}\n\nfunction isDirectionActive(axList, activeVal) {\n  for (var i = 0; i < axList.length; i++) {\n    if (!axList[i].fixedrange) return activeVal;\n  }\n\n  return '';\n}\n\nfunction getEndText(ax, end) {\n  var initialVal = ax.range[end];\n  var diff = Math.abs(initialVal - ax.range[1 - end]);\n  var dig; // TODO: this should basically be ax.r2d but we're doing extra\n  // rounding here... can we clean up at all?\n\n  if (ax.type === 'date') {\n    return initialVal;\n  } else if (ax.type === 'log') {\n    dig = Math.ceil(Math.max(0, -Math.log(diff) / Math.LN10)) + 3;\n    return d3.format('.' + dig + 'g')(Math.pow(10, initialVal));\n  } else {\n    // linear numeric (or category... but just show numbers here)\n    dig = Math.floor(Math.log(Math.abs(initialVal)) / Math.LN10) - Math.floor(Math.log(diff) / Math.LN10) + 4;\n    return d3.format('.' + String(dig) + 'g')(initialVal);\n  }\n}\n\nfunction zoomAxRanges(axList, r0Fraction, r1Fraction, updates, linkedAxes) {\n  for (var i = 0; i < axList.length; i++) {\n    var axi = axList[i];\n    if (axi.fixedrange) continue;\n\n    if (axi.rangebreaks) {\n      var isY = axi._id.charAt(0) === 'y';\n      var r0F = isY ? 1 - r0Fraction : r0Fraction;\n      var r1F = isY ? 1 - r1Fraction : r1Fraction;\n      updates[axi._name + '.range[0]'] = axi.l2r(axi.p2l(r0F * axi._length));\n      updates[axi._name + '.range[1]'] = axi.l2r(axi.p2l(r1F * axi._length));\n    } else {\n      var axRangeLinear0 = axi._rl[0];\n      var axRangeLinearSpan = axi._rl[1] - axRangeLinear0;\n      updates[axi._name + '.range[0]'] = axi.l2r(axRangeLinear0 + axRangeLinearSpan * r0Fraction);\n      updates[axi._name + '.range[1]'] = axi.l2r(axRangeLinear0 + axRangeLinearSpan * r1Fraction);\n    }\n  } // zoom linked axes about their centers\n\n\n  if (linkedAxes && linkedAxes.length) {\n    var linkedR0Fraction = (r0Fraction + (1 - r1Fraction)) / 2;\n    zoomAxRanges(linkedAxes, linkedR0Fraction, 1 - linkedR0Fraction, updates, []);\n  }\n}\n\nfunction dragAxList(axList, pix) {\n  for (var i = 0; i < axList.length; i++) {\n    var axi = axList[i];\n\n    if (!axi.fixedrange) {\n      if (axi.rangebreaks) {\n        var p0 = 0;\n        var p1 = axi._length;\n        var d0 = axi.p2l(p0 + pix) - axi.p2l(p0);\n        var d1 = axi.p2l(p1 + pix) - axi.p2l(p1);\n        var delta = (d0 + d1) / 2;\n        axi.range = [axi.l2r(axi._rl[0] - delta), axi.l2r(axi._rl[1] - delta)];\n      } else {\n        axi.range = [axi.l2r(axi._rl[0] - pix / axi._m), axi.l2r(axi._rl[1] - pix / axi._m)];\n      }\n    }\n  }\n} // common transform for dragging one end of an axis\n// d>0 is compressing scale (cursor is over the plot,\n//  the axis end should move with the cursor)\n// d<0 is expanding (cursor is off the plot, axis end moves\n//  nonlinearly so you can expand far)\n\n\nfunction dZoom(d) {\n  return 1 - (d >= 0 ? Math.min(d, 0.9) : 1 / (1 / Math.max(d, -0.3) + 3.222));\n}\n\nfunction getDragCursor(nsew, dragmode, isMainDrag) {\n  if (!nsew) return 'pointer';\n\n  if (nsew === 'nsew') {\n    // in this case here, clear cursor and\n    // use the cursor style set on <g .draglayer>\n    if (isMainDrag) return '';\n    if (dragmode === 'pan') return 'move';\n    return 'crosshair';\n  }\n\n  return nsew.toLowerCase() + '-resize';\n}\n\nfunction makeZoombox(zoomlayer, lum, xs, ys, path0) {\n  return zoomlayer.append('path').attr('class', 'zoombox').style({\n    'fill': lum > 0.2 ? 'rgba(0,0,0,0)' : 'rgba(255,255,255,0)',\n    'stroke-width': 0\n  }).attr('transform', 'translate(' + xs + ', ' + ys + ')').attr('d', path0 + 'Z');\n}\n\nfunction makeCorners(zoomlayer, xs, ys) {\n  return zoomlayer.append('path').attr('class', 'zoombox-corners').style({\n    fill: Color.background,\n    stroke: Color.defaultLine,\n    'stroke-width': 1,\n    opacity: 0\n  }).attr('transform', 'translate(' + xs + ', ' + ys + ')').attr('d', 'M0,0Z');\n}\n\nfunction updateZoombox(zb, corners, box, path0, dimmed, lum) {\n  zb.attr('d', path0 + 'M' + box.l + ',' + box.t + 'v' + box.h + 'h' + box.w + 'v-' + box.h + 'h-' + box.w + 'Z');\n  transitionZoombox(zb, corners, dimmed, lum);\n}\n\nfunction transitionZoombox(zb, corners, dimmed, lum) {\n  if (!dimmed) {\n    zb.transition().style('fill', lum > 0.2 ? 'rgba(0,0,0,0.4)' : 'rgba(255,255,255,0.3)').duration(200);\n    corners.transition().style('opacity', 1).duration(200);\n  }\n}\n\nfunction removeZoombox(gd) {\n  d3.select(gd).selectAll('.zoombox,.js-zoombox-backdrop,.js-zoombox-menu,.zoombox-corners').remove();\n}\n\nfunction showDoubleClickNotifier(gd) {\n  if (SHOWZOOMOUTTIP && gd.data && gd._context.showTips) {\n    Lib.notifier(Lib._(gd, 'Double-click to zoom back out'), 'long');\n    SHOWZOOMOUTTIP = false;\n  }\n}\n\nfunction xCorners(box, y0) {\n  return 'M' + (box.l - 0.5) + ',' + (y0 - MINZOOM - 0.5) + 'h-3v' + (2 * MINZOOM + 1) + 'h3ZM' + (box.r + 0.5) + ',' + (y0 - MINZOOM - 0.5) + 'h3v' + (2 * MINZOOM + 1) + 'h-3Z';\n}\n\nfunction yCorners(box, x0) {\n  return 'M' + (x0 - MINZOOM - 0.5) + ',' + (box.t - 0.5) + 'v-3h' + (2 * MINZOOM + 1) + 'v3ZM' + (x0 - MINZOOM - 0.5) + ',' + (box.b + 0.5) + 'v3h' + (2 * MINZOOM + 1) + 'v-3Z';\n}\n\nfunction xyCorners(box) {\n  var clen = Math.floor(Math.min(box.b - box.t, box.r - box.l, MINZOOM) / 2);\n  return 'M' + (box.l - 3.5) + ',' + (box.t - 0.5 + clen) + 'h3v' + -clen + 'h' + clen + 'v-3h-' + (clen + 3) + 'ZM' + (box.r + 3.5) + ',' + (box.t - 0.5 + clen) + 'h-3v' + -clen + 'h' + -clen + 'v-3h' + (clen + 3) + 'ZM' + (box.r + 3.5) + ',' + (box.b + 0.5 - clen) + 'h-3v' + clen + 'h' + -clen + 'v3h' + (clen + 3) + 'ZM' + (box.l - 3.5) + ',' + (box.b + 0.5 - clen) + 'h3v' + clen + 'h' + clen + 'v3h-' + (clen + 3) + 'Z';\n}\n\nfunction calcLinks(gd, groups, xaHash, yaHash) {\n  var isSubplotConstrained = false;\n  var xLinks = {};\n  var yLinks = {};\n  var xID, yID, xLinkID, yLinkID;\n\n  for (var i = 0; i < groups.length; i++) {\n    var group = groups[i]; // check if any of the x axes we're dragging is in this constraint group\n\n    for (xID in xaHash) {\n      if (group[xID]) {\n        // put the rest of these axes into xLinks, if we're not already\n        // dragging them, so we know to scale these axes automatically too\n        // to match the changes in the dragged x axes\n        for (xLinkID in group) {\n          if (!(xLinkID.charAt(0) === 'x' ? xaHash : yaHash)[xLinkID]) {\n            xLinks[xLinkID] = xID;\n          }\n        } // check if the x and y axes of THIS drag are linked\n\n\n        for (yID in yaHash) {\n          if (group[yID]) isSubplotConstrained = true;\n        }\n      }\n    } // now check if any of the y axes we're dragging is in this constraint group\n    // only look for outside links, as we've already checked for links within the dragger\n\n\n    for (yID in yaHash) {\n      if (group[yID]) {\n        for (yLinkID in group) {\n          if (!(yLinkID.charAt(0) === 'x' ? xaHash : yaHash)[yLinkID]) {\n            yLinks[yLinkID] = yID;\n          }\n        }\n      }\n    }\n  }\n\n  if (isSubplotConstrained) {\n    // merge xLinks and yLinks if the subplot is constrained,\n    // since we'll always apply both anyway and the two will contain\n    // duplicates\n    Lib.extendFlat(xLinks, yLinks);\n    yLinks = {};\n  }\n\n  var xaHashLinked = {};\n  var xaxesLinked = [];\n\n  for (xLinkID in xLinks) {\n    var xa = getFromId(gd, xLinkID);\n    xaxesLinked.push(xa);\n    xaHashLinked[xa._id] = xa;\n  }\n\n  var yaHashLinked = {};\n  var yaxesLinked = [];\n\n  for (yLinkID in yLinks) {\n    var ya = getFromId(gd, yLinkID);\n    yaxesLinked.push(ya);\n    yaHashLinked[ya._id] = ya;\n  }\n\n  return {\n    xaHash: xaHashLinked,\n    yaHash: yaHashLinked,\n    xaxes: xaxesLinked,\n    yaxes: yaxesLinked,\n    xLinks: xLinks,\n    yLinks: yLinks,\n    isSubplotConstrained: isSubplotConstrained\n  };\n} // still seems to be some confusion about onwheel vs onmousewheel...\n\n\nfunction attachWheelEventHandler(element, handler) {\n  if (!supportsPassive) {\n    if (element.onwheel !== undefined) element.onwheel = handler;else if (element.onmousewheel !== undefined) element.onmousewheel = handler;else if (!element.isAddedWheelEvent) {\n      element.isAddedWheelEvent = true;\n      element.addEventListener('wheel', handler, {\n        passive: false\n      });\n    }\n  } else {\n    var wheelEventName = element.onwheel !== undefined ? 'wheel' : 'mousewheel';\n\n    if (element._onwheel) {\n      element.removeEventListener(wheelEventName, element._onwheel);\n    }\n\n    element._onwheel = handler;\n    element.addEventListener(wheelEventName, handler, {\n      passive: false\n    });\n  }\n}\n\nfunction hashValues(hash) {\n  var out = [];\n\n  for (var k in hash) {\n    out.push(hash[k]);\n  }\n\n  return out;\n}\n\nmodule.exports = {\n  makeDragBox: makeDragBox,\n  makeDragger: makeDragger,\n  makeRectDragger: makeRectDragger,\n  makeZoombox: makeZoombox,\n  makeCorners: makeCorners,\n  updateZoombox: updateZoombox,\n  xyCorners: xyCorners,\n  transitionZoombox: transitionZoombox,\n  removeZoombox: removeZoombox,\n  showDoubleClickNotifier: showDoubleClickNotifier,\n  attachWheelEventHandler: attachWheelEventHandler\n};","map":{"version":3,"sources":["/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/node_modules/plotly.js/src/plots/cartesian/dragbox.js"],"names":["d3","require","tinycolor","supportsPassive","Registry","Lib","svgTextUtils","Color","Drawing","Fx","Axes","setCursor","dragElement","helpers","selectingOrDrawing","freeMode","FROM_TL","clearGlCanvases","redrawReglTraces","Plots","getFromId","prepSelect","clearSelect","selectOnClick","scaleZoom","constants","MINDRAG","MINZOOM","SHOWZOOMOUTTIP","makeDragBox","gd","plotinfo","x","y","w","h","ns","ew","zoomlayer","_fullLayout","_zoomlayer","isMainDrag","singleEnd","length","xa0","ya0","xaHash","yaHash","xaxes","yaxes","xs","ys","pw","ph","links","matches","xActive","yActive","allFixedRanges","editX","editY","hasScatterGl","hasSplom","hasSVG","updates","recomputeAxisLists","xaxis","yaxis","_length","_offset","_id","overlays","i","xa","ya","hashValues","isDirectionActive","calcLinks","_axisConstraintGroups","_axisMatchGroups","isSubplotConstrained","fullLayout","_has","cursor","getDragCursor","dragmode","dragger","makeRectDragger","onmousedown","style","pointerEvents","dragOptions","element","prepFn","e","startX","startY","dragModePrev","dragModeNow","shiftKey","ctrlKey","minDrag","undefined","clickFn","clearAndResetSelect","moveFn","zoomMove","doneFn","zoomDone","zoomPrep","plotDrag","dragTail","_redrag","dragDataNow","_dragdata","updateSubplots","dx","dy","selection","numClicks","evt","_activeShapeIndex","_deactivateShape","clickmode","removeZoombox","doubleClick","indexOf","id","click","ax","end","attrStr","_name","initialText","getEndText","hAlign","vAlign","fixedrange","side","_context","showAxisRangeEntryBoxes","select","call","makeEditable","immediate","background","paper_bgcolor","text","String","fill","tickfont","color","horizontalAlign","verticalAlign","on","v","d2r","init","x0","y0","box","lum","path0","dimmed","zoomMode","zb","corners","zoomDragged","dragBBox","getBoundingClientRect","left","top","l","r","t","b","_hmpixcount","_hmlumcount","plot_bgcolor","getLuminance","makeZoombox","makeCorners","dx0","dy0","_transitioningWithDuration","x1","Math","max","min","y1","abs","noZoom","attr","xyCorners","r0","r1","xCorners","yCorners","_dragged","updateZoombox","computeZoomUpdates","emit","zoomAxRanges","updateMatchedAxRange","showDoubleClickNotifier","scrollViewBox","redrawTimer","REDRAWDELAY","mainplot","_plots","zoomWheel","_scrollZoom","cartesian","_enablescrollzoom","preventDefault","stopPropagation","clearTimeout","wheelDelta","deltaY","isFinite","log","zoom","exp","gbb","draglayer","node","xfrac","clientX","width","yfrac","bottom","clientY","height","zoomWheelOneAxis","centerFraction","axRange","simpleMap","range","r2l","v0","doZoom","l2r","map","ticksAndAnnotations","setTimeout","attachWheelEventHandler","_replotting","dragAxList","dz","axArray","d","otherEnd","movedAx","newLinearizedEnd","axi","_rl","dZoom","newEnd","dxySign","dxyFraction","xStart","yStart","_r","slice","axLetter","out","matchedAxes","constrainedAxes","axId","axId2","xLinks","yLinks","ax2","activeAxIds","pushActiveAxIds","axList","push","drawOne","skipTitle","redrawComponents","doubleClickConfig","concat","attrs","rangeInitial","_rangeInitial","autorange","syncOrAsync","previousPromises","viewBox","plotinfos","subplots","_subplots","sp","subplotsRegistry","splom","drag","_scene","xrng","yrng","update","xScaleFactor","yScaleFactor","editX2","editY2","xScaleFactor2","yScaleFactor2","clipDx","clipDy","getShift","n","s","getLinkedScaleFactor","scaleAndGetShift","plotDx","plotDy","clipRect","setTranslate","setScale","plot","setPointGroupScale","zoomScalePts","setTextPointsScale","zoomScaleTxt","hideOutsideRangePoints","clipOnAxisFalseTraces","scaleFactor","from","constraintoward","makeDragger","nodeName","dragClass","dragger3","ensureSingle","classed","setRect","activeVal","initialVal","diff","dig","type","ceil","LN10","format","pow","floor","r0Fraction","r1Fraction","linkedAxes","rangebreaks","isY","charAt","r0F","r1F","p2l","axRangeLinear0","axRangeLinearSpan","linkedR0Fraction","pix","p0","p1","d0","d1","delta","_m","nsew","toLowerCase","append","stroke","defaultLine","opacity","transitionZoombox","transition","duration","selectAll","remove","data","showTips","notifier","_","clen","groups","xID","yID","xLinkID","yLinkID","group","extendFlat","xaHashLinked","xaxesLinked","yaHashLinked","yaxesLinked","handler","onwheel","onmousewheel","isAddedWheelEvent","addEventListener","passive","wheelEventName","_onwheel","removeEventListener","hash","k","module","exports"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar d3 = require('d3');\nvar tinycolor = require('tinycolor2');\nvar supportsPassive = require('has-passive-events');\n\nvar Registry = require('../../registry');\nvar Lib = require('../../lib');\nvar svgTextUtils = require('../../lib/svg_text_utils');\nvar Color = require('../../components/color');\nvar Drawing = require('../../components/drawing');\nvar Fx = require('../../components/fx');\nvar Axes = require('./axes');\nvar setCursor = require('../../lib/setcursor');\nvar dragElement = require('../../components/dragelement');\nvar helpers = require('../../components/dragelement/helpers');\nvar selectingOrDrawing = helpers.selectingOrDrawing;\nvar freeMode = helpers.freeMode;\n\nvar FROM_TL = require('../../constants/alignment').FROM_TL;\nvar clearGlCanvases = require('../../lib/clear_gl_canvases');\nvar redrawReglTraces = require('../../plot_api/subroutines').redrawReglTraces;\n\nvar Plots = require('../plots');\n\nvar getFromId = require('./axis_ids').getFromId;\nvar prepSelect = require('./select').prepSelect;\nvar clearSelect = require('./select').clearSelect;\nvar selectOnClick = require('./select').selectOnClick;\nvar scaleZoom = require('./scale_zoom');\n\nvar constants = require('./constants');\nvar MINDRAG = constants.MINDRAG;\nvar MINZOOM = constants.MINZOOM;\n\n// flag for showing \"doubleclick to zoom out\" only at the beginning\nvar SHOWZOOMOUTTIP = true;\n\n// dragBox: create an element to drag one or more axis ends\n// inputs:\n//      plotinfo - which subplot are we making dragboxes on?\n//      x,y,w,h - left, top, width, height of the box\n//      ns - how does this drag the vertical axis?\n//          'n' - top only\n//          's' - bottom only\n//          'ns' - top and bottom together, difference unchanged\n//      ew - same for horizontal axis\nfunction makeDragBox(gd, plotinfo, x, y, w, h, ns, ew) {\n    // mouseDown stores ms of first mousedown event in the last\n    // `gd._context.doubleClickDelay` ms on the drag bars\n    // numClicks stores how many mousedowns have been seen\n    // within `gd._context.doubleClickDelay` so we can check for click or doubleclick events\n    // dragged stores whether a drag has occurred, so we don't have to\n    // redraw unnecessarily, ie if no move bigger than MINDRAG or MINZOOM px\n    var zoomlayer = gd._fullLayout._zoomlayer;\n    var isMainDrag = (ns + ew === 'nsew');\n    var singleEnd = (ns + ew).length === 1;\n\n    // main subplot x and y (i.e. found in plotinfo - the main ones)\n    var xa0, ya0;\n    // {ax._id: ax} hash objects\n    var xaHash, yaHash;\n    // xaHash/yaHash values (arrays)\n    var xaxes, yaxes;\n    // main axis offsets\n    var xs, ys;\n    // main axis lengths\n    var pw, ph;\n    // contains keys 'xaHash', 'yaHash', 'xaxes', and 'yaxes'\n    // which are the x/y {ax._id: ax} hash objects and their values\n    // for linked axis relative to this subplot\n    var links;\n    // similar to `links` but for matching axes\n    var matches;\n    // set to ew/ns val when active, set to '' when inactive\n    var xActive, yActive;\n    // are all axes in this subplot are fixed?\n    var allFixedRanges;\n    // do we need to edit x/y ranges?\n    var editX, editY;\n    // graph-wide optimization flags\n    var hasScatterGl, hasSplom, hasSVG;\n    // collected changes to be made to the plot by relayout at the end\n    var updates;\n\n    function recomputeAxisLists() {\n        xa0 = plotinfo.xaxis;\n        ya0 = plotinfo.yaxis;\n        pw = xa0._length;\n        ph = ya0._length;\n        xs = xa0._offset;\n        ys = ya0._offset;\n\n        xaHash = {};\n        xaHash[xa0._id] = xa0;\n        yaHash = {};\n        yaHash[ya0._id] = ya0;\n\n        // if we're dragging two axes at once, also drag overlays\n        if(ns && ew) {\n            var overlays = plotinfo.overlays;\n            for(var i = 0; i < overlays.length; i++) {\n                var xa = overlays[i].xaxis;\n                xaHash[xa._id] = xa;\n                var ya = overlays[i].yaxis;\n                yaHash[ya._id] = ya;\n            }\n        }\n\n        xaxes = hashValues(xaHash);\n        yaxes = hashValues(yaHash);\n        xActive = isDirectionActive(xaxes, ew);\n        yActive = isDirectionActive(yaxes, ns);\n        allFixedRanges = !yActive && !xActive;\n\n        links = calcLinks(gd, gd._fullLayout._axisConstraintGroups, xaHash, yaHash);\n        matches = calcLinks(gd, gd._fullLayout._axisMatchGroups, xaHash, yaHash);\n        editX = ew || links.isSubplotConstrained || matches.isSubplotConstrained;\n        editY = ns || links.isSubplotConstrained || matches.isSubplotConstrained;\n\n        var fullLayout = gd._fullLayout;\n        hasScatterGl = fullLayout._has('scattergl');\n        hasSplom = fullLayout._has('splom');\n        hasSVG = fullLayout._has('svg');\n    }\n\n    recomputeAxisLists();\n\n    var cursor = getDragCursor(yActive + xActive, gd._fullLayout.dragmode, isMainDrag);\n    var dragger = makeRectDragger(plotinfo, ns + ew + 'drag', cursor, x, y, w, h);\n\n    // still need to make the element if the axes are disabled\n    // but nuke its events (except for maindrag which needs them for hover)\n    // and stop there\n    if(allFixedRanges && !isMainDrag) {\n        dragger.onmousedown = null;\n        dragger.style.pointerEvents = 'none';\n        return dragger;\n    }\n\n    var dragOptions = {\n        element: dragger,\n        gd: gd,\n        plotinfo: plotinfo\n    };\n\n    dragOptions.prepFn = function(e, startX, startY) {\n        var dragModePrev = dragOptions.dragmode;\n        var dragModeNow = gd._fullLayout.dragmode;\n        if(dragModeNow !== dragModePrev) {\n            dragOptions.dragmode = dragModeNow;\n        }\n\n        recomputeAxisLists();\n\n        if(!allFixedRanges) {\n            if(isMainDrag) {\n                // main dragger handles all drag modes, and changes\n                // to pan (or to zoom if it already is pan) on shift\n                if(e.shiftKey) {\n                    if(dragModeNow === 'pan') dragModeNow = 'zoom';\n                    else if(!selectingOrDrawing(dragModeNow)) dragModeNow = 'pan';\n                } else if(e.ctrlKey) {\n                    dragModeNow = 'pan';\n                }\n            } else {\n                // all other draggers just pan\n                dragModeNow = 'pan';\n            }\n        }\n\n        if(freeMode(dragModeNow)) dragOptions.minDrag = 1;\n        else dragOptions.minDrag = undefined;\n\n        if(selectingOrDrawing(dragModeNow)) {\n            dragOptions.xaxes = xaxes;\n            dragOptions.yaxes = yaxes;\n            // this attaches moveFn, clickFn, doneFn on dragOptions\n            prepSelect(e, startX, startY, dragOptions, dragModeNow);\n        } else {\n            dragOptions.clickFn = clickFn;\n            if(selectingOrDrawing(dragModePrev)) {\n                // TODO Fix potential bug\n                // Note: clearing / resetting selection state only happens, when user\n                // triggers at least one interaction in pan/zoom mode. Otherwise, the\n                // select/lasso outlines are deleted (in plots.js.cleanPlot) but the selection\n                // cache isn't cleared. So when the user switches back to select/lasso and\n                // 'adds to a selection' with Shift, the \"old\", seemingly removed outlines\n                // are redrawn again because the selection cache still holds their coordinates.\n                // However, this isn't easily solved, since plots.js would need\n                // to have a reference to the dragOptions object (which holds the\n                // selection cache).\n                clearAndResetSelect();\n            }\n\n            if(!allFixedRanges) {\n                if(dragModeNow === 'zoom') {\n                    dragOptions.moveFn = zoomMove;\n                    dragOptions.doneFn = zoomDone;\n\n                    // zoomMove takes care of the threshold, but we need to\n                    // minimize this so that constrained zoom boxes will flip\n                    // orientation at the right place\n                    dragOptions.minDrag = 1;\n\n                    zoomPrep(e, startX, startY);\n                } else if(dragModeNow === 'pan') {\n                    dragOptions.moveFn = plotDrag;\n                    dragOptions.doneFn = dragTail;\n                }\n            }\n        }\n\n        gd._fullLayout._redrag = function() {\n            var dragDataNow = gd._dragdata;\n\n            if(dragDataNow && dragDataNow.element === dragger) {\n                var dragModeNow = gd._fullLayout.dragmode;\n\n                if(!selectingOrDrawing(dragModeNow)) {\n                    recomputeAxisLists();\n                    updateSubplots([0, 0, pw, ph]);\n                    dragOptions.moveFn(dragDataNow.dx, dragDataNow.dy);\n                }\n\n                // TODO should we try to \"re-select\" under select/lasso modes?\n                // probably best to wait for https://github.com/plotly/plotly.js/issues/1851\n            }\n        };\n    };\n\n    function clearAndResetSelect() {\n        // clear selection polygon cache (if any)\n        dragOptions.plotinfo.selection = false;\n        // clear selection outlines\n        clearSelect(gd);\n    }\n\n    function clickFn(numClicks, evt) {\n        var gd = dragOptions.gd;\n        if(gd._fullLayout._activeShapeIndex >= 0) {\n            gd._fullLayout._deactivateShape(gd);\n            return;\n        }\n\n        var clickmode = gd._fullLayout.clickmode;\n\n        removeZoombox(gd);\n\n        if(numClicks === 2 && !singleEnd) doubleClick();\n\n        if(isMainDrag) {\n            if(clickmode.indexOf('select') > -1) {\n                selectOnClick(evt, gd, xaxes, yaxes, plotinfo.id, dragOptions);\n            }\n\n            if(clickmode.indexOf('event') > -1) {\n                Fx.click(gd, evt, plotinfo.id);\n            }\n        } else if(numClicks === 1 && singleEnd) {\n            var ax = ns ? ya0 : xa0;\n            var end = (ns === 's' || ew === 'w') ? 0 : 1;\n            var attrStr = ax._name + '.range[' + end + ']';\n            var initialText = getEndText(ax, end);\n            var hAlign = 'left';\n            var vAlign = 'middle';\n\n            if(ax.fixedrange) return;\n\n            if(ns) {\n                vAlign = (ns === 'n') ? 'top' : 'bottom';\n                if(ax.side === 'right') hAlign = 'right';\n            } else if(ew === 'e') hAlign = 'right';\n\n            if(gd._context.showAxisRangeEntryBoxes) {\n                d3.select(dragger)\n                    .call(svgTextUtils.makeEditable, {\n                        gd: gd,\n                        immediate: true,\n                        background: gd._fullLayout.paper_bgcolor,\n                        text: String(initialText),\n                        fill: ax.tickfont ? ax.tickfont.color : '#444',\n                        horizontalAlign: hAlign,\n                        verticalAlign: vAlign\n                    })\n                    .on('edit', function(text) {\n                        var v = ax.d2r(text);\n                        if(v !== undefined) {\n                            Registry.call('_guiRelayout', gd, attrStr, v);\n                        }\n                    });\n            }\n        }\n    }\n\n    dragElement.init(dragOptions);\n\n    // x/y px position at start of drag\n    var x0, y0;\n    // bbox object of the zoombox\n    var box;\n    // luminance of bg behind zoombox\n    var lum;\n    // zoombox path outline\n    var path0;\n    // is zoombox dimmed (during drag)\n    var dimmed;\n    // 'x'-only, 'y' or 'xy' zooming\n    var zoomMode;\n    // zoombox d3 selection\n    var zb;\n    // zoombox corner d3 selection\n    var corners;\n    // zoom takes over minDrag, so it also has to take over gd._dragged\n    var zoomDragged;\n\n    function zoomPrep(e, startX, startY) {\n        var dragBBox = dragger.getBoundingClientRect();\n        x0 = startX - dragBBox.left;\n        y0 = startY - dragBBox.top;\n        box = {l: x0, r: x0, w: 0, t: y0, b: y0, h: 0};\n        lum = gd._hmpixcount ?\n            (gd._hmlumcount / gd._hmpixcount) :\n            tinycolor(gd._fullLayout.plot_bgcolor).getLuminance();\n        path0 = 'M0,0H' + pw + 'V' + ph + 'H0V0';\n        dimmed = false;\n        zoomMode = 'xy';\n        zoomDragged = false;\n        zb = makeZoombox(zoomlayer, lum, xs, ys, path0);\n        corners = makeCorners(zoomlayer, xs, ys);\n    }\n\n    function zoomMove(dx0, dy0) {\n        if(gd._transitioningWithDuration) {\n            return false;\n        }\n\n        var x1 = Math.max(0, Math.min(pw, dx0 + x0));\n        var y1 = Math.max(0, Math.min(ph, dy0 + y0));\n        var dx = Math.abs(x1 - x0);\n        var dy = Math.abs(y1 - y0);\n\n        box.l = Math.min(x0, x1);\n        box.r = Math.max(x0, x1);\n        box.t = Math.min(y0, y1);\n        box.b = Math.max(y0, y1);\n\n        function noZoom() {\n            zoomMode = '';\n            box.r = box.l;\n            box.t = box.b;\n            corners.attr('d', 'M0,0Z');\n        }\n\n        if(links.isSubplotConstrained) {\n            if(dx > MINZOOM || dy > MINZOOM) {\n                zoomMode = 'xy';\n                if(dx / pw > dy / ph) {\n                    dy = dx * ph / pw;\n                    if(y0 > y1) box.t = y0 - dy;\n                    else box.b = y0 + dy;\n                } else {\n                    dx = dy * pw / ph;\n                    if(x0 > x1) box.l = x0 - dx;\n                    else box.r = x0 + dx;\n                }\n                corners.attr('d', xyCorners(box));\n            } else {\n                noZoom();\n            }\n        } else if(matches.isSubplotConstrained) {\n            if(dx > MINZOOM || dy > MINZOOM) {\n                zoomMode = 'xy';\n\n                var r0 = Math.min(box.l / pw, (ph - box.b) / ph);\n                var r1 = Math.max(box.r / pw, (ph - box.t) / ph);\n\n                box.l = r0 * pw;\n                box.r = r1 * pw;\n                box.b = (1 - r0) * ph;\n                box.t = (1 - r1) * ph;\n                corners.attr('d', xyCorners(box));\n            } else {\n                noZoom();\n            }\n        } else if(!yActive || dy < Math.min(Math.max(dx * 0.6, MINDRAG), MINZOOM)) {\n            // look for small drags in one direction or the other,\n            // and only drag the other axis\n\n            if(dx < MINDRAG || !xActive) {\n                noZoom();\n            } else {\n                box.t = 0;\n                box.b = ph;\n                zoomMode = 'x';\n                corners.attr('d', xCorners(box, y0));\n            }\n        } else if(!xActive || dx < Math.min(dy * 0.6, MINZOOM)) {\n            box.l = 0;\n            box.r = pw;\n            zoomMode = 'y';\n            corners.attr('d', yCorners(box, x0));\n        } else {\n            zoomMode = 'xy';\n            corners.attr('d', xyCorners(box));\n        }\n        box.w = box.r - box.l;\n        box.h = box.b - box.t;\n\n        if(zoomMode) zoomDragged = true;\n        gd._dragged = zoomDragged;\n\n        updateZoombox(zb, corners, box, path0, dimmed, lum);\n        computeZoomUpdates();\n        gd.emit('plotly_relayouting', updates);\n        dimmed = true;\n    }\n\n    function computeZoomUpdates() {\n        updates = {};\n\n        // TODO: edit linked axes in zoomAxRanges and in dragTail\n        if(zoomMode === 'xy' || zoomMode === 'x') {\n            zoomAxRanges(xaxes, box.l / pw, box.r / pw, updates, links.xaxes);\n            updateMatchedAxRange('x', updates);\n        }\n        if(zoomMode === 'xy' || zoomMode === 'y') {\n            zoomAxRanges(yaxes, (ph - box.b) / ph, (ph - box.t) / ph, updates, links.yaxes);\n            updateMatchedAxRange('y', updates);\n        }\n    }\n\n    function zoomDone() {\n        computeZoomUpdates();\n        removeZoombox(gd);\n        dragTail();\n        showDoubleClickNotifier(gd);\n    }\n\n    // scroll zoom, on all draggers except corners\n    var scrollViewBox = [0, 0, pw, ph];\n    // wait a little after scrolling before redrawing\n    var redrawTimer = null;\n    var REDRAWDELAY = constants.REDRAWDELAY;\n    var mainplot = plotinfo.mainplot ? gd._fullLayout._plots[plotinfo.mainplot] : plotinfo;\n\n    function zoomWheel(e) {\n        // deactivate mousewheel scrolling on embedded graphs\n        // devs can override this with layout._enablescrollzoom,\n        // but _ ensures this setting won't leave their page\n        if(!gd._context._scrollZoom.cartesian && !gd._fullLayout._enablescrollzoom) {\n            return;\n        }\n\n        clearAndResetSelect();\n\n        // If a transition is in progress, then disable any behavior:\n        if(gd._transitioningWithDuration) {\n            e.preventDefault();\n            e.stopPropagation();\n            return;\n        }\n\n        recomputeAxisLists();\n\n        clearTimeout(redrawTimer);\n\n        var wheelDelta = -e.deltaY;\n        if(!isFinite(wheelDelta)) wheelDelta = e.wheelDelta / 10;\n        if(!isFinite(wheelDelta)) {\n            Lib.log('Did not find wheel motion attributes: ', e);\n            return;\n        }\n\n        var zoom = Math.exp(-Math.min(Math.max(wheelDelta, -20), 20) / 200);\n        var gbb = mainplot.draglayer.select('.nsewdrag').node().getBoundingClientRect();\n        var xfrac = (e.clientX - gbb.left) / gbb.width;\n        var yfrac = (gbb.bottom - e.clientY) / gbb.height;\n        var i;\n\n        function zoomWheelOneAxis(ax, centerFraction, zoom) {\n            if(ax.fixedrange) return;\n\n            var axRange = Lib.simpleMap(ax.range, ax.r2l);\n            var v0 = axRange[0] + (axRange[1] - axRange[0]) * centerFraction;\n            function doZoom(v) { return ax.l2r(v0 + (v - v0) * zoom); }\n            ax.range = axRange.map(doZoom);\n        }\n\n        if(editX) {\n            // if we're only zooming this axis because of constraints,\n            // zoom it about the center\n            if(!ew) xfrac = 0.5;\n\n            for(i = 0; i < xaxes.length; i++) {\n                zoomWheelOneAxis(xaxes[i], xfrac, zoom);\n            }\n            updateMatchedAxRange('x');\n\n            scrollViewBox[2] *= zoom;\n            scrollViewBox[0] += scrollViewBox[2] * xfrac * (1 / zoom - 1);\n        }\n        if(editY) {\n            if(!ns) yfrac = 0.5;\n\n            for(i = 0; i < yaxes.length; i++) {\n                zoomWheelOneAxis(yaxes[i], yfrac, zoom);\n            }\n            updateMatchedAxRange('y');\n\n            scrollViewBox[3] *= zoom;\n            scrollViewBox[1] += scrollViewBox[3] * (1 - yfrac) * (1 / zoom - 1);\n        }\n\n        // viewbox redraw at first\n        updateSubplots(scrollViewBox);\n        ticksAndAnnotations();\n\n        gd.emit('plotly_relayouting', updates);\n\n        // then replot after a delay to make sure\n        // no more scrolling is coming\n        redrawTimer = setTimeout(function() {\n            scrollViewBox = [0, 0, pw, ph];\n            dragTail();\n        }, REDRAWDELAY);\n\n        e.preventDefault();\n        return;\n    }\n\n    // everything but the corners gets wheel zoom\n    if(ns.length * ew.length !== 1) {\n        attachWheelEventHandler(dragger, zoomWheel);\n    }\n\n    // plotDrag: move the plot in response to a drag\n    function plotDrag(dx, dy) {\n        // If a transition is in progress, then disable any behavior:\n        if(gd._transitioningWithDuration) {\n            return;\n        }\n\n        // prevent axis drawing from monkeying with margins until we're done\n        gd._fullLayout._replotting = true;\n\n        if(xActive === 'ew' || yActive === 'ns') {\n            if(xActive) {\n                dragAxList(xaxes, dx);\n                updateMatchedAxRange('x');\n            }\n            if(yActive) {\n                dragAxList(yaxes, dy);\n                updateMatchedAxRange('y');\n            }\n            updateSubplots([xActive ? -dx : 0, yActive ? -dy : 0, pw, ph]);\n            ticksAndAnnotations();\n            gd.emit('plotly_relayouting', updates);\n            return;\n        }\n\n        // dz: set a new value for one end (0 or 1) of an axis array axArray,\n        // and return a pixel shift for that end for the viewbox\n        // based on pixel drag distance d\n        // TODO: this makes (generally non-fatal) errors when you get\n        // near floating point limits\n        function dz(axArray, end, d) {\n            var otherEnd = 1 - end;\n            var movedAx;\n            var newLinearizedEnd;\n            for(var i = 0; i < axArray.length; i++) {\n                var axi = axArray[i];\n                if(axi.fixedrange) continue;\n                movedAx = axi;\n                newLinearizedEnd = axi._rl[otherEnd] +\n                    (axi._rl[end] - axi._rl[otherEnd]) / dZoom(d / axi._length);\n                var newEnd = axi.l2r(newLinearizedEnd);\n\n                // if l2r comes back false or undefined, it means we've dragged off\n                // the end of valid ranges - so stop.\n                if(newEnd !== false && newEnd !== undefined) axi.range[end] = newEnd;\n            }\n            return movedAx._length * (movedAx._rl[end] - newLinearizedEnd) /\n                (movedAx._rl[end] - movedAx._rl[otherEnd]);\n        }\n\n        if(links.isSubplotConstrained && xActive && yActive) {\n            // dragging a corner of a constrained subplot:\n            // respect the fixed corner, but harmonize dx and dy\n            var dxySign = ((xActive === 'w') === (yActive === 'n')) ? 1 : -1;\n            var dxyFraction = (dx / pw + dxySign * dy / ph) / 2;\n            dx = dxyFraction * pw;\n            dy = dxySign * dxyFraction * ph;\n        }\n\n        if(xActive === 'w') dx = dz(xaxes, 0, dx);\n        else if(xActive === 'e') dx = dz(xaxes, 1, -dx);\n        else if(!xActive) dx = 0;\n\n        if(yActive === 'n') dy = dz(yaxes, 1, dy);\n        else if(yActive === 's') dy = dz(yaxes, 0, -dy);\n        else if(!yActive) dy = 0;\n\n        var xStart = (xActive === 'w') ? dx : 0;\n        var yStart = (yActive === 'n') ? dy : 0;\n\n        if(links.isSubplotConstrained) {\n            var i;\n            if(!xActive && yActive.length === 1) {\n                // dragging one end of the y axis of a constrained subplot\n                // scale the other axis the same about its middle\n                for(i = 0; i < xaxes.length; i++) {\n                    xaxes[i].range = xaxes[i]._r.slice();\n                    scaleZoom(xaxes[i], 1 - dy / ph);\n                }\n                dx = dy * pw / ph;\n                xStart = dx / 2;\n            }\n            if(!yActive && xActive.length === 1) {\n                for(i = 0; i < yaxes.length; i++) {\n                    yaxes[i].range = yaxes[i]._r.slice();\n                    scaleZoom(yaxes[i], 1 - dx / pw);\n                }\n                dy = dx * ph / pw;\n                yStart = dy / 2;\n            }\n        }\n\n        updateMatchedAxRange('x');\n        updateMatchedAxRange('y');\n        updateSubplots([xStart, yStart, pw - dx, ph - dy]);\n        ticksAndAnnotations();\n        gd.emit('plotly_relayouting', updates);\n    }\n\n    function updateMatchedAxRange(axLetter, out) {\n        var matchedAxes = matches.isSubplotConstrained ?\n            {x: yaxes, y: xaxes}[axLetter] :\n            matches[axLetter + 'axes'];\n\n        var constrainedAxes = matches.isSubplotConstrained ?\n            {x: xaxes, y: yaxes}[axLetter] :\n            [];\n\n        for(var i = 0; i < matchedAxes.length; i++) {\n            var ax = matchedAxes[i];\n            var axId = ax._id;\n            var axId2 = matches.xLinks[axId] || matches.yLinks[axId];\n            var ax2 = constrainedAxes[0] || xaHash[axId2] || yaHash[axId2];\n\n            if(ax2) {\n                if(out) {\n                    // zoombox case - don't mutate 'range', just add keys in 'updates'\n                    out[ax._name + '.range[0]'] = out[ax2._name + '.range[0]'];\n                    out[ax._name + '.range[1]'] = out[ax2._name + '.range[1]'];\n                } else {\n                    ax.range = ax2.range.slice();\n                }\n            }\n        }\n    }\n\n    // Draw ticks and annotations (and other components) when ranges change.\n    // Also records the ranges that have changed for use by update at the end.\n    function ticksAndAnnotations() {\n        var activeAxIds = [];\n        var i;\n\n        function pushActiveAxIds(axList) {\n            for(i = 0; i < axList.length; i++) {\n                if(!axList[i].fixedrange) activeAxIds.push(axList[i]._id);\n            }\n        }\n\n        if(editX) {\n            pushActiveAxIds(xaxes);\n            pushActiveAxIds(links.xaxes);\n            pushActiveAxIds(matches.xaxes);\n        }\n        if(editY) {\n            pushActiveAxIds(yaxes);\n            pushActiveAxIds(links.yaxes);\n            pushActiveAxIds(matches.yaxes);\n        }\n\n        updates = {};\n        for(i = 0; i < activeAxIds.length; i++) {\n            var axId = activeAxIds[i];\n            var ax = getFromId(gd, axId);\n            Axes.drawOne(gd, ax, {skipTitle: true});\n            updates[ax._name + '.range[0]'] = ax.range[0];\n            updates[ax._name + '.range[1]'] = ax.range[1];\n        }\n\n        Axes.redrawComponents(gd, activeAxIds);\n    }\n\n    function doubleClick() {\n        if(gd._transitioningWithDuration) return;\n\n        var doubleClickConfig = gd._context.doubleClick;\n\n        var axList = [];\n        if(xActive) axList = axList.concat(xaxes);\n        if(yActive) axList = axList.concat(yaxes);\n        if(matches.xaxes) axList = axList.concat(matches.xaxes);\n        if(matches.yaxes) axList = axList.concat(matches.yaxes);\n\n        var attrs = {};\n        var ax, i, rangeInitial;\n\n        // For reset+autosize mode:\n        // If *any* of the main axes is not at its initial range\n        // (or autoranged, if we have no initial range, to match the logic in\n        // doubleClickConfig === 'reset' below), we reset.\n        // If they are *all* at their initial ranges, then we autosize.\n        if(doubleClickConfig === 'reset+autosize') {\n            doubleClickConfig = 'autosize';\n\n            for(i = 0; i < axList.length; i++) {\n                ax = axList[i];\n                if((ax._rangeInitial && (\n                        ax.range[0] !== ax._rangeInitial[0] ||\n                        ax.range[1] !== ax._rangeInitial[1]\n                    )) ||\n                    (!ax._rangeInitial && !ax.autorange)\n                ) {\n                    doubleClickConfig = 'reset';\n                    break;\n                }\n            }\n        }\n\n        if(doubleClickConfig === 'autosize') {\n            // don't set the linked axes here, so relayout marks them as shrinkable\n            // and we autosize just to the requested axis/axes\n            for(i = 0; i < axList.length; i++) {\n                ax = axList[i];\n                if(!ax.fixedrange) attrs[ax._name + '.autorange'] = true;\n            }\n        } else if(doubleClickConfig === 'reset') {\n            // when we're resetting, reset all linked axes too, so we get back\n            // to the fully-auto-with-constraints situation\n            if(xActive || links.isSubplotConstrained) axList = axList.concat(links.xaxes);\n            if(yActive && !links.isSubplotConstrained) axList = axList.concat(links.yaxes);\n\n            if(links.isSubplotConstrained) {\n                if(!xActive) axList = axList.concat(xaxes);\n                else if(!yActive) axList = axList.concat(yaxes);\n            }\n\n            for(i = 0; i < axList.length; i++) {\n                ax = axList[i];\n\n                if(!ax.fixedrange) {\n                    if(!ax._rangeInitial) {\n                        attrs[ax._name + '.autorange'] = true;\n                    } else {\n                        rangeInitial = ax._rangeInitial;\n                        attrs[ax._name + '.range[0]'] = rangeInitial[0];\n                        attrs[ax._name + '.range[1]'] = rangeInitial[1];\n                    }\n                }\n            }\n        }\n\n        gd.emit('plotly_doubleclick', null);\n        Registry.call('_guiRelayout', gd, attrs);\n    }\n\n    // dragTail - finish a drag event with a redraw\n    function dragTail() {\n        // put the subplot viewboxes back to default (Because we're going to)\n        // be repositioning the data in the relayout. But DON'T call\n        // ticksAndAnnotations again - it's unnecessary and would overwrite `updates`\n        updateSubplots([0, 0, pw, ph]);\n\n        // since we may have been redrawing some things during the drag, we may have\n        // accumulated MathJax promises - wait for them before we relayout.\n        Lib.syncOrAsync([\n            Plots.previousPromises,\n            function() {\n                gd._fullLayout._replotting = false;\n                Registry.call('_guiRelayout', gd, updates);\n            }\n        ], gd);\n    }\n\n    // updateSubplots - find all plot viewboxes that should be\n    // affected by this drag, and update them. look for all plots\n    // sharing an affected axis (including the one being dragged),\n    // includes also scattergl and splom logic.\n    function updateSubplots(viewBox) {\n        var fullLayout = gd._fullLayout;\n        var plotinfos = fullLayout._plots;\n        var subplots = fullLayout._subplots.cartesian;\n        var i, sp, xa, ya;\n\n        if(hasSplom) {\n            Registry.subplotsRegistry.splom.drag(gd);\n        }\n\n        if(hasScatterGl) {\n            for(i = 0; i < subplots.length; i++) {\n                sp = plotinfos[subplots[i]];\n                xa = sp.xaxis;\n                ya = sp.yaxis;\n\n                if(sp._scene) {\n                    var xrng = Lib.simpleMap(xa.range, xa.r2l);\n                    var yrng = Lib.simpleMap(ya.range, ya.r2l);\n                    sp._scene.update({range: [xrng[0], yrng[0], xrng[1], yrng[1]]});\n                }\n            }\n        }\n\n        if(hasSplom || hasScatterGl) {\n            clearGlCanvases(gd);\n            redrawReglTraces(gd);\n        }\n\n        if(hasSVG) {\n            var xScaleFactor = viewBox[2] / xa0._length;\n            var yScaleFactor = viewBox[3] / ya0._length;\n\n            for(i = 0; i < subplots.length; i++) {\n                sp = plotinfos[subplots[i]];\n                xa = sp.xaxis;\n                ya = sp.yaxis;\n\n                var editX2 = editX && !xa.fixedrange && xaHash[xa._id];\n                var editY2 = editY && !ya.fixedrange && yaHash[ya._id];\n\n                var xScaleFactor2, yScaleFactor2;\n                var clipDx, clipDy;\n\n                if(editX2) {\n                    xScaleFactor2 = xScaleFactor;\n                    clipDx = ew ? viewBox[0] : getShift(xa, xScaleFactor2);\n                } else if(matches.xaHash[xa._id]) {\n                    xScaleFactor2 = xScaleFactor;\n                    clipDx = viewBox[0] * xa._length / xa0._length;\n                } else if(matches.yaHash[xa._id]) {\n                    xScaleFactor2 = yScaleFactor;\n                    clipDx = yActive === 'ns' ?\n                        -viewBox[1] * xa._length / ya0._length :\n                        getShift(xa, xScaleFactor2, {n: 'top', s: 'bottom'}[yActive]);\n                } else {\n                    xScaleFactor2 = getLinkedScaleFactor(xa, xScaleFactor, yScaleFactor);\n                    clipDx = scaleAndGetShift(xa, xScaleFactor2);\n                }\n\n                if(editY2) {\n                    yScaleFactor2 = yScaleFactor;\n                    clipDy = ns ? viewBox[1] : getShift(ya, yScaleFactor2);\n                } else if(matches.yaHash[ya._id]) {\n                    yScaleFactor2 = yScaleFactor;\n                    clipDy = viewBox[1] * ya._length / ya0._length;\n                } else if(matches.xaHash[ya._id]) {\n                    yScaleFactor2 = xScaleFactor;\n                    clipDy = xActive === 'ew' ?\n                        -viewBox[0] * ya._length / xa0._length :\n                        getShift(ya, yScaleFactor2, {e: 'right', w: 'left'}[xActive]);\n                } else {\n                    yScaleFactor2 = getLinkedScaleFactor(ya, xScaleFactor, yScaleFactor);\n                    clipDy = scaleAndGetShift(ya, yScaleFactor2);\n                }\n\n                // don't scale at all if neither axis is scalable here\n                if(!xScaleFactor2 && !yScaleFactor2) {\n                    continue;\n                }\n\n                // but if only one is, reset the other axis scaling\n                if(!xScaleFactor2) xScaleFactor2 = 1;\n                if(!yScaleFactor2) yScaleFactor2 = 1;\n\n                var plotDx = xa._offset - clipDx / xScaleFactor2;\n                var plotDy = ya._offset - clipDy / yScaleFactor2;\n\n                // TODO could be more efficient here:\n                // setTranslate and setScale do a lot of extra work\n                // when working independently, should perhaps combine\n                // them into a single routine.\n                sp.clipRect\n                    .call(Drawing.setTranslate, clipDx, clipDy)\n                    .call(Drawing.setScale, xScaleFactor2, yScaleFactor2);\n\n                sp.plot\n                    .call(Drawing.setTranslate, plotDx, plotDy)\n                    .call(Drawing.setScale, 1 / xScaleFactor2, 1 / yScaleFactor2);\n\n                // apply an inverse scale to individual points to counteract\n                // the scale of the trace group.\n                // apply only when scale changes, as adjusting the scale of\n                // all the points can be expansive.\n                if(xScaleFactor2 !== sp.xScaleFactor || yScaleFactor2 !== sp.yScaleFactor) {\n                    Drawing.setPointGroupScale(sp.zoomScalePts, xScaleFactor2, yScaleFactor2);\n                    Drawing.setTextPointsScale(sp.zoomScaleTxt, xScaleFactor2, yScaleFactor2);\n                }\n\n                Drawing.hideOutsideRangePoints(sp.clipOnAxisFalseTraces, sp);\n\n                // update x/y scaleFactor stash\n                sp.xScaleFactor = xScaleFactor2;\n                sp.yScaleFactor = yScaleFactor2;\n            }\n        }\n    }\n\n    // Find the appropriate scaling for this axis, if it's linked to the\n    // dragged axes by constraints. 0 is special, it means this axis shouldn't\n    // ever be scaled (will be converted to 1 if the other axis is scaled)\n    function getLinkedScaleFactor(ax, xScaleFactor, yScaleFactor) {\n        if(ax.fixedrange) return 0;\n\n        if(editX && links.xaHash[ax._id]) {\n            return xScaleFactor;\n        }\n        if(editY && (links.isSubplotConstrained ? links.xaHash : links.yaHash)[ax._id]) {\n            return yScaleFactor;\n        }\n        return 0;\n    }\n\n    function scaleAndGetShift(ax, scaleFactor) {\n        if(scaleFactor) {\n            ax.range = ax._r.slice();\n            scaleZoom(ax, scaleFactor);\n            return getShift(ax, scaleFactor);\n        }\n        return 0;\n    }\n\n    function getShift(ax, scaleFactor, from) {\n        return ax._length * (1 - scaleFactor) * FROM_TL[from || ax.constraintoward || 'middle'];\n    }\n\n    return dragger;\n}\n\nfunction makeDragger(plotinfo, nodeName, dragClass, cursor) {\n    var dragger3 = Lib.ensureSingle(plotinfo.draglayer, nodeName, dragClass, function(s) {\n        s.classed('drag', true)\n            .style({fill: 'transparent', 'stroke-width': 0})\n            .attr('data-subplot', plotinfo.id);\n    });\n\n    dragger3.call(setCursor, cursor);\n\n    return dragger3.node();\n}\n\nfunction makeRectDragger(plotinfo, dragClass, cursor, x, y, w, h) {\n    var dragger = makeDragger(plotinfo, 'rect', dragClass, cursor);\n    d3.select(dragger).call(Drawing.setRect, x, y, w, h);\n    return dragger;\n}\n\nfunction isDirectionActive(axList, activeVal) {\n    for(var i = 0; i < axList.length; i++) {\n        if(!axList[i].fixedrange) return activeVal;\n    }\n    return '';\n}\n\nfunction getEndText(ax, end) {\n    var initialVal = ax.range[end];\n    var diff = Math.abs(initialVal - ax.range[1 - end]);\n    var dig;\n\n    // TODO: this should basically be ax.r2d but we're doing extra\n    // rounding here... can we clean up at all?\n    if(ax.type === 'date') {\n        return initialVal;\n    } else if(ax.type === 'log') {\n        dig = Math.ceil(Math.max(0, -Math.log(diff) / Math.LN10)) + 3;\n        return d3.format('.' + dig + 'g')(Math.pow(10, initialVal));\n    } else { // linear numeric (or category... but just show numbers here)\n        dig = Math.floor(Math.log(Math.abs(initialVal)) / Math.LN10) -\n            Math.floor(Math.log(diff) / Math.LN10) + 4;\n        return d3.format('.' + String(dig) + 'g')(initialVal);\n    }\n}\n\nfunction zoomAxRanges(axList, r0Fraction, r1Fraction, updates, linkedAxes) {\n    for(var i = 0; i < axList.length; i++) {\n        var axi = axList[i];\n        if(axi.fixedrange) continue;\n\n        if(axi.rangebreaks) {\n            var isY = axi._id.charAt(0) === 'y';\n            var r0F = isY ? (1 - r0Fraction) : r0Fraction;\n            var r1F = isY ? (1 - r1Fraction) : r1Fraction;\n\n            updates[axi._name + '.range[0]'] = axi.l2r(axi.p2l(r0F * axi._length));\n            updates[axi._name + '.range[1]'] = axi.l2r(axi.p2l(r1F * axi._length));\n        } else {\n            var axRangeLinear0 = axi._rl[0];\n            var axRangeLinearSpan = axi._rl[1] - axRangeLinear0;\n            updates[axi._name + '.range[0]'] = axi.l2r(axRangeLinear0 + axRangeLinearSpan * r0Fraction);\n            updates[axi._name + '.range[1]'] = axi.l2r(axRangeLinear0 + axRangeLinearSpan * r1Fraction);\n        }\n    }\n\n    // zoom linked axes about their centers\n    if(linkedAxes && linkedAxes.length) {\n        var linkedR0Fraction = (r0Fraction + (1 - r1Fraction)) / 2;\n        zoomAxRanges(linkedAxes, linkedR0Fraction, 1 - linkedR0Fraction, updates, []);\n    }\n}\n\nfunction dragAxList(axList, pix) {\n    for(var i = 0; i < axList.length; i++) {\n        var axi = axList[i];\n        if(!axi.fixedrange) {\n            if(axi.rangebreaks) {\n                var p0 = 0;\n                var p1 = axi._length;\n                var d0 = axi.p2l(p0 + pix) - axi.p2l(p0);\n                var d1 = axi.p2l(p1 + pix) - axi.p2l(p1);\n                var delta = (d0 + d1) / 2;\n\n                axi.range = [\n                    axi.l2r(axi._rl[0] - delta),\n                    axi.l2r(axi._rl[1] - delta)\n                ];\n            } else {\n                axi.range = [\n                    axi.l2r(axi._rl[0] - pix / axi._m),\n                    axi.l2r(axi._rl[1] - pix / axi._m)\n                ];\n            }\n        }\n    }\n}\n\n// common transform for dragging one end of an axis\n// d>0 is compressing scale (cursor is over the plot,\n//  the axis end should move with the cursor)\n// d<0 is expanding (cursor is off the plot, axis end moves\n//  nonlinearly so you can expand far)\nfunction dZoom(d) {\n    return 1 - ((d >= 0) ? Math.min(d, 0.9) :\n        1 / (1 / Math.max(d, -0.3) + 3.222));\n}\n\nfunction getDragCursor(nsew, dragmode, isMainDrag) {\n    if(!nsew) return 'pointer';\n    if(nsew === 'nsew') {\n        // in this case here, clear cursor and\n        // use the cursor style set on <g .draglayer>\n        if(isMainDrag) return '';\n        if(dragmode === 'pan') return 'move';\n        return 'crosshair';\n    }\n    return nsew.toLowerCase() + '-resize';\n}\n\nfunction makeZoombox(zoomlayer, lum, xs, ys, path0) {\n    return zoomlayer.append('path')\n        .attr('class', 'zoombox')\n        .style({\n            'fill': lum > 0.2 ? 'rgba(0,0,0,0)' : 'rgba(255,255,255,0)',\n            'stroke-width': 0\n        })\n        .attr('transform', 'translate(' + xs + ', ' + ys + ')')\n        .attr('d', path0 + 'Z');\n}\n\nfunction makeCorners(zoomlayer, xs, ys) {\n    return zoomlayer.append('path')\n        .attr('class', 'zoombox-corners')\n        .style({\n            fill: Color.background,\n            stroke: Color.defaultLine,\n            'stroke-width': 1,\n            opacity: 0\n        })\n        .attr('transform', 'translate(' + xs + ', ' + ys + ')')\n        .attr('d', 'M0,0Z');\n}\n\nfunction updateZoombox(zb, corners, box, path0, dimmed, lum) {\n    zb.attr('d',\n        path0 + 'M' + (box.l) + ',' + (box.t) + 'v' + (box.h) +\n        'h' + (box.w) + 'v-' + (box.h) + 'h-' + (box.w) + 'Z');\n    transitionZoombox(zb, corners, dimmed, lum);\n}\n\nfunction transitionZoombox(zb, corners, dimmed, lum) {\n    if(!dimmed) {\n        zb.transition()\n            .style('fill', lum > 0.2 ? 'rgba(0,0,0,0.4)' :\n                'rgba(255,255,255,0.3)')\n            .duration(200);\n        corners.transition()\n            .style('opacity', 1)\n            .duration(200);\n    }\n}\n\nfunction removeZoombox(gd) {\n    d3.select(gd)\n        .selectAll('.zoombox,.js-zoombox-backdrop,.js-zoombox-menu,.zoombox-corners')\n        .remove();\n}\n\nfunction showDoubleClickNotifier(gd) {\n    if(SHOWZOOMOUTTIP && gd.data && gd._context.showTips) {\n        Lib.notifier(Lib._(gd, 'Double-click to zoom back out'), 'long');\n        SHOWZOOMOUTTIP = false;\n    }\n}\n\nfunction xCorners(box, y0) {\n    return 'M' +\n        (box.l - 0.5) + ',' + (y0 - MINZOOM - 0.5) +\n        'h-3v' + (2 * MINZOOM + 1) + 'h3ZM' +\n        (box.r + 0.5) + ',' + (y0 - MINZOOM - 0.5) +\n        'h3v' + (2 * MINZOOM + 1) + 'h-3Z';\n}\n\nfunction yCorners(box, x0) {\n    return 'M' +\n        (x0 - MINZOOM - 0.5) + ',' + (box.t - 0.5) +\n        'v-3h' + (2 * MINZOOM + 1) + 'v3ZM' +\n        (x0 - MINZOOM - 0.5) + ',' + (box.b + 0.5) +\n        'v3h' + (2 * MINZOOM + 1) + 'v-3Z';\n}\n\nfunction xyCorners(box) {\n    var clen = Math.floor(Math.min(box.b - box.t, box.r - box.l, MINZOOM) / 2);\n    return 'M' +\n        (box.l - 3.5) + ',' + (box.t - 0.5 + clen) + 'h3v' + (-clen) +\n            'h' + clen + 'v-3h-' + (clen + 3) + 'ZM' +\n        (box.r + 3.5) + ',' + (box.t - 0.5 + clen) + 'h-3v' + (-clen) +\n            'h' + (-clen) + 'v-3h' + (clen + 3) + 'ZM' +\n        (box.r + 3.5) + ',' + (box.b + 0.5 - clen) + 'h-3v' + clen +\n            'h' + (-clen) + 'v3h' + (clen + 3) + 'ZM' +\n        (box.l - 3.5) + ',' + (box.b + 0.5 - clen) + 'h3v' + clen +\n            'h' + clen + 'v3h-' + (clen + 3) + 'Z';\n}\n\nfunction calcLinks(gd, groups, xaHash, yaHash) {\n    var isSubplotConstrained = false;\n    var xLinks = {};\n    var yLinks = {};\n    var xID, yID, xLinkID, yLinkID;\n\n    for(var i = 0; i < groups.length; i++) {\n        var group = groups[i];\n        // check if any of the x axes we're dragging is in this constraint group\n        for(xID in xaHash) {\n            if(group[xID]) {\n                // put the rest of these axes into xLinks, if we're not already\n                // dragging them, so we know to scale these axes automatically too\n                // to match the changes in the dragged x axes\n                for(xLinkID in group) {\n                    if(!(xLinkID.charAt(0) === 'x' ? xaHash : yaHash)[xLinkID]) {\n                        xLinks[xLinkID] = xID;\n                    }\n                }\n\n                // check if the x and y axes of THIS drag are linked\n                for(yID in yaHash) {\n                    if(group[yID]) isSubplotConstrained = true;\n                }\n            }\n        }\n\n        // now check if any of the y axes we're dragging is in this constraint group\n        // only look for outside links, as we've already checked for links within the dragger\n        for(yID in yaHash) {\n            if(group[yID]) {\n                for(yLinkID in group) {\n                    if(!(yLinkID.charAt(0) === 'x' ? xaHash : yaHash)[yLinkID]) {\n                        yLinks[yLinkID] = yID;\n                    }\n                }\n            }\n        }\n    }\n\n    if(isSubplotConstrained) {\n        // merge xLinks and yLinks if the subplot is constrained,\n        // since we'll always apply both anyway and the two will contain\n        // duplicates\n        Lib.extendFlat(xLinks, yLinks);\n        yLinks = {};\n    }\n\n    var xaHashLinked = {};\n    var xaxesLinked = [];\n    for(xLinkID in xLinks) {\n        var xa = getFromId(gd, xLinkID);\n        xaxesLinked.push(xa);\n        xaHashLinked[xa._id] = xa;\n    }\n\n    var yaHashLinked = {};\n    var yaxesLinked = [];\n    for(yLinkID in yLinks) {\n        var ya = getFromId(gd, yLinkID);\n        yaxesLinked.push(ya);\n        yaHashLinked[ya._id] = ya;\n    }\n\n    return {\n        xaHash: xaHashLinked,\n        yaHash: yaHashLinked,\n        xaxes: xaxesLinked,\n        yaxes: yaxesLinked,\n        xLinks: xLinks,\n        yLinks: yLinks,\n        isSubplotConstrained: isSubplotConstrained\n    };\n}\n\n// still seems to be some confusion about onwheel vs onmousewheel...\nfunction attachWheelEventHandler(element, handler) {\n    if(!supportsPassive) {\n        if(element.onwheel !== undefined) element.onwheel = handler;\n        else if(element.onmousewheel !== undefined) element.onmousewheel = handler;\n        else if(!element.isAddedWheelEvent) {\n            element.isAddedWheelEvent = true;\n            element.addEventListener('wheel', handler, {passive: false});\n        }\n    } else {\n        var wheelEventName = element.onwheel !== undefined ? 'wheel' : 'mousewheel';\n\n        if(element._onwheel) {\n            element.removeEventListener(wheelEventName, element._onwheel);\n        }\n        element._onwheel = handler;\n\n        element.addEventListener(wheelEventName, handler, {passive: false});\n    }\n}\n\nfunction hashValues(hash) {\n    var out = [];\n    for(var k in hash) out.push(hash[k]);\n    return out;\n}\n\nmodule.exports = {\n    makeDragBox: makeDragBox,\n\n    makeDragger: makeDragger,\n    makeRectDragger: makeRectDragger,\n    makeZoombox: makeZoombox,\n    makeCorners: makeCorners,\n\n    updateZoombox: updateZoombox,\n    xyCorners: xyCorners,\n    transitionZoombox: transitionZoombox,\n    removeZoombox: removeZoombox,\n    showDoubleClickNotifier: showDoubleClickNotifier,\n\n    attachWheelEventHandler: attachWheelEventHandler\n};\n"]},"metadata":{},"sourceType":"script"}