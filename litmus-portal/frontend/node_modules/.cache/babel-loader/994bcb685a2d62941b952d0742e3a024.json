{"ast":null,"code":"/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar d3 = require('d3');\n\nvar Lib = require('../../lib');\n\nvar xmlnsNamespaces = require('../../constants/xmlns_namespaces');\n\nvar constants = require('./constants');\n\nmodule.exports = function plot(gd, plotinfo, cdimage, imageLayer) {\n  var xa = plotinfo.xaxis;\n  var ya = plotinfo.yaxis;\n  Lib.makeTraceGroups(imageLayer, cdimage, 'im').each(function (cd) {\n    var plotGroup = d3.select(this);\n    var cd0 = cd[0];\n    var trace = cd0.trace;\n    var z = cd0.z;\n    var x0 = cd0.x0;\n    var y0 = cd0.y0;\n    var w = cd0.w;\n    var h = cd0.h;\n    var dx = trace.dx;\n    var dy = trace.dy;\n    var left, right, temp, top, bottom, i; // in case of log of a negative\n\n    i = 0;\n\n    while (left === undefined && i < w) {\n      left = xa.c2p(x0 + i * dx);\n      i++;\n    }\n\n    i = w;\n\n    while (right === undefined && i > 0) {\n      right = xa.c2p(x0 + i * dx);\n      i--;\n    }\n\n    i = 0;\n\n    while (top === undefined && i < h) {\n      top = ya.c2p(y0 + i * dy);\n      i++;\n    }\n\n    i = h;\n\n    while (bottom === undefined && i > 0) {\n      bottom = ya.c2p(y0 + i * dy);\n      i--;\n    }\n\n    if (right < left) {\n      temp = right;\n      right = left;\n      left = temp;\n    }\n\n    if (bottom < top) {\n      temp = top;\n      top = bottom;\n      bottom = temp;\n    } // Reduce image size when zoomed in to save memory\n\n\n    var extra = 0.5; // half the axis size\n\n    left = Math.max(-extra * xa._length, left);\n    right = Math.min((1 + extra) * xa._length, right);\n    top = Math.max(-extra * ya._length, top);\n    bottom = Math.min((1 + extra) * ya._length, bottom);\n    var imageWidth = Math.round(right - left);\n    var imageHeight = Math.round(bottom - top); // if image is entirely off-screen, don't even draw it\n\n    var isOffScreen = imageWidth <= 0 || imageHeight <= 0;\n\n    if (isOffScreen) {\n      var noImage = plotGroup.selectAll('image').data([]);\n      noImage.exit().remove();\n      return;\n    } // Draw each pixel\n\n\n    var canvas = document.createElement('canvas');\n    canvas.width = imageWidth;\n    canvas.height = imageHeight;\n    var context = canvas.getContext('2d');\n\n    var ipx = function ipx(i) {\n      return Lib.constrain(Math.round(xa.c2p(x0 + i * dx) - left), 0, imageWidth);\n    };\n\n    var jpx = function jpx(j) {\n      return Lib.constrain(Math.round(ya.c2p(y0 + j * dy) - top), 0, imageHeight);\n    };\n\n    var fmt = constants.colormodel[trace.colormodel].fmt;\n    var c;\n\n    for (i = 0; i < cd0.w; i++) {\n      var ipx0 = ipx(i);\n      var ipx1 = ipx(i + 1);\n      if (ipx1 === ipx0 || isNaN(ipx1) || isNaN(ipx0)) continue;\n\n      for (var j = 0; j < cd0.h; j++) {\n        var jpx0 = jpx(j);\n        var jpx1 = jpx(j + 1);\n        if (jpx1 === jpx0 || isNaN(jpx1) || isNaN(jpx0) || !z[j][i]) continue;\n        c = trace._scaler(z[j][i]);\n\n        if (c) {\n          context.fillStyle = trace.colormodel + '(' + fmt(c).join(',') + ')';\n        } else {\n          // Return a transparent pixel\n          context.fillStyle = 'rgba(0,0,0,0)';\n        }\n\n        context.fillRect(ipx0, jpx0, ipx1 - ipx0, jpx1 - jpx0);\n      }\n    }\n\n    var image3 = plotGroup.selectAll('image').data(cd);\n    image3.enter().append('svg:image').attr({\n      xmlns: xmlnsNamespaces.svg,\n      preserveAspectRatio: 'none'\n    });\n    image3.attr({\n      height: imageHeight,\n      width: imageWidth,\n      x: left,\n      y: top,\n      'xlink:href': canvas.toDataURL('image/png')\n    });\n  });\n};","map":{"version":3,"sources":["/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/node_modules/plotly.js/src/traces/image/plot.js"],"names":["d3","require","Lib","xmlnsNamespaces","constants","module","exports","plot","gd","plotinfo","cdimage","imageLayer","xa","xaxis","ya","yaxis","makeTraceGroups","each","cd","plotGroup","select","cd0","trace","z","x0","y0","w","h","dx","dy","left","right","temp","top","bottom","i","undefined","c2p","extra","Math","max","_length","min","imageWidth","round","imageHeight","isOffScreen","noImage","selectAll","data","exit","remove","canvas","document","createElement","width","height","context","getContext","ipx","constrain","jpx","j","fmt","colormodel","c","ipx0","ipx1","isNaN","jpx0","jpx1","_scaler","fillStyle","join","fillRect","image3","enter","append","attr","xmlns","svg","preserveAspectRatio","x","y","toDataURL"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar d3 = require('d3');\nvar Lib = require('../../lib');\nvar xmlnsNamespaces = require('../../constants/xmlns_namespaces');\nvar constants = require('./constants');\n\nmodule.exports = function plot(gd, plotinfo, cdimage, imageLayer) {\n    var xa = plotinfo.xaxis;\n    var ya = plotinfo.yaxis;\n\n    Lib.makeTraceGroups(imageLayer, cdimage, 'im').each(function(cd) {\n        var plotGroup = d3.select(this);\n        var cd0 = cd[0];\n        var trace = cd0.trace;\n\n        var z = cd0.z;\n        var x0 = cd0.x0;\n        var y0 = cd0.y0;\n        var w = cd0.w;\n        var h = cd0.h;\n        var dx = trace.dx;\n        var dy = trace.dy;\n\n        var left, right, temp, top, bottom, i;\n        // in case of log of a negative\n        i = 0;\n        while(left === undefined && i < w) {\n            left = xa.c2p(x0 + i * dx);\n            i++;\n        }\n        i = w;\n        while(right === undefined && i > 0) {\n            right = xa.c2p(x0 + i * dx);\n            i--;\n        }\n        i = 0;\n        while(top === undefined && i < h) {\n            top = ya.c2p(y0 + i * dy);\n            i++;\n        }\n        i = h;\n        while(bottom === undefined && i > 0) {\n            bottom = ya.c2p(y0 + i * dy);\n            i--;\n        }\n\n        if(right < left) {\n            temp = right;\n            right = left;\n            left = temp;\n        }\n\n        if(bottom < top) {\n            temp = top;\n            top = bottom;\n            bottom = temp;\n        }\n\n        // Reduce image size when zoomed in to save memory\n        var extra = 0.5; // half the axis size\n        left = Math.max(-extra * xa._length, left);\n        right = Math.min((1 + extra) * xa._length, right);\n        top = Math.max(-extra * ya._length, top);\n        bottom = Math.min((1 + extra) * ya._length, bottom);\n        var imageWidth = Math.round(right - left);\n        var imageHeight = Math.round(bottom - top);\n\n        // if image is entirely off-screen, don't even draw it\n        var isOffScreen = (imageWidth <= 0 || imageHeight <= 0);\n        if(isOffScreen) {\n            var noImage = plotGroup.selectAll('image').data([]);\n            noImage.exit().remove();\n            return;\n        }\n\n        // Draw each pixel\n        var canvas = document.createElement('canvas');\n        canvas.width = imageWidth;\n        canvas.height = imageHeight;\n        var context = canvas.getContext('2d');\n\n        var ipx = function(i) {return Lib.constrain(Math.round(xa.c2p(x0 + i * dx) - left), 0, imageWidth);};\n        var jpx = function(j) {return Lib.constrain(Math.round(ya.c2p(y0 + j * dy) - top), 0, imageHeight);};\n\n        var fmt = constants.colormodel[trace.colormodel].fmt;\n        var c;\n        for(i = 0; i < cd0.w; i++) {\n            var ipx0 = ipx(i); var ipx1 = ipx(i + 1);\n            if(ipx1 === ipx0 || isNaN(ipx1) || isNaN(ipx0)) continue;\n            for(var j = 0; j < cd0.h; j++) {\n                var jpx0 = jpx(j); var jpx1 = jpx(j + 1);\n                if(jpx1 === jpx0 || isNaN(jpx1) || isNaN(jpx0) || !z[j][i]) continue;\n                c = trace._scaler(z[j][i]);\n                if(c) {\n                    context.fillStyle = trace.colormodel + '(' + fmt(c).join(',') + ')';\n                } else {\n                    // Return a transparent pixel\n                    context.fillStyle = 'rgba(0,0,0,0)';\n                }\n                context.fillRect(ipx0, jpx0, ipx1 - ipx0, jpx1 - jpx0);\n            }\n        }\n\n        var image3 = plotGroup.selectAll('image')\n            .data(cd);\n\n        image3.enter().append('svg:image').attr({\n            xmlns: xmlnsNamespaces.svg,\n            preserveAspectRatio: 'none'\n        });\n\n        image3.attr({\n            height: imageHeight,\n            width: imageWidth,\n            x: left,\n            y: top,\n            'xlink:href': canvas.toDataURL('image/png')\n        });\n    });\n};\n"]},"metadata":{},"sourceType":"script"}