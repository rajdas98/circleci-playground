{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject11() {\n  var data = _taggedTemplateLiteral([\"\\n  query getExperimentData($experimentInput: ExperimentInput!) {\\n    getYAMLData(experimentInput: $experimentInput)\\n  }\\n\"]);\n\n  _templateObject11 = function _templateObject11() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject10() {\n  var data = _taggedTemplateLiteral([\"\\n  query getEngineData($experimentInput: ExperimentInput!) {\\n    getYAMLData(experimentInput: $experimentInput)\\n  }\\n\"]);\n\n  _templateObject10 = function _templateObject10() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject9() {\n  var data = _taggedTemplateLiteral([\"\\n  query getHubStatus($data: String!) {\\n    getHubStatus(projectID: $data) {\\n      id\\n      HubName\\n      RepoBranch\\n      RepoURL\\n      TotalExp\\n      IsAvailable\\n    }\\n  }\\n\"]);\n\n  _templateObject9 = function _templateObject9() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject8() {\n  var data = _taggedTemplateLiteral([\"\\n  query getExperiment($data: ExperimentInput!) {\\n    getHubExperiment(experimentInput: $data) {\\n      ApiVersion\\n      Kind\\n      Metadata {\\n        Name\\n        Version\\n        Annotations {\\n          Categories\\n          Vendor\\n          CreatedAt\\n          Repository\\n          Support\\n          ChartDescription\\n        }\\n      }\\n      Spec {\\n        DisplayName\\n        CategoryDescription\\n        Keywords\\n        Maturity\\n        Experiments\\n        Maintainers {\\n          Name\\n          Email\\n        }\\n        MinKubeVersion\\n        Provider\\n        Links {\\n          Name\\n          Url\\n        }\\n        ChaosExpCRDLink\\n        Platforms\\n        ChaosType\\n      }\\n      PackageInfo {\\n        PackageName\\n        Experiments {\\n          Name\\n          CSV\\n          Desc\\n        }\\n      }\\n      Experiments {\\n        ApiVersion\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject8 = function _templateObject8() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject7() {\n  var data = _taggedTemplateLiteral([\"\\n  query getCharts($HubName: String!, $projectID: String!) {\\n    getCharts(HubName: $HubName, projectID: $projectID) {\\n      ApiVersion\\n      Kind\\n      Metadata {\\n        Name\\n        Version\\n        Annotations {\\n          Categories\\n          Vendor\\n          CreatedAt\\n          Repository\\n          Support\\n          ChartDescription\\n        }\\n      }\\n      Spec {\\n        DisplayName\\n        CategoryDescription\\n        Keywords\\n        Maturity\\n        Experiments\\n        Maintainers {\\n          Name\\n          Email\\n        }\\n        MinKubeVersion\\n        Provider\\n        Links {\\n          Name\\n          Url\\n        }\\n        ChaosExpCRDLink\\n        Platforms\\n        ChaosType\\n      }\\n      PackageInfo {\\n        PackageName\\n        Experiments {\\n          Name\\n          CSV\\n          Desc\\n        }\\n      }\\n      Experiments {\\n        ApiVersion\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n  query allUsers {\\n    users {\\n      id\\n      name\\n      username\\n      email\\n    }\\n  }\\n\"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n  query getClusters($project_id: String!, $cluster_type: String) {\\n    getCluster(project_id: $project_id, cluster_type: $cluster_type) {\\n      cluster_id\\n      is_active\\n      project_id\\n      cluster_name\\n      description\\n      platform_name\\n      access_key\\n      is_registered\\n      is_cluster_confirmed\\n      updated_at\\n      created_at\\n      cluster_type\\n      no_of_schedules\\n      no_of_workflows\\n      token\\n      agent_namespace\\n      serviceaccount\\n      agent_scope\\n      agent_ns_exists\\n      agent_sa_exists\\n    }\\n  }\\n\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n  query getUser($username: String!) {\\n    getUser(username: $username) {\\n      username\\n      email\\n      id\\n      name\\n      projects {\\n        members {\\n          user_id\\n          user_name\\n          role\\n          invitation\\n          name\\n          email\\n          joined_at\\n        }\\n        name\\n        id\\n      }\\n      company_name\\n      updated_at\\n      created_at\\n      removed_at\\n      is_email_verified\\n      state\\n      role\\n    }\\n  }\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  query workflowListDetails($projectID: String!, $workflowIDs: [ID]) {\\n    ListWorkflow(project_id: $projectID, workflow_ids: $workflowIDs) {\\n      workflow_id\\n      cronSyntax\\n      cluster_name\\n      workflow_name\\n      workflow_description\\n      weightages {\\n        experiment_name\\n        weightage\\n      }\\n      isCustomWorkflow\\n      updated_at\\n      created_at\\n      project_id\\n      cluster_id\\n      cluster_type\\n      workflow_runs {\\n        execution_data\\n        workflow_run_id\\n        last_updated\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  query scheduleDetails($projectID: String!) {\\n    getScheduledWorkflows(project_id: $projectID) {\\n      workflow_id\\n      workflow_manifest\\n      cronSyntax\\n      workflow_name\\n      workflow_description\\n      weightages {\\n        experiment_name\\n        weightage\\n      }\\n      isCustomWorkflow\\n      updated_at\\n      created_at\\n      project_id\\n      cluster_id\\n      cluster_type\\n      cluster_name\\n      isRemoved\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query workflowDetails($projectID: String!) {\\n    getWorkFlowRuns(project_id: $projectID) {\\n      workflow_id\\n      workflow_name\\n      workflow_run_id\\n      execution_data\\n      project_id\\n      cluster_name\\n      last_updated\\n      cluster_type\\n      cluster_id\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from '@apollo/client';\nexport var WORKFLOW_DETAILS = gql(_templateObject());\nexport var SCHEDULE_DETAILS = gql(_templateObject2());\nexport var WORKFLOW_LIST_DETAILS = gql(_templateObject3());\nexport var GET_USER = gql(_templateObject4());\nexport var GET_CLUSTER = gql(_templateObject5());\nexport var ALL_USERS = gql(_templateObject6());\nexport var GET_CHARTS_DATA = gql(_templateObject7());\nexport var GET_EXPERIMENT_DATA = gql(_templateObject8());\nexport var GET_HUB_STATUS = gql(_templateObject9());\nexport var GET_ENGINE_YAML = gql(_templateObject10());\nexport var GET_EXPERIMENT_YAML = gql(_templateObject11());","map":{"version":3,"sources":["/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/graphql/quries.ts"],"names":["gql","WORKFLOW_DETAILS","SCHEDULE_DETAILS","WORKFLOW_LIST_DETAILS","GET_USER","GET_CLUSTER","ALL_USERS","GET_CHARTS_DATA","GET_EXPERIMENT_DATA","GET_HUB_STATUS","GET_ENGINE_YAML","GET_EXPERIMENT_YAML"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,GAAT,QAAoB,gBAApB;AAEA,OAAO,IAAMC,gBAAgB,GAAGD,GAAH,mBAAtB;AAgBP,OAAO,IAAME,gBAAgB,GAAGF,GAAH,oBAAtB;AAwBP,OAAO,IAAMG,qBAAqB,GAAGH,GAAH,oBAA3B;AA2BP,OAAO,IAAMI,QAAQ,GAAGJ,GAAH,oBAAd;AA+BP,OAAO,IAAMK,WAAW,GAAGL,GAAH,oBAAjB;AA2BP,OAAO,IAAMM,SAAS,GAAGN,GAAH,oBAAf;AAWP,OAAO,IAAMO,eAAe,GAAGP,GAAH,oBAArB;AAoDP,OAAO,IAAMQ,mBAAmB,GAAGR,GAAH,oBAAzB;AAoDP,OAAO,IAAMS,cAAc,GAAGT,GAAH,oBAApB;AAaP,OAAO,IAAMU,eAAe,GAAGV,GAAH,qBAArB;AAMP,OAAO,IAAMW,mBAAmB,GAAGX,GAAH,qBAAzB","sourcesContent":["import { gql } from '@apollo/client';\n\nexport const WORKFLOW_DETAILS = gql`\n  query workflowDetails($projectID: String!) {\n    getWorkFlowRuns(project_id: $projectID) {\n      workflow_id\n      workflow_name\n      workflow_run_id\n      execution_data\n      project_id\n      cluster_name\n      last_updated\n      cluster_type\n      cluster_id\n    }\n  }\n`;\n\nexport const SCHEDULE_DETAILS = gql`\n  query scheduleDetails($projectID: String!) {\n    getScheduledWorkflows(project_id: $projectID) {\n      workflow_id\n      workflow_manifest\n      cronSyntax\n      workflow_name\n      workflow_description\n      weightages {\n        experiment_name\n        weightage\n      }\n      isCustomWorkflow\n      updated_at\n      created_at\n      project_id\n      cluster_id\n      cluster_type\n      cluster_name\n      isRemoved\n    }\n  }\n`;\n\nexport const WORKFLOW_LIST_DETAILS = gql`\n  query workflowListDetails($projectID: String!, $workflowIDs: [ID]) {\n    ListWorkflow(project_id: $projectID, workflow_ids: $workflowIDs) {\n      workflow_id\n      cronSyntax\n      cluster_name\n      workflow_name\n      workflow_description\n      weightages {\n        experiment_name\n        weightage\n      }\n      isCustomWorkflow\n      updated_at\n      created_at\n      project_id\n      cluster_id\n      cluster_type\n      workflow_runs {\n        execution_data\n        workflow_run_id\n        last_updated\n      }\n    }\n  }\n`;\n\nexport const GET_USER = gql`\n  query getUser($username: String!) {\n    getUser(username: $username) {\n      username\n      email\n      id\n      name\n      projects {\n        members {\n          user_id\n          user_name\n          role\n          invitation\n          name\n          email\n          joined_at\n        }\n        name\n        id\n      }\n      company_name\n      updated_at\n      created_at\n      removed_at\n      is_email_verified\n      state\n      role\n    }\n  }\n`;\n\nexport const GET_CLUSTER = gql`\n  query getClusters($project_id: String!, $cluster_type: String) {\n    getCluster(project_id: $project_id, cluster_type: $cluster_type) {\n      cluster_id\n      is_active\n      project_id\n      cluster_name\n      description\n      platform_name\n      access_key\n      is_registered\n      is_cluster_confirmed\n      updated_at\n      created_at\n      cluster_type\n      no_of_schedules\n      no_of_workflows\n      token\n      agent_namespace\n      serviceaccount\n      agent_scope\n      agent_ns_exists\n      agent_sa_exists\n    }\n  }\n`;\n\nexport const ALL_USERS = gql`\n  query allUsers {\n    users {\n      id\n      name\n      username\n      email\n    }\n  }\n`;\n\nexport const GET_CHARTS_DATA = gql`\n  query getCharts($HubName: String!, $projectID: String!) {\n    getCharts(HubName: $HubName, projectID: $projectID) {\n      ApiVersion\n      Kind\n      Metadata {\n        Name\n        Version\n        Annotations {\n          Categories\n          Vendor\n          CreatedAt\n          Repository\n          Support\n          ChartDescription\n        }\n      }\n      Spec {\n        DisplayName\n        CategoryDescription\n        Keywords\n        Maturity\n        Experiments\n        Maintainers {\n          Name\n          Email\n        }\n        MinKubeVersion\n        Provider\n        Links {\n          Name\n          Url\n        }\n        ChaosExpCRDLink\n        Platforms\n        ChaosType\n      }\n      PackageInfo {\n        PackageName\n        Experiments {\n          Name\n          CSV\n          Desc\n        }\n      }\n      Experiments {\n        ApiVersion\n      }\n    }\n  }\n`;\n\nexport const GET_EXPERIMENT_DATA = gql`\n  query getExperiment($data: ExperimentInput!) {\n    getHubExperiment(experimentInput: $data) {\n      ApiVersion\n      Kind\n      Metadata {\n        Name\n        Version\n        Annotations {\n          Categories\n          Vendor\n          CreatedAt\n          Repository\n          Support\n          ChartDescription\n        }\n      }\n      Spec {\n        DisplayName\n        CategoryDescription\n        Keywords\n        Maturity\n        Experiments\n        Maintainers {\n          Name\n          Email\n        }\n        MinKubeVersion\n        Provider\n        Links {\n          Name\n          Url\n        }\n        ChaosExpCRDLink\n        Platforms\n        ChaosType\n      }\n      PackageInfo {\n        PackageName\n        Experiments {\n          Name\n          CSV\n          Desc\n        }\n      }\n      Experiments {\n        ApiVersion\n      }\n    }\n  }\n`;\n\nexport const GET_HUB_STATUS = gql`\n  query getHubStatus($data: String!) {\n    getHubStatus(projectID: $data) {\n      id\n      HubName\n      RepoBranch\n      RepoURL\n      TotalExp\n      IsAvailable\n    }\n  }\n`;\n\nexport const GET_ENGINE_YAML = gql`\n  query getEngineData($experimentInput: ExperimentInput!) {\n    getYAMLData(experimentInput: $experimentInput)\n  }\n`;\n\nexport const GET_EXPERIMENT_YAML = gql`\n  query getExperimentData($experimentInput: ExperimentInput!) {\n    getYAMLData(experimentInput: $experimentInput)\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}