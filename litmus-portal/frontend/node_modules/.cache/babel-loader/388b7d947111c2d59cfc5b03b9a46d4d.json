{"ast":null,"code":"/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar cluster = require('point-cluster');\n\nvar Lib = require('../../lib');\n\nvar AxisIDs = require('../../plots/cartesian/axis_ids');\n\nvar findExtremes = require('../../plots/cartesian/autorange').findExtremes;\n\nvar scatterCalc = require('../scatter/calc');\n\nvar calcMarkerSize = scatterCalc.calcMarkerSize;\nvar calcAxisExpansion = scatterCalc.calcAxisExpansion;\nvar setFirstScatter = scatterCalc.setFirstScatter;\n\nvar calcColorscale = require('../scatter/colorscale_calc');\n\nvar convert = require('./convert');\n\nvar sceneUpdate = require('./scene_update');\n\nvar BADNUM = require('../../constants/numerical').BADNUM;\n\nvar TOO_MANY_POINTS = require('./constants').TOO_MANY_POINTS;\n\nmodule.exports = function calc(gd, trace) {\n  var fullLayout = gd._fullLayout;\n  var xa = AxisIDs.getFromId(gd, trace.xaxis);\n  var ya = AxisIDs.getFromId(gd, trace.yaxis);\n  var subplot = fullLayout._plots[trace.xaxis + trace.yaxis];\n  var len = trace._length;\n  var hasTooManyPoints = len >= TOO_MANY_POINTS;\n  var len2 = len * 2;\n  var stash = {};\n  var i, xx, yy;\n  var x = trace._x = xa.makeCalcdata(trace, 'x');\n  var y = trace._y = ya.makeCalcdata(trace, 'y'); // we need hi-precision for scatter2d,\n  // regl-scatter2d uses NaNs for bad/missing values\n\n  var positions = new Array(len2);\n\n  for (i = 0; i < len; i++) {\n    xx = x[i];\n    yy = y[i];\n    positions[i * 2] = xx === BADNUM ? NaN : xx;\n    positions[i * 2 + 1] = yy === BADNUM ? NaN : yy;\n  }\n\n  if (xa.type === 'log') {\n    for (i = 0; i < len2; i += 2) {\n      positions[i] = xa.c2l(positions[i]);\n    }\n  }\n\n  if (ya.type === 'log') {\n    for (i = 1; i < len2; i += 2) {\n      positions[i] = ya.c2l(positions[i]);\n    }\n  } // we don't build a tree for log axes since it takes long to convert log2px\n  // and it is also\n\n\n  if (hasTooManyPoints && xa.type !== 'log' && ya.type !== 'log') {\n    // FIXME: delegate this to webworker\n    stash.tree = cluster(positions);\n  } else {\n    var ids = stash.ids = new Array(len);\n\n    for (i = 0; i < len; i++) {\n      ids[i] = i;\n    }\n  } // create scene options and scene\n\n\n  calcColorscale(gd, trace);\n  var opts = sceneOptions(gd, subplot, trace, positions, x, y);\n  var scene = sceneUpdate(gd, subplot); // Reuse SVG scatter axis expansion routine.\n  // For graphs with very large number of points and array marker.size,\n  // use average marker size instead to speed things up.\n\n  setFirstScatter(fullLayout, trace);\n  var ppad;\n\n  if (!hasTooManyPoints) {\n    ppad = calcMarkerSize(trace, len);\n  } else if (opts.marker) {\n    ppad = 2 * (opts.marker.sizeAvg || Math.max(opts.marker.size, 3));\n  }\n\n  calcAxisExpansion(gd, trace, xa, ya, x, y, ppad);\n  if (opts.errorX) expandForErrorBars(trace, xa, opts.errorX);\n  if (opts.errorY) expandForErrorBars(trace, ya, opts.errorY); // set flags to create scene renderers\n\n  if (opts.fill && !scene.fill2d) scene.fill2d = true;\n  if (opts.marker && !scene.scatter2d) scene.scatter2d = true;\n  if (opts.line && !scene.line2d) scene.line2d = true;\n  if ((opts.errorX || opts.errorY) && !scene.error2d) scene.error2d = true;\n  if (opts.text && !scene.glText) scene.glText = true;\n  if (opts.marker) opts.marker.snap = len;\n  scene.lineOptions.push(opts.line);\n  scene.errorXOptions.push(opts.errorX);\n  scene.errorYOptions.push(opts.errorY);\n  scene.fillOptions.push(opts.fill);\n  scene.markerOptions.push(opts.marker);\n  scene.markerSelectedOptions.push(opts.markerSel);\n  scene.markerUnselectedOptions.push(opts.markerUnsel);\n  scene.textOptions.push(opts.text);\n  scene.textSelectedOptions.push(opts.textSel);\n  scene.textUnselectedOptions.push(opts.textUnsel);\n  scene.selectBatch.push([]);\n  scene.unselectBatch.push([]);\n  stash._scene = scene;\n  stash.index = scene.count;\n  stash.x = x;\n  stash.y = y;\n  stash.positions = positions;\n  scene.count++;\n  return [{\n    x: false,\n    y: false,\n    t: stash,\n    trace: trace\n  }];\n};\n\nfunction expandForErrorBars(trace, ax, opts) {\n  var extremes = trace._extremes[ax._id];\n  var errExt = findExtremes(ax, opts._bnds, {\n    padded: true\n  });\n  extremes.min = extremes.min.concat(errExt.min);\n  extremes.max = extremes.max.concat(errExt.max);\n}\n\nfunction sceneOptions(gd, subplot, trace, positions, x, y) {\n  var opts = convert.style(gd, trace);\n\n  if (opts.marker) {\n    opts.marker.positions = positions;\n  }\n\n  if (opts.line && positions.length > 1) {\n    Lib.extendFlat(opts.line, convert.linePositions(gd, trace, positions));\n  }\n\n  if (opts.errorX || opts.errorY) {\n    var errors = convert.errorBarPositions(gd, trace, positions, x, y);\n\n    if (opts.errorX) {\n      Lib.extendFlat(opts.errorX, errors.x);\n    }\n\n    if (opts.errorY) {\n      Lib.extendFlat(opts.errorY, errors.y);\n    }\n  }\n\n  if (opts.text) {\n    Lib.extendFlat(opts.text, {\n      positions: positions\n    }, convert.textPosition(gd, trace, opts.text, opts.marker));\n    Lib.extendFlat(opts.textSel, {\n      positions: positions\n    }, convert.textPosition(gd, trace, opts.text, opts.markerSel));\n    Lib.extendFlat(opts.textUnsel, {\n      positions: positions\n    }, convert.textPosition(gd, trace, opts.text, opts.markerUnsel));\n  }\n\n  return opts;\n}","map":{"version":3,"sources":["/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/node_modules/plotly.js/src/traces/scattergl/calc.js"],"names":["cluster","require","Lib","AxisIDs","findExtremes","scatterCalc","calcMarkerSize","calcAxisExpansion","setFirstScatter","calcColorscale","convert","sceneUpdate","BADNUM","TOO_MANY_POINTS","module","exports","calc","gd","trace","fullLayout","_fullLayout","xa","getFromId","xaxis","ya","yaxis","subplot","_plots","len","_length","hasTooManyPoints","len2","stash","i","xx","yy","x","_x","makeCalcdata","y","_y","positions","Array","NaN","type","c2l","tree","ids","opts","sceneOptions","scene","ppad","marker","sizeAvg","Math","max","size","errorX","expandForErrorBars","errorY","fill","fill2d","scatter2d","line","line2d","error2d","text","glText","snap","lineOptions","push","errorXOptions","errorYOptions","fillOptions","markerOptions","markerSelectedOptions","markerSel","markerUnselectedOptions","markerUnsel","textOptions","textSelectedOptions","textSel","textUnselectedOptions","textUnsel","selectBatch","unselectBatch","_scene","index","count","t","ax","extremes","_extremes","_id","errExt","_bnds","padded","min","concat","style","length","extendFlat","linePositions","errors","errorBarPositions","textPosition"],"mappings":"AAAA;;;;;;;AAQA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,eAAD,CAArB;;AAEA,IAAIC,GAAG,GAAGD,OAAO,CAAC,WAAD,CAAjB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,gCAAD,CAArB;;AACA,IAAIG,YAAY,GAAGH,OAAO,CAAC,iCAAD,CAAP,CAA2CG,YAA9D;;AAEA,IAAIC,WAAW,GAAGJ,OAAO,CAAC,iBAAD,CAAzB;;AACA,IAAIK,cAAc,GAAGD,WAAW,CAACC,cAAjC;AACA,IAAIC,iBAAiB,GAAGF,WAAW,CAACE,iBAApC;AACA,IAAIC,eAAe,GAAGH,WAAW,CAACG,eAAlC;;AACA,IAAIC,cAAc,GAAGR,OAAO,CAAC,4BAAD,CAA5B;;AACA,IAAIS,OAAO,GAAGT,OAAO,CAAC,WAAD,CAArB;;AACA,IAAIU,WAAW,GAAGV,OAAO,CAAC,gBAAD,CAAzB;;AAEA,IAAIW,MAAM,GAAGX,OAAO,CAAC,2BAAD,CAAP,CAAqCW,MAAlD;;AACA,IAAIC,eAAe,GAAGZ,OAAO,CAAC,aAAD,CAAP,CAAuBY,eAA7C;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,IAAT,CAAcC,EAAd,EAAkBC,KAAlB,EAAyB;AACtC,MAAIC,UAAU,GAAGF,EAAE,CAACG,WAApB;AACA,MAAIC,EAAE,GAAGlB,OAAO,CAACmB,SAAR,CAAkBL,EAAlB,EAAsBC,KAAK,CAACK,KAA5B,CAAT;AACA,MAAIC,EAAE,GAAGrB,OAAO,CAACmB,SAAR,CAAkBL,EAAlB,EAAsBC,KAAK,CAACO,KAA5B,CAAT;AACA,MAAIC,OAAO,GAAGP,UAAU,CAACQ,MAAX,CAAkBT,KAAK,CAACK,KAAN,GAAcL,KAAK,CAACO,KAAtC,CAAd;AACA,MAAIG,GAAG,GAAGV,KAAK,CAACW,OAAhB;AACA,MAAIC,gBAAgB,GAAGF,GAAG,IAAIf,eAA9B;AACA,MAAIkB,IAAI,GAAGH,GAAG,GAAG,CAAjB;AACA,MAAII,KAAK,GAAG,EAAZ;AACA,MAAIC,CAAJ,EAAOC,EAAP,EAAWC,EAAX;AAEA,MAAIC,CAAC,GAAGlB,KAAK,CAACmB,EAAN,GAAWhB,EAAE,CAACiB,YAAH,CAAgBpB,KAAhB,EAAuB,GAAvB,CAAnB;AACA,MAAIqB,CAAC,GAAGrB,KAAK,CAACsB,EAAN,GAAWhB,EAAE,CAACc,YAAH,CAAgBpB,KAAhB,EAAuB,GAAvB,CAAnB,CAZsC,CActC;AACA;;AACA,MAAIuB,SAAS,GAAG,IAAIC,KAAJ,CAAUX,IAAV,CAAhB;;AACA,OAAIE,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGL,GAAf,EAAoBK,CAAC,EAArB,EAAyB;AACrBC,IAAAA,EAAE,GAAGE,CAAC,CAACH,CAAD,CAAN;AACAE,IAAAA,EAAE,GAAGI,CAAC,CAACN,CAAD,CAAN;AACAQ,IAAAA,SAAS,CAACR,CAAC,GAAG,CAAL,CAAT,GAAmBC,EAAE,KAAKtB,MAAP,GAAgB+B,GAAhB,GAAsBT,EAAzC;AACAO,IAAAA,SAAS,CAACR,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAT,GAAuBE,EAAE,KAAKvB,MAAP,GAAgB+B,GAAhB,GAAsBR,EAA7C;AACH;;AAED,MAAGd,EAAE,CAACuB,IAAH,KAAY,KAAf,EAAsB;AAClB,SAAIX,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGF,IAAf,EAAqBE,CAAC,IAAI,CAA1B,EAA6B;AACzBQ,MAAAA,SAAS,CAACR,CAAD,CAAT,GAAeZ,EAAE,CAACwB,GAAH,CAAOJ,SAAS,CAACR,CAAD,CAAhB,CAAf;AACH;AACJ;;AACD,MAAGT,EAAE,CAACoB,IAAH,KAAY,KAAf,EAAsB;AAClB,SAAIX,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGF,IAAf,EAAqBE,CAAC,IAAI,CAA1B,EAA6B;AACzBQ,MAAAA,SAAS,CAACR,CAAD,CAAT,GAAeT,EAAE,CAACqB,GAAH,CAAOJ,SAAS,CAACR,CAAD,CAAhB,CAAf;AACH;AACJ,GAjCqC,CAmCtC;AACA;;;AACA,MAAGH,gBAAgB,IAAKT,EAAE,CAACuB,IAAH,KAAY,KAAZ,IAAqBpB,EAAE,CAACoB,IAAH,KAAY,KAAzD,EAAiE;AAC7D;AACAZ,IAAAA,KAAK,CAACc,IAAN,GAAa9C,OAAO,CAACyC,SAAD,CAApB;AACH,GAHD,MAGO;AACH,QAAIM,GAAG,GAAGf,KAAK,CAACe,GAAN,GAAY,IAAIL,KAAJ,CAAUd,GAAV,CAAtB;;AACA,SAAIK,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGL,GAAf,EAAoBK,CAAC,EAArB,EAAyB;AACrBc,MAAAA,GAAG,CAACd,CAAD,CAAH,GAASA,CAAT;AACH;AACJ,GA7CqC,CA+CtC;;;AACAxB,EAAAA,cAAc,CAACQ,EAAD,EAAKC,KAAL,CAAd;AACA,MAAI8B,IAAI,GAAGC,YAAY,CAAChC,EAAD,EAAKS,OAAL,EAAcR,KAAd,EAAqBuB,SAArB,EAAgCL,CAAhC,EAAmCG,CAAnC,CAAvB;AACA,MAAIW,KAAK,GAAGvC,WAAW,CAACM,EAAD,EAAKS,OAAL,CAAvB,CAlDsC,CAoDtC;AACA;AACA;;AACAlB,EAAAA,eAAe,CAACW,UAAD,EAAaD,KAAb,CAAf;AACA,MAAIiC,IAAJ;;AACA,MAAG,CAACrB,gBAAJ,EAAsB;AAClBqB,IAAAA,IAAI,GAAG7C,cAAc,CAACY,KAAD,EAAQU,GAAR,CAArB;AACH,GAFD,MAEO,IAAGoB,IAAI,CAACI,MAAR,EAAgB;AACnBD,IAAAA,IAAI,GAAG,KAAKH,IAAI,CAACI,MAAL,CAAYC,OAAZ,IAAuBC,IAAI,CAACC,GAAL,CAASP,IAAI,CAACI,MAAL,CAAYI,IAArB,EAA2B,CAA3B,CAA5B,CAAP;AACH;;AACDjD,EAAAA,iBAAiB,CAACU,EAAD,EAAKC,KAAL,EAAYG,EAAZ,EAAgBG,EAAhB,EAAoBY,CAApB,EAAuBG,CAAvB,EAA0BY,IAA1B,CAAjB;AACA,MAAGH,IAAI,CAACS,MAAR,EAAgBC,kBAAkB,CAACxC,KAAD,EAAQG,EAAR,EAAY2B,IAAI,CAACS,MAAjB,CAAlB;AAChB,MAAGT,IAAI,CAACW,MAAR,EAAgBD,kBAAkB,CAACxC,KAAD,EAAQM,EAAR,EAAYwB,IAAI,CAACW,MAAjB,CAAlB,CAhEsB,CAkEtC;;AACA,MAAGX,IAAI,CAACY,IAAL,IAAa,CAACV,KAAK,CAACW,MAAvB,EAA+BX,KAAK,CAACW,MAAN,GAAe,IAAf;AAC/B,MAAGb,IAAI,CAACI,MAAL,IAAe,CAACF,KAAK,CAACY,SAAzB,EAAoCZ,KAAK,CAACY,SAAN,GAAkB,IAAlB;AACpC,MAAGd,IAAI,CAACe,IAAL,IAAa,CAACb,KAAK,CAACc,MAAvB,EAA+Bd,KAAK,CAACc,MAAN,GAAe,IAAf;AAC/B,MAAG,CAAChB,IAAI,CAACS,MAAL,IAAeT,IAAI,CAACW,MAArB,KAAgC,CAACT,KAAK,CAACe,OAA1C,EAAmDf,KAAK,CAACe,OAAN,GAAgB,IAAhB;AACnD,MAAGjB,IAAI,CAACkB,IAAL,IAAa,CAAChB,KAAK,CAACiB,MAAvB,EAA+BjB,KAAK,CAACiB,MAAN,GAAe,IAAf;AAC/B,MAAGnB,IAAI,CAACI,MAAR,EAAgBJ,IAAI,CAACI,MAAL,CAAYgB,IAAZ,GAAmBxC,GAAnB;AAEhBsB,EAAAA,KAAK,CAACmB,WAAN,CAAkBC,IAAlB,CAAuBtB,IAAI,CAACe,IAA5B;AACAb,EAAAA,KAAK,CAACqB,aAAN,CAAoBD,IAApB,CAAyBtB,IAAI,CAACS,MAA9B;AACAP,EAAAA,KAAK,CAACsB,aAAN,CAAoBF,IAApB,CAAyBtB,IAAI,CAACW,MAA9B;AACAT,EAAAA,KAAK,CAACuB,WAAN,CAAkBH,IAAlB,CAAuBtB,IAAI,CAACY,IAA5B;AACAV,EAAAA,KAAK,CAACwB,aAAN,CAAoBJ,IAApB,CAAyBtB,IAAI,CAACI,MAA9B;AACAF,EAAAA,KAAK,CAACyB,qBAAN,CAA4BL,IAA5B,CAAiCtB,IAAI,CAAC4B,SAAtC;AACA1B,EAAAA,KAAK,CAAC2B,uBAAN,CAA8BP,IAA9B,CAAmCtB,IAAI,CAAC8B,WAAxC;AACA5B,EAAAA,KAAK,CAAC6B,WAAN,CAAkBT,IAAlB,CAAuBtB,IAAI,CAACkB,IAA5B;AACAhB,EAAAA,KAAK,CAAC8B,mBAAN,CAA0BV,IAA1B,CAA+BtB,IAAI,CAACiC,OAApC;AACA/B,EAAAA,KAAK,CAACgC,qBAAN,CAA4BZ,IAA5B,CAAiCtB,IAAI,CAACmC,SAAtC;AACAjC,EAAAA,KAAK,CAACkC,WAAN,CAAkBd,IAAlB,CAAuB,EAAvB;AACApB,EAAAA,KAAK,CAACmC,aAAN,CAAoBf,IAApB,CAAyB,EAAzB;AAEAtC,EAAAA,KAAK,CAACsD,MAAN,GAAepC,KAAf;AACAlB,EAAAA,KAAK,CAACuD,KAAN,GAAcrC,KAAK,CAACsC,KAApB;AACAxD,EAAAA,KAAK,CAACI,CAAN,GAAUA,CAAV;AACAJ,EAAAA,KAAK,CAACO,CAAN,GAAUA,CAAV;AACAP,EAAAA,KAAK,CAACS,SAAN,GAAkBA,SAAlB;AACAS,EAAAA,KAAK,CAACsC,KAAN;AAEA,SAAO,CAAC;AAACpD,IAAAA,CAAC,EAAE,KAAJ;AAAWG,IAAAA,CAAC,EAAE,KAAd;AAAqBkD,IAAAA,CAAC,EAAEzD,KAAxB;AAA+Bd,IAAAA,KAAK,EAAEA;AAAtC,GAAD,CAAP;AACH,CA/FD;;AAiGA,SAASwC,kBAAT,CAA4BxC,KAA5B,EAAmCwE,EAAnC,EAAuC1C,IAAvC,EAA6C;AACzC,MAAI2C,QAAQ,GAAGzE,KAAK,CAAC0E,SAAN,CAAgBF,EAAE,CAACG,GAAnB,CAAf;AACA,MAAIC,MAAM,GAAG1F,YAAY,CAACsF,EAAD,EAAK1C,IAAI,CAAC+C,KAAV,EAAiB;AAACC,IAAAA,MAAM,EAAE;AAAT,GAAjB,CAAzB;AACAL,EAAAA,QAAQ,CAACM,GAAT,GAAeN,QAAQ,CAACM,GAAT,CAAaC,MAAb,CAAoBJ,MAAM,CAACG,GAA3B,CAAf;AACAN,EAAAA,QAAQ,CAACpC,GAAT,GAAeoC,QAAQ,CAACpC,GAAT,CAAa2C,MAAb,CAAoBJ,MAAM,CAACvC,GAA3B,CAAf;AACH;;AAED,SAASN,YAAT,CAAsBhC,EAAtB,EAA0BS,OAA1B,EAAmCR,KAAnC,EAA0CuB,SAA1C,EAAqDL,CAArD,EAAwDG,CAAxD,EAA2D;AACvD,MAAIS,IAAI,GAAGtC,OAAO,CAACyF,KAAR,CAAclF,EAAd,EAAkBC,KAAlB,CAAX;;AAEA,MAAG8B,IAAI,CAACI,MAAR,EAAgB;AACZJ,IAAAA,IAAI,CAACI,MAAL,CAAYX,SAAZ,GAAwBA,SAAxB;AACH;;AAED,MAAGO,IAAI,CAACe,IAAL,IAAatB,SAAS,CAAC2D,MAAV,GAAmB,CAAnC,EAAsC;AAClClG,IAAAA,GAAG,CAACmG,UAAJ,CACIrD,IAAI,CAACe,IADT,EAEIrD,OAAO,CAAC4F,aAAR,CAAsBrF,EAAtB,EAA0BC,KAA1B,EAAiCuB,SAAjC,CAFJ;AAIH;;AAED,MAAGO,IAAI,CAACS,MAAL,IAAeT,IAAI,CAACW,MAAvB,EAA+B;AAC3B,QAAI4C,MAAM,GAAG7F,OAAO,CAAC8F,iBAAR,CAA0BvF,EAA1B,EAA8BC,KAA9B,EAAqCuB,SAArC,EAAgDL,CAAhD,EAAmDG,CAAnD,CAAb;;AAEA,QAAGS,IAAI,CAACS,MAAR,EAAgB;AACZvD,MAAAA,GAAG,CAACmG,UAAJ,CAAerD,IAAI,CAACS,MAApB,EAA4B8C,MAAM,CAACnE,CAAnC;AACH;;AACD,QAAGY,IAAI,CAACW,MAAR,EAAgB;AACZzD,MAAAA,GAAG,CAACmG,UAAJ,CAAerD,IAAI,CAACW,MAApB,EAA4B4C,MAAM,CAAChE,CAAnC;AACH;AACJ;;AAED,MAAGS,IAAI,CAACkB,IAAR,EAAc;AACVhE,IAAAA,GAAG,CAACmG,UAAJ,CACIrD,IAAI,CAACkB,IADT,EAEI;AAACzB,MAAAA,SAAS,EAAEA;AAAZ,KAFJ,EAGI/B,OAAO,CAAC+F,YAAR,CAAqBxF,EAArB,EAAyBC,KAAzB,EAAgC8B,IAAI,CAACkB,IAArC,EAA2ClB,IAAI,CAACI,MAAhD,CAHJ;AAKAlD,IAAAA,GAAG,CAACmG,UAAJ,CACIrD,IAAI,CAACiC,OADT,EAEI;AAACxC,MAAAA,SAAS,EAAEA;AAAZ,KAFJ,EAGI/B,OAAO,CAAC+F,YAAR,CAAqBxF,EAArB,EAAyBC,KAAzB,EAAgC8B,IAAI,CAACkB,IAArC,EAA2ClB,IAAI,CAAC4B,SAAhD,CAHJ;AAKA1E,IAAAA,GAAG,CAACmG,UAAJ,CACIrD,IAAI,CAACmC,SADT,EAEI;AAAC1C,MAAAA,SAAS,EAAEA;AAAZ,KAFJ,EAGI/B,OAAO,CAAC+F,YAAR,CAAqBxF,EAArB,EAAyBC,KAAzB,EAAgC8B,IAAI,CAACkB,IAArC,EAA2ClB,IAAI,CAAC8B,WAAhD,CAHJ;AAKH;;AAED,SAAO9B,IAAP;AACH","sourcesContent":["/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar cluster = require('point-cluster');\n\nvar Lib = require('../../lib');\nvar AxisIDs = require('../../plots/cartesian/axis_ids');\nvar findExtremes = require('../../plots/cartesian/autorange').findExtremes;\n\nvar scatterCalc = require('../scatter/calc');\nvar calcMarkerSize = scatterCalc.calcMarkerSize;\nvar calcAxisExpansion = scatterCalc.calcAxisExpansion;\nvar setFirstScatter = scatterCalc.setFirstScatter;\nvar calcColorscale = require('../scatter/colorscale_calc');\nvar convert = require('./convert');\nvar sceneUpdate = require('./scene_update');\n\nvar BADNUM = require('../../constants/numerical').BADNUM;\nvar TOO_MANY_POINTS = require('./constants').TOO_MANY_POINTS;\n\nmodule.exports = function calc(gd, trace) {\n    var fullLayout = gd._fullLayout;\n    var xa = AxisIDs.getFromId(gd, trace.xaxis);\n    var ya = AxisIDs.getFromId(gd, trace.yaxis);\n    var subplot = fullLayout._plots[trace.xaxis + trace.yaxis];\n    var len = trace._length;\n    var hasTooManyPoints = len >= TOO_MANY_POINTS;\n    var len2 = len * 2;\n    var stash = {};\n    var i, xx, yy;\n\n    var x = trace._x = xa.makeCalcdata(trace, 'x');\n    var y = trace._y = ya.makeCalcdata(trace, 'y');\n\n    // we need hi-precision for scatter2d,\n    // regl-scatter2d uses NaNs for bad/missing values\n    var positions = new Array(len2);\n    for(i = 0; i < len; i++) {\n        xx = x[i];\n        yy = y[i];\n        positions[i * 2] = xx === BADNUM ? NaN : xx;\n        positions[i * 2 + 1] = yy === BADNUM ? NaN : yy;\n    }\n\n    if(xa.type === 'log') {\n        for(i = 0; i < len2; i += 2) {\n            positions[i] = xa.c2l(positions[i]);\n        }\n    }\n    if(ya.type === 'log') {\n        for(i = 1; i < len2; i += 2) {\n            positions[i] = ya.c2l(positions[i]);\n        }\n    }\n\n    // we don't build a tree for log axes since it takes long to convert log2px\n    // and it is also\n    if(hasTooManyPoints && (xa.type !== 'log' && ya.type !== 'log')) {\n        // FIXME: delegate this to webworker\n        stash.tree = cluster(positions);\n    } else {\n        var ids = stash.ids = new Array(len);\n        for(i = 0; i < len; i++) {\n            ids[i] = i;\n        }\n    }\n\n    // create scene options and scene\n    calcColorscale(gd, trace);\n    var opts = sceneOptions(gd, subplot, trace, positions, x, y);\n    var scene = sceneUpdate(gd, subplot);\n\n    // Reuse SVG scatter axis expansion routine.\n    // For graphs with very large number of points and array marker.size,\n    // use average marker size instead to speed things up.\n    setFirstScatter(fullLayout, trace);\n    var ppad;\n    if(!hasTooManyPoints) {\n        ppad = calcMarkerSize(trace, len);\n    } else if(opts.marker) {\n        ppad = 2 * (opts.marker.sizeAvg || Math.max(opts.marker.size, 3));\n    }\n    calcAxisExpansion(gd, trace, xa, ya, x, y, ppad);\n    if(opts.errorX) expandForErrorBars(trace, xa, opts.errorX);\n    if(opts.errorY) expandForErrorBars(trace, ya, opts.errorY);\n\n    // set flags to create scene renderers\n    if(opts.fill && !scene.fill2d) scene.fill2d = true;\n    if(opts.marker && !scene.scatter2d) scene.scatter2d = true;\n    if(opts.line && !scene.line2d) scene.line2d = true;\n    if((opts.errorX || opts.errorY) && !scene.error2d) scene.error2d = true;\n    if(opts.text && !scene.glText) scene.glText = true;\n    if(opts.marker) opts.marker.snap = len;\n\n    scene.lineOptions.push(opts.line);\n    scene.errorXOptions.push(opts.errorX);\n    scene.errorYOptions.push(opts.errorY);\n    scene.fillOptions.push(opts.fill);\n    scene.markerOptions.push(opts.marker);\n    scene.markerSelectedOptions.push(opts.markerSel);\n    scene.markerUnselectedOptions.push(opts.markerUnsel);\n    scene.textOptions.push(opts.text);\n    scene.textSelectedOptions.push(opts.textSel);\n    scene.textUnselectedOptions.push(opts.textUnsel);\n    scene.selectBatch.push([]);\n    scene.unselectBatch.push([]);\n\n    stash._scene = scene;\n    stash.index = scene.count;\n    stash.x = x;\n    stash.y = y;\n    stash.positions = positions;\n    scene.count++;\n\n    return [{x: false, y: false, t: stash, trace: trace}];\n};\n\nfunction expandForErrorBars(trace, ax, opts) {\n    var extremes = trace._extremes[ax._id];\n    var errExt = findExtremes(ax, opts._bnds, {padded: true});\n    extremes.min = extremes.min.concat(errExt.min);\n    extremes.max = extremes.max.concat(errExt.max);\n}\n\nfunction sceneOptions(gd, subplot, trace, positions, x, y) {\n    var opts = convert.style(gd, trace);\n\n    if(opts.marker) {\n        opts.marker.positions = positions;\n    }\n\n    if(opts.line && positions.length > 1) {\n        Lib.extendFlat(\n            opts.line,\n            convert.linePositions(gd, trace, positions)\n        );\n    }\n\n    if(opts.errorX || opts.errorY) {\n        var errors = convert.errorBarPositions(gd, trace, positions, x, y);\n\n        if(opts.errorX) {\n            Lib.extendFlat(opts.errorX, errors.x);\n        }\n        if(opts.errorY) {\n            Lib.extendFlat(opts.errorY, errors.y);\n        }\n    }\n\n    if(opts.text) {\n        Lib.extendFlat(\n            opts.text,\n            {positions: positions},\n            convert.textPosition(gd, trace, opts.text, opts.marker)\n        );\n        Lib.extendFlat(\n            opts.textSel,\n            {positions: positions},\n            convert.textPosition(gd, trace, opts.text, opts.markerSel)\n        );\n        Lib.extendFlat(\n            opts.textUnsel,\n            {positions: positions},\n            convert.textPosition(gd, trace, opts.text, opts.markerUnsel)\n        );\n    }\n\n    return opts;\n}\n"]},"metadata":{},"sourceType":"script"}