{"ast":null,"code":"import _slicedToArray from \"/home/raj/.nvm/versions/node/v12.18.2/lib/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/views/ChaosWorkflows/BrowseAnalytics/ExperimentStatus/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { Typography, Avatar } from '@material-ui/core';\nimport CheckCircleSharpIcon from '@material-ui/icons/CheckCircleSharp';\nimport CancelSharpIcon from '@material-ui/icons/CancelSharp';\nimport useStyles from './styles';\n\nvar ExperimentStatus = function ExperimentStatus(_ref) {\n  _s();\n\n  var status = _ref.status;\n  var classes = useStyles();\n\n  var _React$useState = React.useState(' '),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      label = _React$useState2[0],\n      setLabel = _React$useState2[1];\n\n  useEffect(function () {\n    if (status === 'Passed') {\n      return setLabel(classes.passed);\n    }\n\n    if (status === 'Awaited' || status === 'N/A') {\n      return setLabel(classes.awaited);\n    }\n\n    return setLabel(classes.failed);\n  }, [status]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(label, \" \").concat(classes.state),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, status === 'Passed' ? /*#__PURE__*/React.createElement(Avatar, {\n    className: classes.miniIcons,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CheckCircleSharpIcon, {\n    className: \"\".concat(classes.checkIcon, \" \").concat(classes.stateIcon),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  })) : status === 'Failed' ? /*#__PURE__*/React.createElement(Avatar, {\n    className: classes.miniIcons,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CancelSharpIcon, {\n    className: \"\".concat(classes.cancelIcon, \" \").concat(classes.stateIcon),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  })) : /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.awaitedSpan,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.statusFont,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, status)));\n};\n\n_s(ExperimentStatus, \"v8/6GtpWT7UQ/Arh+z//wOW1DeA=\", false, function () {\n  return [useStyles];\n});\n\n_c = ExperimentStatus;\nexport default ExperimentStatus;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExperimentStatus\");","map":{"version":3,"sources":["/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/views/ChaosWorkflows/BrowseAnalytics/ExperimentStatus/index.tsx"],"names":["React","useEffect","Typography","Avatar","CheckCircleSharpIcon","CancelSharpIcon","useStyles","ExperimentStatus","status","classes","useState","label","setLabel","passed","awaited","failed","state","miniIcons","checkIcon","stateIcon","cancelIcon","awaitedSpan","statusFont"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,EAAqBC,MAArB,QAAmC,mBAAnC;AACA,OAAOC,oBAAP,MAAiC,qCAAjC;AACA,OAAOC,eAAP,MAA4B,gCAA5B;AACA,OAAOC,SAAP,MAAsB,UAAtB;;AAMA,IAAMC,gBAAuC,GAAG,SAA1CA,gBAA0C,OAAgB;AAAA;;AAAA,MAAbC,MAAa,QAAbA,MAAa;AAC9D,MAAMC,OAAO,GAAGH,SAAS,EAAzB;;AAD8D,wBAEpCN,KAAK,CAACU,QAAN,CAAe,GAAf,CAFoC;AAAA;AAAA,MAEvDC,KAFuD;AAAA,MAEhDC,QAFgD;;AAI9DX,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIO,MAAM,KAAK,QAAf,EAAyB;AACvB,aAAOI,QAAQ,CAACH,OAAO,CAACI,MAAT,CAAf;AACD;;AACD,QAAIL,MAAM,KAAK,SAAX,IAAwBA,MAAM,KAAK,KAAvC,EAA8C;AAC5C,aAAOI,QAAQ,CAACH,OAAO,CAACK,OAAT,CAAf;AACD;;AACD,WAAOF,QAAQ,CAACH,OAAO,CAACM,MAAT,CAAf;AACD,GARQ,EAQN,CAACP,MAAD,CARM,CAAT;AAUA,sBACE,uDACE;AAAK,IAAA,SAAS,YAAKG,KAAL,cAAcF,OAAO,CAACO,KAAtB,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGR,MAAM,KAAK,QAAX,gBACC,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAEC,OAAO,CAACQ,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,oBAAD;AACE,IAAA,SAAS,YAAKR,OAAO,CAACS,SAAb,cAA0BT,OAAO,CAACU,SAAlC,CADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADD,GAMGX,MAAM,KAAK,QAAX,gBACF,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAEC,OAAO,CAACQ,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,eAAD;AACE,IAAA,SAAS,YAAKR,OAAO,CAACW,UAAb,cAA2BX,OAAO,CAACU,SAAnC,CADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADE,gBAOF;AAAM,IAAA,SAAS,EAAEV,OAAO,CAACY,WAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdJ,eAgBE,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAEZ,OAAO,CAACa,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4Cd,MAA5C,CAhBF,CADF,CADF;AAsBD,CApCD;;GAAMD,gB;UACYD,S;;;KADZC,gB;AAqCN,eAAeA,gBAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { Typography, Avatar } from '@material-ui/core';\nimport CheckCircleSharpIcon from '@material-ui/icons/CheckCircleSharp';\nimport CancelSharpIcon from '@material-ui/icons/CancelSharp';\nimport useStyles from './styles';\n\ninterface StatusProps {\n  status: string;\n}\n\nconst ExperimentStatus: React.FC<StatusProps> = ({ status }) => {\n  const classes = useStyles();\n  const [label, setLabel] = React.useState(' ');\n\n  useEffect(() => {\n    if (status === 'Passed') {\n      return setLabel(classes.passed);\n    }\n    if (status === 'Awaited' || status === 'N/A') {\n      return setLabel(classes.awaited);\n    }\n    return setLabel(classes.failed);\n  }, [status]);\n\n  return (\n    <>\n      <div className={`${label} ${classes.state}`}>\n        {status === 'Passed' ? (\n          <Avatar className={classes.miniIcons}>\n            <CheckCircleSharpIcon\n              className={`${classes.checkIcon} ${classes.stateIcon}`}\n            />\n          </Avatar>\n        ) : status === 'Failed' ? (\n          <Avatar className={classes.miniIcons}>\n            <CancelSharpIcon\n              className={`${classes.cancelIcon} ${classes.stateIcon}`}\n            />\n          </Avatar>\n        ) : (\n          <span className={classes.awaitedSpan} />\n        )}\n        <Typography className={classes.statusFont}>{status}</Typography>\n      </div>\n    </>\n  );\n};\nexport default ExperimentStatus;\n"]},"metadata":{},"sourceType":"module"}