{"ast":null,"code":"import _slicedToArray from \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/components/Targets/TargetCopy/index.tsx\";\n\nimport { Typography } from '@material-ui/core';\nimport Done from '@material-ui/icons/DoneAllTwoTone';\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport ButtonOutline from '../../Button/ButtonOutline';\nimport useStyles from './styles';\n\nvar TargetCopy = function TargetCopy(_ref) {\n  var yamlLink = _ref.yamlLink;\n  var classes = useStyles();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      copying = _useState2[0],\n      setCopying = _useState2[1];\n\n  function copyTextToClipboard(text) {\n    if (!navigator.clipboard) {\n      console.error('Oops Could not copy text: ');\n      return;\n    }\n\n    setCopying(true);\n    navigator.clipboard.writeText(text).catch(function (err) {\n      return console.error('Async: Could not copy text: ', err);\n    });\n    setTimeout(function () {\n      return setCopying(false);\n    }, 6000);\n  }\n\n  var x = window.location.hostname;\n  var y = window.location.port;\n  var engineUrl = \"kubectl apply -f http://\".concat(x, \":\").concat(y, \"/api/file/\").concat(yamlLink, \".yaml\");\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, copying ? /*#__PURE__*/React.createElement(Typography, {\n    className: classes.copiedDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, t('targets.copy.copying')) : null, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.linkBox,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.yamlLink,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, engineUrl), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.buttonBox,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ButtonOutline, {\n    isDisabled: false,\n    handleClick: function handleClick() {\n      return copyTextToClipboard(engineUrl);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }, !copying ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.copyText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/icons/copy.svg\",\n    style: {\n      paddingRight: 10\n    },\n    alt: \"copy\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }, t('targets.copy.copy'))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.copyText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Done, {\n    className: classes.done,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 19\n    }\n  }, t('targets.copy.copied'))))))));\n};\n\nexport default TargetCopy;","map":{"version":3,"sources":["/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/components/Targets/TargetCopy/index.tsx"],"names":["Typography","Done","React","useState","useTranslation","ButtonOutline","useStyles","TargetCopy","yamlLink","classes","copying","setCopying","copyTextToClipboard","text","navigator","clipboard","console","error","writeText","catch","err","setTimeout","x","window","location","hostname","y","port","engineUrl","t","root","copiedDiv","linkBox","buttonBox","copyText","paddingRight","done"],"mappings":"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","sourcesContent":["import { Typography } from '@material-ui/core';\nimport Done from '@material-ui/icons/DoneAllTwoTone';\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport ButtonOutline from '../../Button/ButtonOutline';\nimport useStyles from './styles';\n\ninterface InstallProps {\n  yamlLink: string;\n}\n\nconst TargetCopy: React.FC<InstallProps> = ({ yamlLink }) => {\n  const classes = useStyles();\n  const [copying, setCopying] = useState(false);\n\n  function copyTextToClipboard(text: string) {\n    if (!navigator.clipboard) {\n      console.error('Oops Could not copy text: ');\n      return;\n    }\n    setCopying(true);\n    navigator.clipboard\n      .writeText(text)\n      .catch((err) => console.error('Async: Could not copy text: ', err));\n\n    setTimeout(() => setCopying(false), 6000);\n  }\n\n  const x = window.location.hostname;\n  const y = window.location.port;\n\n  const engineUrl: string = `kubectl apply -f http://${x}:${y}/api/file/${yamlLink}.yaml`;\n\n  const { t } = useTranslation();\n\n  return (\n    <div className={classes.root}>\n      {copying ? (\n        <Typography className={classes.copiedDiv}>\n          {t('targets.copy.copying')}\n        </Typography>\n      ) : null}\n      <div className={classes.linkBox}>\n        <Typography className={classes.yamlLink}>{engineUrl}</Typography>\n        <div className={classes.buttonBox}>\n          <ButtonOutline\n            isDisabled={false}\n            handleClick={() => copyTextToClipboard(engineUrl)}\n          >\n            {!copying ? (\n              <div className={classes.copyText}>\n                <img\n                  src=\"/icons/copy.svg\"\n                  style={{ paddingRight: 10 }}\n                  alt=\"copy\"\n                />\n                <Typography>{t('targets.copy.copy')}</Typography>\n              </div>\n            ) : (\n              <>\n                <div className={classes.copyText}>\n                  <Done className={classes.done} />\n                  <Typography>{t('targets.copy.copied')}</Typography>\n                </div>\n              </>\n            )}\n          </ButtonOutline>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TargetCopy;\n"]},"metadata":{},"sourceType":"module"}