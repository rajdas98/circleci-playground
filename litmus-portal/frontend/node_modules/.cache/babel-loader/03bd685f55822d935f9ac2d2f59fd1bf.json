{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/components/InfoFilled/index.tsx\";\n\nimport { useTheme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport Center from '../../containers/layouts/Center';\nimport formatCount from '../../utils/formatCount';\nimport Loader from '../Loader';\nimport useStyles from './styles';\n\n/*\n  Reusable Custom Information Card\n  Required Params: color, statType\n  Optional Params: plus, value\n*/\nvar InfoFilledWrap = function InfoFilledWrap() {\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var theme = useTheme(); // Card Value Data fetched from Redux\n\n  var _useSelector = useSelector(function (state) {\n    return state.communityData;\n  }),\n      communityData = _useSelector.communityData,\n      loading = _useSelector.loading,\n      error = _useSelector.error;\n\n  var cardData = [{\n    color: theme.palette.warning.main,\n    value: parseInt(communityData.github.experimentsCount, 10),\n    statType: 'Total Experiments'\n  }, {\n    color: theme.palette.primary.dark,\n    value: parseInt(communityData.google.operatorInstalls, 10),\n    statType: 'Operator Installed',\n    plus: true\n  }, {\n    color: theme.palette.totalRunsCountColor,\n    value: parseInt(communityData.google.totalRuns, 10),\n    statType: 'Total Experiment Runs',\n    plus: true\n  }, {\n    color: theme.palette.error.main,\n    value: parseInt(communityData.github.stars, 10),\n    statType: 'Github Stars'\n  }];\n  var cardArray = cardData.map(function (individualCard) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: individualCard.value,\n      style: {\n        backgroundColor: \"\".concat(individualCard.color)\n      },\n      className: classes.infoFilledDiv,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }\n    }, individualCard.plus ? /*#__PURE__*/React.createElement(Typography, {\n      className: classes.value,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }\n    }, formatCount(individualCard.value), /*#__PURE__*/React.createElement(\"span\", {\n      className: classes.plusBtn,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    }, \"+\")) : /*#__PURE__*/React.createElement(Typography, {\n      className: classes.value,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }\n    }, formatCount(individualCard.value)), /*#__PURE__*/React.createElement(\"hr\", {\n      className: classes.horizontalRule,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Typography, {\n      className: classes.statType,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }, individualCard.statType));\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.infoFilledWrap,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }, loading ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Loader, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, t('internetIssues.fetchData'))) : error ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.errorMessage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Center, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h4\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, t('internetIssues.connectionError')))) : cardArray);\n};\n\nexport default InfoFilledWrap;","map":{"version":3,"sources":["/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/components/InfoFilled/index.tsx"],"names":["useTheme","Typography","React","useTranslation","useSelector","Center","formatCount","Loader","useStyles","InfoFilledWrap","classes","t","theme","state","communityData","loading","error","cardData","color","palette","warning","main","value","parseInt","github","experimentsCount","statType","primary","dark","google","operatorInstalls","plus","totalRunsCountColor","totalRuns","stars","cardArray","map","individualCard","backgroundColor","infoFilledDiv","plusBtn","horizontalRule","infoFilledWrap","errorMessage"],"mappings":"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","sourcesContent":["import { useTheme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport Center from '../../containers/layouts/Center';\nimport { RootState } from '../../redux/reducers';\nimport formatCount from '../../utils/formatCount';\nimport Loader from '../Loader';\nimport useStyles from './styles';\n\ninterface CardValueData {\n  color: string;\n  value: number;\n  statType: string;\n  plus?: boolean | undefined;\n}\n/*\n  Reusable Custom Information Card\n  Required Params: color, statType\n  Optional Params: plus, value\n*/\n\nconst InfoFilledWrap: React.FC = () => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n  const theme = useTheme();\n  // Card Value Data fetched from Redux\n  const { communityData, loading, error } = useSelector(\n    (state: RootState) => state.communityData\n  );\n\n  const cardData: CardValueData[] = [\n    {\n      color: theme.palette.warning.main,\n      value: parseInt(communityData.github.experimentsCount, 10),\n      statType: 'Total Experiments',\n    },\n    {\n      color: theme.palette.primary.dark,\n      value: parseInt(communityData.google.operatorInstalls, 10),\n      statType: 'Operator Installed',\n      plus: true,\n    },\n    {\n      color: theme.palette.totalRunsCountColor,\n      value: parseInt(communityData.google.totalRuns, 10),\n      statType: 'Total Experiment Runs',\n      plus: true,\n    },\n    {\n      color: theme.palette.error.main,\n      value: parseInt(communityData.github.stars, 10),\n      statType: 'Github Stars',\n    },\n  ];\n\n  const cardArray = cardData.map((individualCard) => {\n    return (\n      <div\n        key={individualCard.value}\n        style={{ backgroundColor: `${individualCard.color}` }}\n        className={classes.infoFilledDiv}\n      >\n        {/*\n          If value of plus is provided then render a different\n          plus icon else dont\n          \n          formatCount -> utility is used to convert large value to\n          their respective Thousands or Millions respectively\n        */}\n        {individualCard.plus ? (\n          <Typography className={classes.value}>\n            {formatCount(individualCard.value)}\n            <span className={classes.plusBtn}>+</span>\n          </Typography>\n        ) : (\n          <Typography className={classes.value}>\n            {formatCount(individualCard.value)}\n          </Typography>\n        )}\n        <hr className={classes.horizontalRule} />\n        <Typography className={classes.statType}>\n          {individualCard.statType}\n        </Typography>\n      </div>\n    );\n  });\n\n  return (\n    <div className={classes.infoFilledWrap}>\n      {loading ? (\n        <div>\n          <Loader />\n          <Typography>{t('internetIssues.fetchData')}</Typography>\n        </div>\n      ) : error ? (\n        <div className={classes.errorMessage}>\n          <Center>\n            <Typography variant=\"h4\">\n              {t('internetIssues.connectionError')}\n            </Typography>\n          </Center>\n        </div>\n      ) : (\n        cardArray\n      )}\n    </div>\n  );\n};\n\nexport default InfoFilledWrap;\n"]},"metadata":{},"sourceType":"module"}