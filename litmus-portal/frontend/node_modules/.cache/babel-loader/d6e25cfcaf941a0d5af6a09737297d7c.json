{"ast":null,"code":"import _slicedToArray from \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/components/WorkflowCard/CardContent.tsx\";\n\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n\n/* eslint-disable jsx-a11y/no-static-element-interactions */\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport parsed from '../../utils/yamlUtils';\nimport useStyles from './styles';\n\nvar CardContent = function CardContent(_ref) {\n  var title = _ref.title,\n      urlToIcon = _ref.urlToIcon,\n      workflowID = _ref.workflowID,\n      provider = _ref.provider,\n      handleClick = _ref.handleClick,\n      description = _ref.description,\n      chaosWkfCRDLink = _ref.chaosWkfCRDLink;\n  var selectedTemplateID = useSelector(function (state) {\n    return state.selectTemplate.selectedTemplateID;\n  });\n  var isSelected = workflowID !== undefined && workflowID === selectedTemplateID;\n  var classes = useStyles();\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      yamlText = _useState2[0],\n      setYamlText = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      exptCount = _useState4[0],\n      setExptCount = _useState4[1]; // Function to fetch yaml and convert them to text\n  // to set the experiment count based on the parsed text\n\n\n  var fetchYaml = function fetchYaml(link) {\n    fetch(link).then(function (data) {\n      data.text().then(function (yamlText) {\n        setYamlText(yamlText);\n      });\n    }).catch(function (err) {\n      console.error(err);\n    });\n  }; // Fetch the YAML through the CRD Link from data.ts\n  // and get the experiment count by passing the parsed text\n  // into parsed() yaml function\n\n\n  useEffect(function () {\n    fetchYaml(chaosWkfCRDLink);\n    var tests = parsed(yamlText);\n\n    if (tests[0] === 'none' || tests[0] === 'Invalid CRD' || tests[0] === 'Yaml Error') {\n      setExptCount(0);\n    } else {\n      setExptCount(tests.length);\n    } // Fetch and Set exptCount from backend via GQL if workflow CRDs are categorized in types.\n\n  }, [yamlText, exptCount]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.card,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(isSelected ? \"\".concat(classes.cardContent, \" \").concat(classes.cardFocused) : classes.cardContent),\n    onClick: handleClick,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.cardAnalytics,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.expCount,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, exptCount, \" \", exptCount > 1 ? 'Experiments' : 'Experiment')), /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, urlToIcon ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.cardMedia,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: urlToIcon,\n    alt: \"chart provider logo\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 15\n    }\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.noImage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, \"Image\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    \"data-cy\": \"expName\",\n    className: classes.title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, title), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.provider,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, \"Contributed by \", provider)), description ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.description,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, description) : /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }), description ? description.length < 28 ? /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 52\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 61\n    }\n  }) : /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 71\n    }\n  }))));\n};\n\nexport default CardContent;","map":{"version":3,"sources":["/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/components/WorkflowCard/CardContent.tsx"],"names":["React","useEffect","useState","useSelector","parsed","useStyles","CardContent","title","urlToIcon","workflowID","provider","handleClick","description","chaosWkfCRDLink","selectedTemplateID","state","selectTemplate","isSelected","undefined","classes","yamlText","setYamlText","exptCount","setExptCount","fetchYaml","link","fetch","then","data","text","catch","err","console","error","tests","length","card","cardContent","cardFocused","cardAnalytics","expCount","cardMedia","noImage"],"mappings":"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","sourcesContent":["/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { preDefinedWorkflowData } from '../../models/predefinedWorkflow';\nimport { RootState } from '../../redux/reducers';\nimport parsed from '../../utils/yamlUtils';\nimport useStyles from './styles';\n\nconst CardContent: React.FC<preDefinedWorkflowData> = ({\n  title,\n  urlToIcon,\n  workflowID,\n  provider,\n  handleClick,\n  description,\n  chaosWkfCRDLink,\n}) => {\n  const selectedTemplateID = useSelector(\n    (state: RootState) => state.selectTemplate.selectedTemplateID\n  );\n\n  const isSelected: boolean =\n    workflowID !== undefined && workflowID === selectedTemplateID;\n\n  const classes = useStyles();\n\n  const [yamlText, setYamlText] = useState<string>('');\n  const [exptCount, setExptCount] = useState<number>(0);\n\n  // Function to fetch yaml and convert them to text\n  // to set the experiment count based on the parsed text\n\n  const fetchYaml = (link: string) => {\n    fetch(link)\n      .then((data) => {\n        data.text().then((yamlText) => {\n          setYamlText(yamlText);\n        });\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  };\n\n  // Fetch the YAML through the CRD Link from data.ts\n  // and get the experiment count by passing the parsed text\n  // into parsed() yaml function\n  useEffect(() => {\n    fetchYaml(chaosWkfCRDLink as string);\n    const tests = parsed(yamlText);\n    if (\n      tests[0] === 'none' ||\n      tests[0] === 'Invalid CRD' ||\n      tests[0] === 'Yaml Error'\n    ) {\n      setExptCount(0);\n    } else {\n      setExptCount(tests.length);\n    }\n    // Fetch and Set exptCount from backend via GQL if workflow CRDs are categorized in types.\n  }, [yamlText, exptCount]);\n\n  return (\n    <div className={classes.card}>\n      <div\n        className={`${\n          isSelected\n            ? `${classes.cardContent} ${classes.cardFocused}`\n            : classes.cardContent\n        }`}\n        onClick={handleClick}\n      >\n        <div className={classes.cardAnalytics}>\n          {/* {totalRuns ? (\n            <span\n              className={\n                selectedID === workflowID\n                  ? classes.totalRunsSelected\n                  : classes.totalRuns\n              }\n            >\n              {formatCount(totalRuns)}+\n            </span>\n          ) : (\n            <span />\n          )} */}\n          <span className={classes.expCount}>\n            {exptCount} {exptCount > 1 ? 'Experiments' : 'Experiment'}\n          </span>\n        </div>\n        <div>\n          {urlToIcon ? (\n            <div className={classes.cardMedia}>\n              <img src={urlToIcon} alt=\"chart provider logo\" />\n            </div>\n          ) : (\n            <div className={classes.noImage}>Image</div>\n          )}\n          <div>\n            <div data-cy=\"expName\" className={classes.title}>\n              {title}\n            </div>\n            <div className={classes.provider}>Contributed by {provider}</div>\n          </div>\n          {description ? (\n            <div className={classes.description}>{description}</div>\n          ) : (\n            <span />\n          )}\n          {description ? description.length < 28 ? <br /> : <div /> : <span />}\n        </div>\n        {/* <Divider variant=\"fullWidth\" className={classes.horizontalLine} />\n        <div className={classes.details}>\n          <Link href={gitLink} underline=\"none\" className={classes.moreDetails}>\n            <div className={classes.detailsText}> See details </div>\n          </Link>\n        </div> */}\n      </div>\n    </div>\n  );\n};\nexport default CardContent;\n"]},"metadata":{},"sourceType":"module"}