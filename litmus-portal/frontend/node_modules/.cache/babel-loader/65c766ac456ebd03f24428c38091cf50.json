{"ast":null,"code":"module.exports = intersectEllipse;\n\nfunction intersectEllipse(node, rx, ry, point) {\n  // Formulae from: http://mathworld.wolfram.com/Ellipse-LineIntersection.html\n  var cx = node.x;\n  var cy = node.y;\n  var px = cx - point.x;\n  var py = cy - point.y;\n  var det = Math.sqrt(rx * rx * py * py + ry * ry * px * px);\n  var dx = Math.abs(rx * ry * px / det);\n\n  if (point.x < cx) {\n    dx = -dx;\n  }\n\n  var dy = Math.abs(rx * ry * py / det);\n\n  if (point.y < cy) {\n    dy = -dy;\n  }\n\n  return {\n    x: cx + dx,\n    y: cy + dy\n  };\n}","map":{"version":3,"sources":["/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/node_modules/dagre-d3/lib/intersect/intersect-ellipse.js"],"names":["module","exports","intersectEllipse","node","rx","ry","point","cx","x","cy","y","px","py","det","Math","sqrt","dx","abs","dy"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,gBAAjB;;AAEA,SAASA,gBAAT,CAA0BC,IAA1B,EAAgCC,EAAhC,EAAoCC,EAApC,EAAwCC,KAAxC,EAA+C;AAC7C;AAEA,MAAIC,EAAE,GAAGJ,IAAI,CAACK,CAAd;AACA,MAAIC,EAAE,GAAGN,IAAI,CAACO,CAAd;AAEA,MAAIC,EAAE,GAAGJ,EAAE,GAAGD,KAAK,CAACE,CAApB;AACA,MAAII,EAAE,GAAGH,EAAE,GAAGH,KAAK,CAACI,CAApB;AAEA,MAAIG,GAAG,GAAGC,IAAI,CAACC,IAAL,CAAUX,EAAE,GAAGA,EAAL,GAAUQ,EAAV,GAAeA,EAAf,GAAoBP,EAAE,GAAGA,EAAL,GAAUM,EAAV,GAAeA,EAA7C,CAAV;AAEA,MAAIK,EAAE,GAAGF,IAAI,CAACG,GAAL,CAASb,EAAE,GAAGC,EAAL,GAAUM,EAAV,GAAeE,GAAxB,CAAT;;AACA,MAAIP,KAAK,CAACE,CAAN,GAAUD,EAAd,EAAkB;AAChBS,IAAAA,EAAE,GAAG,CAACA,EAAN;AACD;;AACD,MAAIE,EAAE,GAAGJ,IAAI,CAACG,GAAL,CAASb,EAAE,GAAGC,EAAL,GAAUO,EAAV,GAAeC,GAAxB,CAAT;;AACA,MAAIP,KAAK,CAACI,CAAN,GAAUD,EAAd,EAAkB;AAChBS,IAAAA,EAAE,GAAG,CAACA,EAAN;AACD;;AAED,SAAO;AAACV,IAAAA,CAAC,EAAED,EAAE,GAAGS,EAAT;AAAaN,IAAAA,CAAC,EAAED,EAAE,GAAGS;AAArB,GAAP;AACD","sourcesContent":["module.exports = intersectEllipse;\n\nfunction intersectEllipse(node, rx, ry, point) {\n  // Formulae from: http://mathworld.wolfram.com/Ellipse-LineIntersection.html\n\n  var cx = node.x;\n  var cy = node.y;\n\n  var px = cx - point.x;\n  var py = cy - point.y;\n\n  var det = Math.sqrt(rx * rx * py * py + ry * ry * px * px);\n\n  var dx = Math.abs(rx * ry * px / det);\n  if (point.x < cx) {\n    dx = -dx;\n  }\n  var dy = Math.abs(rx * ry * py / det);\n  if (point.y < cy) {\n    dy = -dy;\n  }\n\n  return {x: cx + dx, y: cy + dy};\n}\n\n"]},"metadata":{},"sourceType":"script"}