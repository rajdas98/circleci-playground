{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/views/ChaosWorkflows/BrowseAnalytics/WorkflowComparisonTable/TableData.tsx\";\n\nimport { Checkbox, IconButton, TableCell, Typography } from '@material-ui/core';\nimport ExpandMoreTwoToneIcon from '@material-ui/icons/ExpandMoreTwoTone';\nimport moment from 'moment';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport cronstrue from 'cronstrue';\nimport { history } from '../../../../redux/configureStore';\nimport useStyles from './styles';\n\nvar TableData = function TableData(_ref) {\n  var data = _ref.data,\n      itemSelectionStatus = _ref.itemSelectionStatus,\n      labelIdentifier = _ref.labelIdentifier,\n      comparisonState = _ref.comparisonState;\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t; // Function to convert UNIX time in format of DD MMM YYY\n\n\n  var formatDate = function formatDate(date) {\n    var updated = new Date(parseInt(date, 10) * 1000).toString();\n    var resDate = moment(updated).format('DD MMM YYYY');\n    return resDate;\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TableCell, {\n    padding: \"checkbox\",\n    className: classes.checkbox,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, comparisonState === false ? /*#__PURE__*/React.createElement(Checkbox, {\n    checked: itemSelectionStatus,\n    inputProps: {\n      'aria-labelledby': labelIdentifier\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(TableCell, {\n    className: classes.workflowName,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }, data.workflow_name))), /*#__PURE__*/React.createElement(TableCell, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.tableObjects,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, formatDate(data.created_at))), /*#__PURE__*/React.createElement(TableCell, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.regularityData,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.iconDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/icons/calender.svg\",\n    alt: \"Calender\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.paddedText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, data.cronSyntax === '' ? t('chaosWorkflows.browseAnalytics.workFlowComparisonTable.once') : cronstrue.toString(data.cronSyntax))))), /*#__PURE__*/React.createElement(TableCell, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.tableObjects,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, \"\\xA0\", data.cluster_name)), /*#__PURE__*/React.createElement(TableCell, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.tableObjects,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, t('chaosWorkflows.browseAnalytics.workFlowComparisonTable.seeAnalytics')), /*#__PURE__*/React.createElement(IconButton, {\n    edge: \"end\",\n    \"aria-label\": \"analytics for workflow id\",\n    \"aria-haspopup\": \"true\",\n    onClick: function onClick() {\n      return history.push(\"/workflows/analytics/\".concat(data.workflow_id));\n    },\n    className: classes.buttonSeeAnalytics,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ExpandMoreTwoToneIcon, {\n    htmlColor: \"black\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  })))));\n};\n\nexport default TableData;","map":{"version":3,"sources":["/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/views/ChaosWorkflows/BrowseAnalytics/WorkflowComparisonTable/TableData.tsx"],"names":["Checkbox","IconButton","TableCell","Typography","ExpandMoreTwoToneIcon","moment","React","useTranslation","cronstrue","history","useStyles","TableData","data","itemSelectionStatus","labelIdentifier","comparisonState","classes","t","formatDate","date","updated","Date","parseInt","toString","resDate","format","checkbox","workflowName","workflow_name","tableObjects","created_at","regularityData","iconDiv","paddedText","cronSyntax","cluster_name","push","workflow_id","buttonSeeAnalytics"],"mappings":"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","sourcesContent":["import { Checkbox, IconButton, TableCell, Typography } from '@material-ui/core';\nimport ExpandMoreTwoToneIcon from '@material-ui/icons/ExpandMoreTwoTone';\nimport moment from 'moment';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport cronstrue from 'cronstrue';\nimport { history } from '../../../../redux/configureStore';\nimport useStyles from './styles';\nimport { Workflow } from '../../../../models/graphql/workflowListData';\n\ninterface TableDataProps {\n  data: Workflow;\n  itemSelectionStatus: boolean;\n  labelIdentifier: string;\n  comparisonState: Boolean;\n}\n\nconst TableData: React.FC<TableDataProps> = ({\n  data,\n  itemSelectionStatus,\n  labelIdentifier,\n  comparisonState,\n}) => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n\n  // Function to convert UNIX time in format of DD MMM YYY\n  const formatDate = (date: string) => {\n    const updated = new Date(parseInt(date, 10) * 1000).toString();\n    const resDate = moment(updated).format('DD MMM YYYY');\n    return resDate;\n  };\n\n  return (\n    <>\n      <TableCell padding=\"checkbox\" className={classes.checkbox}>\n        {comparisonState === false ? (\n          <Checkbox\n            checked={itemSelectionStatus}\n            inputProps={{ 'aria-labelledby': labelIdentifier }}\n          />\n        ) : (\n          <div />\n        )}\n      </TableCell>\n      <TableCell className={classes.workflowName}>\n        <Typography>\n          <strong>{data.workflow_name}</strong>\n        </Typography>\n      </TableCell>\n      <TableCell>\n        <Typography className={classes.tableObjects}>\n          {formatDate(data.created_at)}\n        </Typography>\n      </TableCell>\n      <TableCell>\n        <div className={classes.regularityData}>\n          <div className={classes.iconDiv}>\n            <img src=\"/icons/calender.svg\" alt=\"Calender\" />\n            <Typography className={classes.paddedText}>\n              {data.cronSyntax === ''\n                ? t(\n                    'chaosWorkflows.browseAnalytics.workFlowComparisonTable.once'\n                  )\n                : cronstrue.toString(data.cronSyntax)}\n            </Typography>\n          </div>\n        </div>\n      </TableCell>\n      <TableCell>\n        <Typography className={classes.tableObjects}>\n          &nbsp;{data.cluster_name}\n        </Typography>\n      </TableCell>\n      <TableCell>\n        <Typography className={classes.tableObjects}>\n          <strong>\n            {t(\n              'chaosWorkflows.browseAnalytics.workFlowComparisonTable.seeAnalytics'\n            )}\n          </strong>\n          <IconButton\n            edge=\"end\"\n            aria-label=\"analytics for workflow id\"\n            aria-haspopup=\"true\"\n            onClick={() =>\n              history.push(`/workflows/analytics/${data.workflow_id}`)\n            }\n            className={classes.buttonSeeAnalytics}\n          >\n            <ExpandMoreTwoToneIcon htmlColor=\"black\" />\n          </IconButton>\n        </Typography>\n      </TableCell>\n    </>\n  );\n};\nexport default TableData;\n"]},"metadata":{},"sourceType":"module"}