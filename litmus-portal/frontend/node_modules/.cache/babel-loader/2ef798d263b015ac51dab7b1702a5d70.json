{"ast":null,"code":"import _objectSpread from \"/home/raj/.nvm/versions/node/v12.18.2/lib/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/raj/.nvm/versions/node/v12.18.2/lib/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/pages/WorkflowDetails/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useQuery } from '@apollo/client';\nimport { AppBar, Typography, useTheme } from '@material-ui/core';\nimport Tabs from '@material-ui/core/Tabs/Tabs';\nimport React, { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport Loader from '../../components/Loader';\nimport { StyledTab, TabPanel } from '../../components/Tabs';\nimport Scaffold from '../../containers/layouts/Scaffold';\nimport { WORKFLOW_DETAILS, WORKFLOW_EVENTS } from '../../graphql';\nimport useActions from '../../redux/actions';\nimport * as TabActions from '../../redux/actions/tabs';\nimport ArgoWorkflow from '../../views/WorkflowDetails/ArgoWorkflow';\nimport WorkflowInfo from '../../views/WorkflowDetails/WorkflowInfo';\nimport WorkflowNodeInfo from '../../views/WorkflowDetails/WorkflowNodeInfo';\nimport useStyles from './styles';\nimport TopNavButtons from './TopNavButtons';\n\nvar WorkflowDetails = function WorkflowDetails() {\n  _s();\n\n  var classes = useStyles();\n\n  var _React$useState = React.useState({\n    isAnalyticsToggled: false,\n    isExportToggled: false,\n    isInfoToggled: false\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isToggled = _React$useState2[0],\n      setIsToggled = _React$useState2[1];\n\n  var tabs = useActions(TabActions);\n\n  var _useLocation = useLocation(),\n      pathname = _useLocation.pathname; // Getting the workflow nome from the pathname\n\n\n  var workflowRunId = pathname.split('/')[3];\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t; // get ProjectID\n\n\n  var selectedProjectID = useSelector(function (state) {\n    return state.userData.selectedProjectID;\n  });\n  var workflowDetailsTabValue = useSelector(function (state) {\n    return state.tabNumber.node;\n  }); // Query to get workflows\n\n  var _useQuery = useQuery(WORKFLOW_DETAILS, {\n    variables: {\n      projectID: selectedProjectID\n    }\n  }),\n      subscribeToMore = _useQuery.subscribeToMore,\n      data = _useQuery.data,\n      error = _useQuery.error;\n\n  var workflow = data === null || data === void 0 ? void 0 : data.getWorkFlowRuns.filter(function (w) {\n    return w.workflow_run_id === workflowRunId;\n  })[0]; // Using subscription to get realtime data\n\n  useEffect(function () {\n    if ((workflow === null || workflow === void 0 ? void 0 : workflow.execution_data) && JSON.parse(workflow === null || workflow === void 0 ? void 0 : workflow.execution_data).phase === 'Running') {\n      subscribeToMore({\n        document: WORKFLOW_EVENTS,\n        variables: {\n          projectID: selectedProjectID\n        },\n        updateQuery: function updateQuery(prev, _ref) {\n          var subscriptionData = _ref.subscriptionData;\n          if (!subscriptionData.data) return prev;\n          var modifiedWorkflows = prev.getWorkFlowRuns.slice();\n          var newWorkflow = subscriptionData.data.workflowEventListener; // Updating the query data\n\n          var i = 0;\n\n          for (; i < modifiedWorkflows.length; i++) {\n            if (modifiedWorkflows[i].workflow_run_id === newWorkflow.workflow_run_id) {\n              modifiedWorkflows[i] = newWorkflow;\n              break;\n            }\n          }\n\n          if (i === modifiedWorkflows.length) modifiedWorkflows.unshift(newWorkflow);\n          return _objectSpread(_objectSpread({}, prev), {}, {\n            getWorkFlowRuns: modifiedWorkflows\n          });\n        }\n      });\n    }\n  }, [data]);\n  var theme = useTheme();\n\n  var handleChange = function handleChange(event, newValue) {\n    tabs.changeWorkflowDetailsTabs(newValue);\n  }; // On fresh screen refresh 'Workflow' Tab would be selected\n\n\n  useEffect(function () {\n    tabs.changeWorkflowDetailsTabs(0);\n  }, []);\n  return /*#__PURE__*/React.createElement(Scaffold, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TopNavButtons, {\n    isToggled: isToggled,\n    setIsToggled: setIsToggled,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }), workflow ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.workflowGraph,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    \"data-cy\": \"wfName\",\n    className: classes.heading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }, workflow.workflow_name), /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }, t('workflowDetails.detailedLog')), /*#__PURE__*/React.createElement(ArgoWorkflow, {\n    nodes: JSON.parse(workflow.execution_data).nodes,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  })), isToggled.isInfoToggled ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.workflowSideBar,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(AppBar, {\n    position: \"static\",\n    color: \"default\",\n    className: classes.appBar,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Tabs, {\n    value: workflowDetailsTabValue || 0,\n    onChange: handleChange,\n    TabIndicatorProps: {\n      style: {\n        backgroundColor: theme.palette.secondary.dark\n      }\n    },\n    variant: \"fullWidth\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(StyledTab, {\n    label: \"Workflow\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(StyledTab, {\n    label: \"Nodes\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 19\n    }\n  }))), /*#__PURE__*/React.createElement(TabPanel, {\n    value: workflowDetailsTabValue,\n    index: 0,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    \"data-cy\": \"browseWorkflow\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(WorkflowInfo, {\n    workflow_name: workflow.workflow_name,\n    execution_data: JSON.parse(workflow === null || workflow === void 0 ? void 0 : workflow.execution_data),\n    cluster_name: workflow.cluster_name,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 19\n    }\n  }))), /*#__PURE__*/React.createElement(TabPanel, {\n    \"data-cy\": \"scheduleWorkflow\",\n    value: workflowDetailsTabValue,\n    index: 1,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    \"data-cy\": \"browseWorkflow\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(WorkflowNodeInfo, {\n    cluster_id: workflow.cluster_id,\n    workflow_run_id: workflow.workflow_run_id,\n    pod_namespace: JSON.parse(workflow.execution_data).namespace,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 19\n    }\n  })))) : /*#__PURE__*/React.createElement(React.Fragment, null)) : error ? /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }\n  }, t('workflowDetails.fetchError')) : /*#__PURE__*/React.createElement(Loader, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }\n  }));\n};\n\n_s(WorkflowDetails, \"GlOPhqJMuoHRTAXaldfCWCx/V0o=\", false, function () {\n  return [useStyles, useActions, useLocation, useTranslation, useSelector, useSelector, useQuery, useTheme];\n});\n\n_c = WorkflowDetails;\nexport default WorkflowDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"WorkflowDetails\");","map":{"version":3,"sources":["/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/pages/WorkflowDetails/index.tsx"],"names":["useQuery","AppBar","Typography","useTheme","Tabs","React","useEffect","useTranslation","useSelector","useLocation","Loader","StyledTab","TabPanel","Scaffold","WORKFLOW_DETAILS","WORKFLOW_EVENTS","useActions","TabActions","ArgoWorkflow","WorkflowInfo","WorkflowNodeInfo","useStyles","TopNavButtons","WorkflowDetails","classes","useState","isAnalyticsToggled","isExportToggled","isInfoToggled","isToggled","setIsToggled","tabs","pathname","workflowRunId","split","t","selectedProjectID","state","userData","workflowDetailsTabValue","tabNumber","node","variables","projectID","subscribeToMore","data","error","workflow","getWorkFlowRuns","filter","w","workflow_run_id","execution_data","JSON","parse","phase","document","updateQuery","prev","subscriptionData","modifiedWorkflows","slice","newWorkflow","workflowEventListener","i","length","unshift","theme","handleChange","event","newValue","changeWorkflowDetailsTabs","root","workflowGraph","heading","workflow_name","nodes","workflowSideBar","appBar","style","backgroundColor","palette","secondary","dark","cluster_name","cluster_id","namespace"],"mappings":";;;;;;;AAAA,SAASA,QAAT,QAAyB,gBAAzB;AACA,SAASC,MAAT,EAAiBC,UAAjB,EAA6BC,QAA7B,QAA6C,mBAA7C;AACA,OAAOC,IAAP,MAAiB,6BAAjB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,uBAApC;AACA,OAAOC,QAAP,MAAqB,mCAArB;AACA,SAASC,gBAAT,EAA2BC,eAA3B,QAAkD,eAAlD;AAOA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,OAAO,KAAKC,UAAZ,MAA4B,0BAA5B;AAEA,OAAOC,YAAP,MAAyB,0CAAzB;AACA,OAAOC,YAAP,MAAyB,0CAAzB;AACA,OAAOC,gBAAP,MAA6B,8CAA7B;AACA,OAAOC,SAAP,MAAsB,UAAtB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;AAQA,IAAMC,eAAyB,GAAG,SAA5BA,eAA4B,GAAM;AAAA;;AACtC,MAAMC,OAAO,GAAGH,SAAS,EAAzB;;AADsC,wBAGJhB,KAAK,CAACoB,QAAN,CAAmC;AACnEC,IAAAA,kBAAkB,EAAE,KAD+C;AAEnEC,IAAAA,eAAe,EAAE,KAFkD;AAGnEC,IAAAA,aAAa,EAAE;AAHoD,GAAnC,CAHI;AAAA;AAAA,MAG/BC,SAH+B;AAAA,MAGpBC,YAHoB;;AAStC,MAAMC,IAAI,GAAGf,UAAU,CAACC,UAAD,CAAvB;;AATsC,qBAUjBR,WAAW,EAVM;AAAA,MAU9BuB,QAV8B,gBAU9BA,QAV8B,EAWtC;;;AACA,MAAMC,aAAa,GAAGD,QAAQ,CAACE,KAAT,CAAe,GAAf,EAAoB,CAApB,CAAtB;;AAZsC,wBAaxB3B,cAAc,EAbU;AAAA,MAa9B4B,CAb8B,mBAa9BA,CAb8B,EAetC;;;AACA,MAAMC,iBAAiB,GAAG5B,WAAW,CACnC,UAAC6B,KAAD;AAAA,WAAsBA,KAAK,CAACC,QAAN,CAAeF,iBAArC;AAAA,GADmC,CAArC;AAGA,MAAMG,uBAAuB,GAAG/B,WAAW,CACzC,UAAC6B,KAAD;AAAA,WAAsBA,KAAK,CAACG,SAAN,CAAgBC,IAAtC;AAAA,GADyC,CAA3C,CAnBsC,CAuBtC;;AAvBsC,kBAwBGzC,QAAQ,CAC/Cc,gBAD+C,EAE/C;AAAE4B,IAAAA,SAAS,EAAE;AAAEC,MAAAA,SAAS,EAAEP;AAAb;AAAb,GAF+C,CAxBX;AAAA,MAwB9BQ,eAxB8B,aAwB9BA,eAxB8B;AAAA,MAwBbC,IAxBa,aAwBbA,IAxBa;AAAA,MAwBPC,KAxBO,aAwBPA,KAxBO;;AA6BtC,MAAMC,QAAQ,GAAGF,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEG,eAAN,CAAsBC,MAAtB,CACf,UAACC,CAAD;AAAA,WAAOA,CAAC,CAACC,eAAF,KAAsBlB,aAA7B;AAAA,GADe,EAEf,CAFe,CAAjB,CA7BsC,CAiCtC;;AACA3B,EAAAA,SAAS,CAAC,YAAM;AACd,QACE,CAAAyC,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEK,cAAV,KACCC,IAAI,CAACC,KAAL,CAAWP,QAAX,aAAWA,QAAX,uBAAWA,QAAQ,CAAEK,cAArB,CAAD,CAAwDG,KAAxD,KACE,SAHJ,EAIE;AACAX,MAAAA,eAAe,CAAuB;AACpCY,QAAAA,QAAQ,EAAEzC,eAD0B;AAEpC2B,QAAAA,SAAS,EAAE;AAAEC,UAAAA,SAAS,EAAEP;AAAb,SAFyB;AAGpCqB,QAAAA,WAAW,EAAE,qBAACC,IAAD,QAAgC;AAAA,cAAvBC,gBAAuB,QAAvBA,gBAAuB;AAC3C,cAAI,CAACA,gBAAgB,CAACd,IAAtB,EAA4B,OAAOa,IAAP;AAC5B,cAAME,iBAAiB,GAAGF,IAAI,CAACV,eAAL,CAAqBa,KAArB,EAA1B;AACA,cAAMC,WAAW,GAAGH,gBAAgB,CAACd,IAAjB,CAAsBkB,qBAA1C,CAH2C,CAK3C;;AACA,cAAIC,CAAC,GAAG,CAAR;;AACA,iBAAOA,CAAC,GAAGJ,iBAAiB,CAACK,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,gBACEJ,iBAAiB,CAACI,CAAD,CAAjB,CAAqBb,eAArB,KACAW,WAAW,CAACX,eAFd,EAGE;AACAS,cAAAA,iBAAiB,CAACI,CAAD,CAAjB,GAAuBF,WAAvB;AACA;AACD;AACF;;AACD,cAAIE,CAAC,KAAKJ,iBAAiB,CAACK,MAA5B,EACEL,iBAAiB,CAACM,OAAlB,CAA0BJ,WAA1B;AAEF,iDAAYJ,IAAZ;AAAkBV,YAAAA,eAAe,EAAEY;AAAnC;AACD;AAvBmC,OAAvB,CAAf;AAyBD;AACF,GAhCQ,EAgCN,CAACf,IAAD,CAhCM,CAAT;AAkCA,MAAMsB,KAAK,GAAGhE,QAAQ,EAAtB;;AAEA,MAAMiE,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAA+BC,QAA/B,EAAoD;AACvEvC,IAAAA,IAAI,CAACwC,yBAAL,CAA+BD,QAA/B;AACD,GAFD,CAtEsC,CA0EtC;;;AACAhE,EAAAA,SAAS,CAAC,YAAM;AACdyB,IAAAA,IAAI,CAACwC,yBAAL,CAA+B,CAA/B;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AAAe,IAAA,SAAS,EAAE1C,SAA1B;AAAqC,IAAA,YAAY,EAAEC,YAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAGGiB,QAAQ,gBACP;AAAK,IAAA,SAAS,EAAEvB,OAAO,CAACgD,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAEhD,OAAO,CAACiD,aAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,eAAQ,QAApB;AAA6B,IAAA,SAAS,EAAEjD,OAAO,CAACkD,OAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG3B,QAAQ,CAAC4B,aADZ,CADF,eAIE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAaxC,CAAC,CAAC,6BAAD,CAAd,CAJF,eAOE,oBAAC,YAAD;AACE,IAAA,KAAK,EACFkB,IAAI,CAACC,KAAL,CAAWP,QAAQ,CAACK,cAApB,CAAD,CAAuDwB,KAF3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF,EAcG/C,SAAS,CAACD,aAAV,gBACC;AAAK,IAAA,SAAS,EAAEJ,OAAO,CAACqD,eAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,QAAQ,EAAC,QADX;AAEE,IAAA,KAAK,EAAC,SAFR;AAGE,IAAA,SAAS,EAAErD,OAAO,CAACsD,MAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAEvC,uBAAuB,IAAI,CADpC;AAEE,IAAA,QAAQ,EAAE6B,YAFZ;AAGE,IAAA,iBAAiB,EAAE;AACjBW,MAAAA,KAAK,EAAE;AACLC,QAAAA,eAAe,EAAEb,KAAK,CAACc,OAAN,CAAcC,SAAd,CAAwBC;AADpC;AADU,KAHrB;AAQE,IAAA,OAAO,EAAC,WARV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAUE,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAC,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,eAWE,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,CALF,CADF,eAoBE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAE5C,uBAAjB;AAA0C,IAAA,KAAK,EAAE,CAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,eAAQ,gBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AACE,IAAA,aAAa,EAAEQ,QAAQ,CAAC4B,aAD1B;AAEE,IAAA,cAAc,EACZtB,IAAI,CAACC,KAAL,CAAWP,QAAX,aAAWA,QAAX,uBAAWA,QAAQ,CAAEK,cAArB,CAHJ;AAKE,IAAA,YAAY,EAAEL,QAAQ,CAACqC,YALzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CApBF,eA+BE,oBAAC,QAAD;AACE,eAAQ,kBADV;AAEE,IAAA,KAAK,EAAE7C,uBAFT;AAGE,IAAA,KAAK,EAAE,CAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE;AAAK,eAAQ,gBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,gBAAD;AACE,IAAA,UAAU,EAAEQ,QAAQ,CAACsC,UADvB;AAEE,IAAA,eAAe,EAAEtC,QAAQ,CAACI,eAF5B;AAGE,IAAA,aAAa,EACVE,IAAI,CAACC,KAAL,CAAWP,QAAQ,CAACK,cAApB,CAAD,CACGkC,SALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CALF,CA/BF,CADD,gBAkDC,yCAhEJ,CADO,GAoELxC,KAAK,gBACP,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAaX,CAAC,CAAC,4BAAD,CAAd,CADO,gBAGP,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA1EJ,CADF;AA+ED,CA9JD;;GAAMZ,e;UACYF,S,EAQHL,U,EACQP,W,EAGPF,c,EAGYC,W,EAGMA,W,EAKSR,Q,EA4C3BG,Q;;;KApEVoB,e;AAgKN,eAAeA,eAAf","sourcesContent":["import { useQuery } from '@apollo/client';\nimport { AppBar, Typography, useTheme } from '@material-ui/core';\nimport Tabs from '@material-ui/core/Tabs/Tabs';\nimport React, { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport Loader from '../../components/Loader';\nimport { StyledTab, TabPanel } from '../../components/Tabs';\nimport Scaffold from '../../containers/layouts/Scaffold';\nimport { WORKFLOW_DETAILS, WORKFLOW_EVENTS } from '../../graphql';\nimport {\n  ExecutionData,\n  Workflow,\n  WorkflowDataVars,\n  WorkflowSubscription,\n} from '../../models/graphql/workflowData';\nimport useActions from '../../redux/actions';\nimport * as TabActions from '../../redux/actions/tabs';\nimport { RootState } from '../../redux/reducers';\nimport ArgoWorkflow from '../../views/WorkflowDetails/ArgoWorkflow';\nimport WorkflowInfo from '../../views/WorkflowDetails/WorkflowInfo';\nimport WorkflowNodeInfo from '../../views/WorkflowDetails/WorkflowNodeInfo';\nimport useStyles from './styles';\nimport TopNavButtons from './TopNavButtons';\n\ninterface TopNavButtonsProps {\n  isAnalyticsToggled: boolean;\n  isExportToggled: boolean;\n  isInfoToggled: boolean;\n}\n\nconst WorkflowDetails: React.FC = () => {\n  const classes = useStyles();\n\n  const [isToggled, setIsToggled] = React.useState<TopNavButtonsProps>({\n    isAnalyticsToggled: false,\n    isExportToggled: false,\n    isInfoToggled: false,\n  });\n\n  const tabs = useActions(TabActions);\n  const { pathname } = useLocation();\n  // Getting the workflow nome from the pathname\n  const workflowRunId = pathname.split('/')[3];\n  const { t } = useTranslation();\n\n  // get ProjectID\n  const selectedProjectID = useSelector(\n    (state: RootState) => state.userData.selectedProjectID\n  );\n  const workflowDetailsTabValue = useSelector(\n    (state: RootState) => state.tabNumber.node\n  );\n\n  // Query to get workflows\n  const { subscribeToMore, data, error } = useQuery<Workflow, WorkflowDataVars>(\n    WORKFLOW_DETAILS,\n    { variables: { projectID: selectedProjectID } }\n  );\n\n  const workflow = data?.getWorkFlowRuns.filter(\n    (w) => w.workflow_run_id === workflowRunId\n  )[0];\n\n  // Using subscription to get realtime data\n  useEffect(() => {\n    if (\n      workflow?.execution_data &&\n      (JSON.parse(workflow?.execution_data) as ExecutionData).phase ===\n        'Running'\n    ) {\n      subscribeToMore<WorkflowSubscription>({\n        document: WORKFLOW_EVENTS,\n        variables: { projectID: selectedProjectID },\n        updateQuery: (prev, { subscriptionData }) => {\n          if (!subscriptionData.data) return prev;\n          const modifiedWorkflows = prev.getWorkFlowRuns.slice();\n          const newWorkflow = subscriptionData.data.workflowEventListener;\n\n          // Updating the query data\n          let i = 0;\n          for (; i < modifiedWorkflows.length; i++) {\n            if (\n              modifiedWorkflows[i].workflow_run_id ===\n              newWorkflow.workflow_run_id\n            ) {\n              modifiedWorkflows[i] = newWorkflow;\n              break;\n            }\n          }\n          if (i === modifiedWorkflows.length)\n            modifiedWorkflows.unshift(newWorkflow);\n\n          return { ...prev, getWorkFlowRuns: modifiedWorkflows };\n        },\n      });\n    }\n  }, [data]);\n\n  const theme = useTheme();\n\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    tabs.changeWorkflowDetailsTabs(newValue);\n  };\n\n  // On fresh screen refresh 'Workflow' Tab would be selected\n  useEffect(() => {\n    tabs.changeWorkflowDetailsTabs(0);\n  }, []);\n\n  return (\n    <Scaffold>\n      <TopNavButtons isToggled={isToggled} setIsToggled={setIsToggled} />\n      {/* If workflow data is present then display the workflow details */}\n      {workflow ? (\n        <div className={classes.root}>\n          <div className={classes.workflowGraph}>\n            <Typography data-cy=\"wfName\" className={classes.heading}>\n              {workflow.workflow_name}\n            </Typography>\n            <Typography>{t('workflowDetails.detailedLog')}</Typography>\n\n            {/* Argo Workflow DAG Graph */}\n            <ArgoWorkflow\n              nodes={\n                (JSON.parse(workflow.execution_data) as ExecutionData).nodes\n              }\n            />\n          </div>\n          {isToggled.isInfoToggled ? (\n            <div className={classes.workflowSideBar}>\n              <AppBar\n                position=\"static\"\n                color=\"default\"\n                className={classes.appBar}\n              >\n                <Tabs\n                  value={workflowDetailsTabValue || 0}\n                  onChange={handleChange}\n                  TabIndicatorProps={{\n                    style: {\n                      backgroundColor: theme.palette.secondary.dark,\n                    },\n                  }}\n                  variant=\"fullWidth\"\n                >\n                  <StyledTab label=\"Workflow\" />\n                  <StyledTab label=\"Nodes\" />\n                </Tabs>\n              </AppBar>\n              <TabPanel value={workflowDetailsTabValue} index={0}>\n                <div data-cy=\"browseWorkflow\">\n                  <WorkflowInfo\n                    workflow_name={workflow.workflow_name}\n                    execution_data={\n                      JSON.parse(workflow?.execution_data) as ExecutionData\n                    }\n                    cluster_name={workflow.cluster_name}\n                  />\n                </div>\n              </TabPanel>\n              <TabPanel\n                data-cy=\"scheduleWorkflow\"\n                value={workflowDetailsTabValue}\n                index={1}\n              >\n                <div data-cy=\"browseWorkflow\">\n                  <WorkflowNodeInfo\n                    cluster_id={workflow.cluster_id}\n                    workflow_run_id={workflow.workflow_run_id}\n                    pod_namespace={\n                      (JSON.parse(workflow.execution_data) as ExecutionData)\n                        .namespace\n                    }\n                  />\n                </div>\n              </TabPanel>\n            </div>\n          ) : (\n            <></>\n          )}\n        </div>\n      ) : error ? (\n        <Typography>{t('workflowDetails.fetchError')}</Typography>\n      ) : (\n        <Loader />\n      )}\n    </Scaffold>\n  );\n};\n\nexport default WorkflowDetails;\n"]},"metadata":{},"sourceType":"module"}