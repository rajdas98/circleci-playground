{"ast":null,"code":"import _objectSpread from \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/components/WelcomeModal/Stepper.tsx\";\n\nimport { useMutation } from '@apollo/client/react/hooks';\nimport MobileStepper from '@material-ui/core/MobileStepper';\nimport React, { useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport config from '../../config';\nimport { CREATE_USER } from '../../graphql';\nimport useActions from '../../redux/actions';\nimport * as UserActions from '../../redux/actions/user';\nimport getToken from '../../utils/getToken';\nimport { validateConfirmPassword, validateEmail, validateStartEmptySpacing } from '../../utils/validate';\nimport ButtonFilled from '../Button/ButtonFilled';\nimport ButtonOutline from '../Button/ButtonOutline';\nimport InputField from '../InputField';\nimport ModalPage from './Modalpage';\nimport useStyles from './styles';\n\nvar CStepper = function CStepper(_ref) {\n  var handleModal = _ref.handleModal;\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var userData = useSelector(function (state) {\n    return state.userData;\n  });\n  var userLoader = useActions(UserActions);\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      activeStep = _React$useState2[0],\n      setActiveStep = _React$useState2[1];\n\n  var isError = useRef(true);\n  var isSuccess = useRef(false);\n\n  var _React$useState3 = React.useState({\n    username: userData.username,\n    email: userData.email,\n    name: userData.name,\n    project_name: ''\n  }),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      info = _React$useState4[0],\n      setInfo = _React$useState4[1];\n\n  var handleBack = function handleBack() {\n    setActiveStep(function (prevActiveStep) {\n      return prevActiveStep - 1;\n    });\n  };\n\n  var _React$useState5 = React.useState({\n    password: '',\n    confirmPassword: ''\n  }),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      values = _React$useState6[0],\n      setValues = _React$useState6[1];\n\n  var handleNext = function handleNext() {\n    if (activeStep === 2 && values.confirmPassword !== values.password) {\n      isError.current = true;\n    } else {\n      setActiveStep(function (prevActiveStep) {\n        return prevActiveStep + 1;\n      });\n    }\n  };\n\n  var rerender = function rerender() {\n    window.location.reload();\n  };\n\n  var _useMutation = useMutation(CREATE_USER, {\n    onCompleted: function onCompleted() {\n      rerender();\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      CreateUser = _useMutation2[0]; // Submit entered data to /update endpoint\n\n\n  var handleSubmit = function handleSubmit() {\n    Object.assign(info, {\n      password: values.password\n    });\n    userLoader.updateUserDetails({\n      loader: true\n    });\n    fetch(\"\".concat(config.auth.url, \"/update/details\"), {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: \"Bearer \".concat(getToken())\n      },\n      body: JSON.stringify({\n        username: userData.username,\n        email: info.email,\n        name: info.name,\n        password: values.password\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      if ('error' in data) {\n        isError.current = true;\n      } else {\n        CreateUser({\n          variables: {\n            user: {\n              username: userData.username,\n              email: info.email,\n              name: info.name,\n              project_name: info.project_name\n            }\n          }\n        });\n      }\n    }).catch(function (err) {\n      isError.current = true;\n      console.error(err);\n    });\n    handleModal();\n  };\n\n  var setData = function setData(key, value) {\n    var data = info;\n    data = _objectSpread(_objectSpread({}, data), {}, {\n      [key]: value\n    });\n    setInfo(data);\n  }; // Custom Button Validation\n  // If first character is empty then all the successive letters would\n  // be treated as an error and button would be disabled\n  // If the length is 0 then button would be disabled\n  // [Button State: Disabled]\n\n\n  if (activeStep === 0) {\n    if (info.project_name.length > 0 && validateStartEmptySpacing(info.project_name) === false) {\n      isError.current = false;\n    } else {\n      isError.current = true;\n    }\n  } // If first character is empty then all the successive letters would\n  // be treated as an error and button would be disabled\n  // If the length is 0 then button would be disabled\n  // Back Button: [Button State: Enabled]\n  // Continue Button: [Button State: Disabled]\n\n\n  if (activeStep === 1) {\n    if (info.name.length > 0 && validateStartEmptySpacing(info.name) === false) {\n      isError.current = false;\n    } else {\n      isError.current = true;\n    }\n  } // If password is less than 6 characters and does not contain\n  // an alpha numeric character as well as a number\n  // then button would be disabled\n  // If the two passwords are not same then button would be disabled\n  // Back Button: [Button State: Enabled]\n  // Continue Button: [Button State: Disabled]\n\n\n  if (activeStep === 2) {\n    if (values.password.length > 0 && values.confirmPassword.length > 0 && // validatePassword(values.password) === false &&\n    validateConfirmPassword(values.password, values.confirmPassword) === false) {\n      isError.current = false;\n      isSuccess.current = true;\n    } else {\n      isError.current = true;\n      isSuccess.current = false;\n    }\n  } // If entered email is not a valid email then button would be disabled\n  // Skip Button: [Button State: Enabled]\n  // Let's Start Button: [Button State: Disabled]\n\n\n  if (activeStep === 3) {\n    if (info.email.length > 0 && validateEmail(info.email) === false) {\n      isError.current = false;\n    } else {\n      isError.current = true;\n    }\n  } // Render buttons based on active step\n\n\n  var selectiveButtons = function selectiveButtons() {\n    if (activeStep === 0) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.buttonDiv,\n        \"data-cy\": \"Continue\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(ButtonFilled, {\n        isPrimary: true,\n        isDisabled: isError.current,\n        handleClick: handleNext,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 13\n        }\n      }, t('welcomeModal.button.continue'))));\n    }\n\n    if (activeStep === 3) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.buttonDiv,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        \"data-cy\": \"backButton\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(ButtonOutline, {\n        isDisabled: false,\n        handleClick: handleBack,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(React.Fragment, null, t('welcomeModal.button.back')))), /*#__PURE__*/React.createElement(\"div\", {\n        \"data-cy\": \"startButton\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(ButtonFilled, {\n        isPrimary: true,\n        isDisabled: isError.current,\n        handleClick: handleSubmit,\n        \"data-cy\": \"Start\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 15\n        }\n      }, t('welcomeModal.button.letsStart')))));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.buttonDiv,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      \"data-cy\": \"backButton\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ButtonOutline, {\n      isDisabled: false,\n      handleClick: handleBack,\n      \"data-cy\": \"Back\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, t('welcomeModal.button.back')))), /*#__PURE__*/React.createElement(\"div\", {\n      \"data-cy\": \"startButton\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ButtonFilled, {\n      isPrimary: true,\n      isDisabled: isError.current,\n      handleClick: handleNext,\n      \"data-cy\": \"Continue\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 13\n      }\n    }, t('welcomeModal.button.continue')))));\n  }; // Submit on Enter Key-press\n\n\n  var keyPress = function keyPress(e) {\n    if (e.key === 'Enter' && isError.current === false) {\n      if (activeStep === 0) {\n        handleNext();\n        return;\n      }\n\n      if (activeStep === 3) {\n        handleSubmit();\n        return;\n      }\n\n      handleNext();\n    }\n  }; // Content of the steps based on active step count\n\n\n  var getStepContent = function getStepContent(step) {\n    switch (step) {\n      case 0:\n        return /*#__PURE__*/React.createElement(ModalPage, {\n          renderMenu: /*#__PURE__*/React.createElement(\"div\", {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(\"div\", {\n            className: classes.inputArea,\n            \"data-cy\": \"InputProjectName\",\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(InputField, {\n            label: t('welcomeModal.case-0.label'),\n            value: info.project_name,\n            required: true,\n            helperText: validateStartEmptySpacing(info.project_name) ? 'Should not start with an empty space' : '',\n            validationError: validateStartEmptySpacing(info.project_name),\n            type: \"text\",\n            handleChange: function handleChange(event) {\n              setData('project_name', event.target.value);\n            },\n            onKeyPress: keyPress,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 19\n            }\n          })), selectiveButtons()),\n          setName: userData.username === 'admin' ? 'Administrator' : userData.username,\n          setText: t('welcomeModal.case-0.info'),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 11\n          }\n        });\n\n      case 1:\n        return /*#__PURE__*/React.createElement(ModalPage, {\n          renderMenu: /*#__PURE__*/React.createElement(\"div\", {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(\"div\", {\n            className: classes.inputArea,\n            \"data-cy\": \"InputName\",\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(InputField, {\n            label: t('welcomeModal.case-1.label'),\n            value: info.name,\n            required: true,\n            helperText: validateStartEmptySpacing(info.name) ? 'Should not start with an empty space' : '',\n            validationError: validateStartEmptySpacing(info.name),\n            handleChange: function handleChange(event) {\n              setData('name', event.target.value);\n            },\n            onKeyPress: keyPress,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 19\n            }\n          })), selectiveButtons()),\n          setName: info.name,\n          setText: t('welcomeModal.case-1.info'),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 11\n          }\n        });\n\n      case 2:\n        return /*#__PURE__*/React.createElement(ModalPage, {\n          renderMenu: /*#__PURE__*/React.createElement(\"div\", {\n            className: classes.passwordSetterDiv,\n            \"data-cy\": \"InputPassword\",\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(\"div\", {\n            className: classes.passwordArea,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 340,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(InputField, {\n            label: t('welcomeModal.case-2.label'),\n            type: \"password\",\n            required: true,\n            validationError: false,\n            value: values.password,\n            success: isSuccess.current,\n            handleChange: function handleChange(event) {\n              return setValues({\n                password: event.target.value,\n                confirmPassword: values.confirmPassword\n              });\n            },\n            onKeyPress: keyPress,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 341,\n              columnNumber: 19\n            }\n          })), /*#__PURE__*/React.createElement(\"div\", {\n            className: classes.passwordArea,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(InputField, {\n            label: t('welcomeModal.case-2.cnfLabel'),\n            type: \"password\",\n            required: true,\n            value: values.confirmPassword,\n            helperText: validateConfirmPassword(values.password, values.confirmPassword) ? 'Password is not same' : '',\n            success: isSuccess.current,\n            validationError: // validatePassword(values.confirmPassword) &&\n            validateConfirmPassword(values.password, values.confirmPassword),\n            handleChange: function handleChange(event) {\n              return setValues({\n                password: values.password,\n                confirmPassword: event.target.value\n              });\n            },\n            onKeyPress: keyPress,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 19\n            }\n          })), selectiveButtons()),\n          setName: info.name,\n          setText: t('welcomeModal.case-2.info'),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 11\n          }\n        });\n\n      case 3:\n        return /*#__PURE__*/React.createElement(ModalPage, {\n          renderMenu: /*#__PURE__*/React.createElement(\"div\", {\n            className: classes.passwordSetterDiv,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 399,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(\"div\", {\n            className: classes.inputArea,\n            \"data-cy\": \"InputEmail\",\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 400,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(InputField, {\n            label: t('welcomeModal.case-3.label'),\n            required: true,\n            value: info.email,\n            helperText: validateEmail(info.email) ? 'Should be a valid email' : '',\n            validationError: validateEmail(info.email),\n            handleChange: function handleChange(event) {\n              setData('email', event.target.value);\n            },\n            onKeyPress: keyPress,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 401,\n              columnNumber: 19\n            }\n          })), selectiveButtons()) // pass here corresponding name of user\n          ,\n          setName: info.name,\n          setText: t('welcomeModal.case-3.info'),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 11\n          }\n        });\n\n      default:\n        return /*#__PURE__*/React.createElement(Link, {\n          to: \"/404\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 425,\n            columnNumber: 16\n          }\n        });\n    }\n  };\n  /*\n    The Stepper which can modify modal content\n    based on active step\n  */\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 7\n    }\n  }, activeStep === 1 ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 11\n    }\n  }, getStepContent(activeStep)) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 11\n    }\n  }, getStepContent(activeStep))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.stepper,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MobileStepper, {\n    variant: \"dots\",\n    steps: 4,\n    position: \"static\",\n    activeStep: activeStep,\n    nextButton: handleNext,\n    backButton: handleBack,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default CStepper;","map":{"version":3,"sources":["/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/components/WelcomeModal/Stepper.tsx"],"names":["useMutation","MobileStepper","React","useRef","useTranslation","useSelector","Link","config","CREATE_USER","useActions","UserActions","getToken","validateConfirmPassword","validateEmail","validateStartEmptySpacing","ButtonFilled","ButtonOutline","InputField","ModalPage","useStyles","CStepper","handleModal","classes","t","userData","state","userLoader","useState","activeStep","setActiveStep","isError","isSuccess","username","email","name","project_name","info","setInfo","handleBack","prevActiveStep","password","confirmPassword","values","setValues","handleNext","current","rerender","window","location","reload","onCompleted","CreateUser","handleSubmit","Object","assign","updateUserDetails","loader","fetch","auth","url","method","headers","Authorization","body","JSON","stringify","then","response","json","data","variables","user","catch","err","console","error","setData","key","value","length","selectiveButtons","buttonDiv","keyPress","e","getStepContent","step","inputArea","event","target","passwordSetterDiv","passwordArea","stepper"],"mappings":"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","sourcesContent":["import { useMutation } from '@apollo/client/react/hooks';\nimport MobileStepper from '@material-ui/core/MobileStepper';\nimport React, { useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport config from '../../config';\nimport { CREATE_USER } from '../../graphql';\nimport { CreateUserData } from '../../models/graphql/user';\nimport useActions from '../../redux/actions';\nimport * as UserActions from '../../redux/actions/user';\nimport { RootState } from '../../redux/reducers';\nimport getToken from '../../utils/getToken';\nimport {\n  validateConfirmPassword,\n  validateEmail,\n  validateStartEmptySpacing,\n} from '../../utils/validate';\nimport ButtonFilled from '../Button/ButtonFilled';\nimport ButtonOutline from '../Button/ButtonOutline';\nimport InputField from '../InputField';\nimport ModalPage from './Modalpage';\nimport useStyles from './styles';\n\ninterface CStepperProps {\n  handleModal: () => void;\n}\nconst CStepper: React.FC<CStepperProps> = ({ handleModal }) => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n\n  const userData = useSelector((state: RootState) => state.userData);\n  const userLoader = useActions(UserActions);\n  const [activeStep, setActiveStep] = React.useState<number>(0);\n  const isError = useRef(true);\n  const isSuccess = useRef(false);\n\n  const [info, setInfo] = React.useState<CreateUserData>({\n    username: userData.username,\n    email: userData.email,\n    name: userData.name,\n    project_name: '',\n  });\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n  };\n\n  const [values, setValues] = React.useState({\n    password: '',\n    confirmPassword: '',\n  });\n\n  const handleNext = () => {\n    if (activeStep === 2 && values.confirmPassword !== values.password) {\n      isError.current = true;\n    } else {\n      setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    }\n  };\n  const rerender = () => {\n    window.location.reload();\n  };\n\n  const [CreateUser] = useMutation<CreateUserData>(CREATE_USER, {\n    onCompleted: () => {\n      rerender();\n    },\n  });\n\n  // Submit entered data to /update endpoint\n  const handleSubmit = () => {\n    Object.assign(info, { password: values.password });\n    userLoader.updateUserDetails({ loader: true });\n\n    fetch(`${config.auth.url}/update/details`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${getToken()}`,\n      },\n      body: JSON.stringify({\n        username: userData.username,\n        email: info.email,\n        name: info.name,\n        password: values.password,\n      }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if ('error' in data) {\n          isError.current = true;\n        } else {\n          CreateUser({\n            variables: {\n              user: {\n                username: userData.username,\n                email: info.email,\n                name: info.name,\n                project_name: info.project_name,\n              },\n            },\n          });\n        }\n      })\n      .catch((err) => {\n        isError.current = true;\n        console.error(err);\n      });\n\n    handleModal();\n  };\n\n  const setData = (key: string, value: string) => {\n    let data = info;\n    data = {\n      ...data,\n      [key]: value,\n    };\n    setInfo(data);\n  };\n\n  // Custom Button Validation\n\n  // If first character is empty then all the successive letters would\n  // be treated as an error and button would be disabled\n  // If the length is 0 then button would be disabled\n  // [Button State: Disabled]\n  if (activeStep === 0) {\n    if (\n      info.project_name.length > 0 &&\n      validateStartEmptySpacing(info.project_name) === false\n    ) {\n      isError.current = false;\n    } else {\n      isError.current = true;\n    }\n  }\n\n  // If first character is empty then all the successive letters would\n  // be treated as an error and button would be disabled\n  // If the length is 0 then button would be disabled\n  // Back Button: [Button State: Enabled]\n  // Continue Button: [Button State: Disabled]\n  if (activeStep === 1) {\n    if (\n      info.name.length > 0 &&\n      validateStartEmptySpacing(info.name) === false\n    ) {\n      isError.current = false;\n    } else {\n      isError.current = true;\n    }\n  }\n\n  // If password is less than 6 characters and does not contain\n  // an alpha numeric character as well as a number\n  // then button would be disabled\n  // If the two passwords are not same then button would be disabled\n  // Back Button: [Button State: Enabled]\n  // Continue Button: [Button State: Disabled]\n  if (activeStep === 2) {\n    if (\n      values.password.length > 0 &&\n      values.confirmPassword.length > 0 &&\n      // validatePassword(values.password) === false &&\n      validateConfirmPassword(values.password, values.confirmPassword) === false\n    ) {\n      isError.current = false;\n      isSuccess.current = true;\n    } else {\n      isError.current = true;\n      isSuccess.current = false;\n    }\n  }\n\n  // If entered email is not a valid email then button would be disabled\n  // Skip Button: [Button State: Enabled]\n  // Let's Start Button: [Button State: Disabled]\n  if (activeStep === 3) {\n    if (info.email.length > 0 && validateEmail(info.email) === false) {\n      isError.current = false;\n    } else {\n      isError.current = true;\n    }\n  }\n\n  // Render buttons based on active step\n  const selectiveButtons = () => {\n    if (activeStep === 0) {\n      return (\n        <div className={classes.buttonDiv} data-cy=\"Continue\">\n          <ButtonFilled\n            isPrimary\n            isDisabled={isError.current}\n            handleClick={handleNext}\n          >\n            <div>{t('welcomeModal.button.continue')}</div>\n          </ButtonFilled>\n        </div>\n      );\n    }\n    if (activeStep === 3) {\n      return (\n        <div className={classes.buttonDiv}>\n          <div data-cy=\"backButton\">\n            <ButtonOutline isDisabled={false} handleClick={handleBack}>\n              <>{t('welcomeModal.button.back')}</>\n            </ButtonOutline>\n          </div>\n          <div data-cy=\"startButton\">\n            <ButtonFilled\n              isPrimary\n              isDisabled={isError.current}\n              handleClick={handleSubmit}\n              data-cy=\"Start\"\n            >\n              <div>{t('welcomeModal.button.letsStart')}</div>\n            </ButtonFilled>\n          </div>\n        </div>\n      );\n    }\n    return (\n      <div className={classes.buttonDiv}>\n        <div data-cy=\"backButton\">\n          <ButtonOutline\n            isDisabled={false}\n            handleClick={handleBack}\n            data-cy=\"Back\"\n          >\n            <>{t('welcomeModal.button.back')}</>\n          </ButtonOutline>\n        </div>\n        <div data-cy=\"startButton\">\n          <ButtonFilled\n            isPrimary\n            isDisabled={isError.current}\n            handleClick={handleNext}\n            data-cy=\"Continue\"\n          >\n            <div>{t('welcomeModal.button.continue')}</div>\n          </ButtonFilled>\n        </div>\n      </div>\n    );\n  };\n\n  // Submit on Enter Key-press\n  const keyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && isError.current === false) {\n      if (activeStep === 0) {\n        handleNext();\n        return;\n      }\n      if (activeStep === 3) {\n        handleSubmit();\n        return;\n      }\n      handleNext();\n    }\n  };\n\n  // Content of the steps based on active step count\n  const getStepContent = (step: number) => {\n    switch (step) {\n      case 0:\n        return (\n          <ModalPage\n            renderMenu={\n              <div>\n                <div className={classes.inputArea} data-cy=\"InputProjectName\">\n                  <InputField\n                    label={t('welcomeModal.case-0.label')}\n                    value={info.project_name}\n                    required\n                    helperText={\n                      validateStartEmptySpacing(info.project_name)\n                        ? 'Should not start with an empty space'\n                        : ''\n                    }\n                    validationError={validateStartEmptySpacing(\n                      info.project_name\n                    )}\n                    type=\"text\"\n                    handleChange={(event) => {\n                      setData('project_name', event.target.value);\n                    }}\n                    onKeyPress={keyPress}\n                  />\n                </div>\n                {selectiveButtons()}\n              </div>\n            }\n            setName={\n              userData.username === 'admin'\n                ? 'Administrator'\n                : userData.username\n            }\n            setText={t('welcomeModal.case-0.info')}\n          />\n        );\n      case 1:\n        return (\n          <ModalPage\n            renderMenu={\n              <div>\n                <div className={classes.inputArea} data-cy=\"InputName\">\n                  <InputField\n                    label={t('welcomeModal.case-1.label')}\n                    value={info.name}\n                    required\n                    helperText={\n                      validateStartEmptySpacing(info.name)\n                        ? 'Should not start with an empty space'\n                        : ''\n                    }\n                    validationError={validateStartEmptySpacing(info.name)}\n                    handleChange={(event) => {\n                      setData('name', event.target.value);\n                    }}\n                    onKeyPress={keyPress}\n                  />\n                </div>\n                {selectiveButtons()}\n              </div>\n            }\n            setName={info.name}\n            setText={t('welcomeModal.case-1.info')}\n          />\n        );\n      case 2:\n        return (\n          <ModalPage\n            renderMenu={\n              <div\n                className={classes.passwordSetterDiv}\n                data-cy=\"InputPassword\"\n              >\n                <div className={classes.passwordArea}>\n                  <InputField\n                    label={t('welcomeModal.case-2.label')}\n                    type=\"password\"\n                    required\n                    validationError={false}\n                    value={values.password}\n                    success={isSuccess.current}\n                    handleChange={(event) =>\n                      setValues({\n                        password: event.target.value,\n                        confirmPassword: values.confirmPassword,\n                      })\n                    }\n                    onKeyPress={keyPress}\n                  />\n                </div>\n                <div className={classes.passwordArea}>\n                  <InputField\n                    label={t('welcomeModal.case-2.cnfLabel')}\n                    type=\"password\"\n                    required\n                    value={values.confirmPassword}\n                    helperText={\n                      validateConfirmPassword(\n                        values.password,\n                        values.confirmPassword\n                      )\n                        ? 'Password is not same'\n                        : ''\n                    }\n                    success={isSuccess.current}\n                    validationError={\n                      // validatePassword(values.confirmPassword) &&\n                      validateConfirmPassword(\n                        values.password,\n                        values.confirmPassword\n                      )\n                    }\n                    handleChange={(event) =>\n                      setValues({\n                        password: values.password,\n                        confirmPassword: event.target.value,\n                      })\n                    }\n                    onKeyPress={keyPress}\n                  />\n                </div>\n                {selectiveButtons()}\n              </div>\n            }\n            setName={info.name}\n            setText={t('welcomeModal.case-2.info')}\n          />\n        );\n      case 3:\n        return (\n          <ModalPage\n            renderMenu={\n              <div className={classes.passwordSetterDiv}>\n                <div className={classes.inputArea} data-cy=\"InputEmail\">\n                  <InputField\n                    label={t('welcomeModal.case-3.label')}\n                    required\n                    value={info.email}\n                    helperText={\n                      validateEmail(info.email) ? 'Should be a valid email' : ''\n                    }\n                    validationError={validateEmail(info.email)}\n                    handleChange={(event) => {\n                      setData('email', event.target.value);\n                    }}\n                    onKeyPress={keyPress}\n                  />\n                </div>\n                {selectiveButtons()}\n              </div>\n            }\n            // pass here corresponding name of user\n            setName={info.name}\n            setText={t('welcomeModal.case-3.info')}\n          />\n        );\n\n      default:\n        return <Link to=\"/404\" />;\n    }\n  };\n\n  /*\n    The Stepper which can modify modal content\n    based on active step\n  */\n  return (\n    <div>\n      <div>\n        {activeStep === 1 ? (\n          <div>{getStepContent(activeStep)}</div>\n        ) : (\n          <div>{getStepContent(activeStep)}</div>\n        )}\n      </div>\n      <div className={classes.stepper}>\n        <MobileStepper\n          variant=\"dots\"\n          steps={4}\n          position=\"static\"\n          activeStep={activeStep}\n          nextButton={handleNext}\n          backButton={handleBack}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default CStepper;\n"]},"metadata":{},"sourceType":"module"}