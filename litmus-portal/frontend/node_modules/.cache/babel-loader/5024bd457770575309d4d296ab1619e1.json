{"ast":null,"code":"import _slicedToArray from \"/home/raj/.nvm/versions/node/v12.18.2/lib/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/views/CreateWorkflow/ChooseWorkflow/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { Typography } from '@material-ui/core';\nimport Divider from '@material-ui/core/Divider';\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport ButtonFilled from '../../../components/Button/ButtonFilled';\nimport ButtonOutline from '../../../components/Button/ButtonOutline';\nimport InputField from '../../../components/InputField';\nimport PredifinedWorkflows from '../../../components/PredifinedWorkflows';\nimport workflowsList from '../../../components/PredifinedWorkflows/data';\nimport Unimodal from '../../../containers/layouts/Unimodal';\nimport useActions from '../../../redux/actions';\nimport * as TemplateSelectionActions from '../../../redux/actions/template';\nimport * as WorkflowActions from '../../../redux/actions/workflow';\nimport { validateWorkflowName } from '../../../utils/validate';\nimport useStyles, { CssTextField } from './styles'; // import { getWkfRunCount } from \"../../utils\";\n\nvar ChooseWorkflow = function ChooseWorkflow() {\n  _s();\n\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var workflow = useActions(WorkflowActions);\n  var template = useActions(TemplateSelectionActions);\n  var isDisable = useSelector(function (state) {\n    return state.selectTemplate.isDisable;\n  });\n  var selectedTemplateID = useSelector(function (state) {\n    return state.selectTemplate.selectedTemplateID;\n  });\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      open = _React$useState2[0],\n      setOpen = _React$useState2[1];\n\n  var isSuccess = React.useRef(false);\n\n  var _useState = useState({\n    workflowName: 'Personal Workflow Name',\n    workflowDesc: 'Personal Description'\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      workflowDetails = _useState2[0],\n      setWorkflowData = _useState2[1];\n\n  var WorkflowNameChangeHandler = function WorkflowNameChangeHandler(event) {\n    setWorkflowData({\n      workflowName: event.target.value,\n      workflowDesc: workflowDetails.workflowDesc\n    });\n  };\n\n  var WorkflowDescriptionChangeHandler = function WorkflowDescriptionChangeHandler(event) {\n    setWorkflowData({\n      workflowName: workflowDetails.workflowName,\n      workflowDesc: event.target.value\n    });\n  };\n\n  var handleSave = function handleSave() {\n    if (isSuccess.current) {\n      workflow.setWorkflowDetails({\n        name: workflowDetails.workflowName,\n        description: workflowDetails.workflowDesc\n      });\n      setOpen(false);\n    }\n  };\n  /*\n  const { analyticsData } = useSelector(\n  (state: RootState) => state\n  );\n  */\n\n\n  if (validateWorkflowName(workflowDetails.workflowName) === false) isSuccess.current = true;else isSuccess.current = false;\n  useEffect(function () {\n    workflow.setWorkflowDetails({\n      name: 'Personal Workflow Name',\n      description: 'Personal Workflow Description',\n      yaml: '#You can start creating your own workflow from here.',\n      weights: [],\n      link: '',\n      id: '',\n      isCustomWorkflow: true\n    });\n  }, []); // Sets workflow details based on user clicks\n\n  var selectWorkflow = function selectWorkflow(index) {\n    template.selectTemplate({\n      selectedTemplateID: index,\n      isDisable: false\n    });\n    var timeStampBasedWorkflowName = \"argowf-chaos-\".concat(workflowsList[index].title, \"-\").concat(Math.round(new Date().getTime() / 1000));\n    workflow.setWorkflowDetails({\n      name: timeStampBasedWorkflowName,\n      link: workflowsList[index].chaosWkfCRDLink,\n      id: workflowsList[index].workflowID,\n      yaml: 'none',\n      description: workflowsList[index].description,\n      isCustomWorkflow: workflowsList[index].isCustom\n    });\n    setWorkflowData({\n      workflowName: timeStampBasedWorkflowName,\n      workflowDesc: workflowsList[index].description\n    });\n\n    if (workflowsList[index].isCustom === true) {\n      setOpen(true);\n    }\n  }; // Set pre-highlighter for initial render based on isDisable field\n\n\n  useEffect(function () {\n    var index = selectedTemplateID;\n    var timeStampBasedWorkflowName = \"argowf-chaos-\".concat(workflowsList[index].title, \"-\").concat(Math.round(new Date().getTime() / 1000));\n    workflow.setWorkflowDetails({\n      name: timeStampBasedWorkflowName,\n      link: workflowsList[index].chaosWkfCRDLink,\n      id: workflowsList[index].workflowID,\n      yaml: 'none',\n      description: workflowsList[index].description,\n      isCustomWorkflow: workflowsList[index].isCustom\n    });\n    setWorkflowData({\n      workflowName: timeStampBasedWorkflowName,\n      workflowDesc: workflowsList[index].description\n    });\n  }, [isDisable]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.heading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }, t('createWorkflow.chooseWorkflow.header'))), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.description,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, t('createWorkflow.chooseWorkflow.info')), /*#__PURE__*/React.createElement(Divider, {\n    variant: \"middle\",\n    className: classes.horizontalLine,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.cards,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.totalWorkflows,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }\n  }, workflowsList.length, ' ', t('createWorkflow.chooseWorkflow.preDefined')), /*#__PURE__*/React.createElement(PredifinedWorkflows, {\n    callbackOnSelectWorkflow: function callbackOnSelectWorkflow(index) {\n      selectWorkflow(index);\n    },\n    workflows: workflowsList,\n    isCustomWorkflowVisible: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.paddedTop,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ButtonFilled, {\n    handleClick: function handleClick() {\n      setOpen(true);\n    },\n    isPrimary: false,\n    isDisabled: isDisable,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 15\n    }\n  }, t('createWorkflow.chooseWorkflow.button.edit'))), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.saved,\n    display: \"inline\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 17\n    }\n  }, \" \\xA0 \\xA0 \\u2713\"), \" \\xA0\", ' ', t('createWorkflow.chooseWorkflow.saved'), \" \\\"\", /*#__PURE__*/React.createElement(Typography, {\n    id: \"SetName\",\n    className: classes.selectionName,\n    display: \"inline\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 19\n    }\n  }, workflowDetails.workflowName)), \"\\\"\"))))), /*#__PURE__*/React.createElement(Unimodal, {\n    open: open,\n    handleClose: function handleClose() {\n      return setOpen(false);\n    },\n    hasCloseBtn: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.modalHeading,\n    display: \"inline\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 11\n    }\n  }, t('createWorkflow.chooseWorkflow.modalHeading'), ' ', /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }\n  }, t('createWorkflow.chooseWorkflow.modalHeadingStrong'))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.modalContainerBody,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.inputDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InputField // id=\"filled-workflowname-input\"\n  , {\n    label: t('createWorkflow.chooseWorkflow.label.workflowName'),\n    styles: {\n      width: '100%'\n    },\n    \"data-cy\": \"inputWorkflow\",\n    helperText: validateWorkflowName(workflowDetails.workflowName) ? 'Should not contain spaces or upper case letters' : '',\n    success: isSuccess.current,\n    validationError: validateWorkflowName(workflowDetails.workflowName) // className={classes.textfieldworkflowname}\n    ,\n    handleChange: WorkflowNameChangeHandler,\n    value: workflowDetails.workflowName,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.inputAreaDescription,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(CssTextField, {\n    id: \"filled-workflowdescription-input\",\n    label: t('createWorkflow.chooseWorkflow.label.desc'),\n    InputProps: {\n      disableUnderline: true,\n      classes: {\n        input: classes.resize\n      }\n    },\n    \"data-cy\": \"inputWorkflowDescription\",\n    className: classes.textfieldworkflowdescription,\n    value: workflowDetails.workflowDesc,\n    onChange: WorkflowDescriptionChangeHandler,\n    multiline: true,\n    rows: 12,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.buttons,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.cancelButton,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ButtonOutline, {\n    handleClick: function handleClick() {\n      return setOpen(false);\n    },\n    isDisabled: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 19\n    }\n  }, t('createWorkflow.chooseWorkflow.button.cancel')))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.saveButton,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ButtonFilled, {\n    isPrimary: false,\n    isDisabled: !isSuccess.current,\n    handleClick: function handleClick() {\n      return handleSave();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 19\n    }\n  }, t('createWorkflow.chooseWorkflow.button.save')))))))));\n};\n\n_s(ChooseWorkflow, \"3s1Qe6WAMMkWl/vO9ZvP7R0Di/4=\", false, function () {\n  return [useStyles, useTranslation, useActions, useActions, useSelector, useSelector];\n});\n\n_c = ChooseWorkflow;\nexport default ChooseWorkflow;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChooseWorkflow\");","map":{"version":3,"sources":["/home/raj/go/src/github.com/litmuschaos/litmus/litmus-portal/frontend/src/views/CreateWorkflow/ChooseWorkflow/index.tsx"],"names":["Typography","Divider","React","useEffect","useState","useSelector","useTranslation","ButtonFilled","ButtonOutline","InputField","PredifinedWorkflows","workflowsList","Unimodal","useActions","TemplateSelectionActions","WorkflowActions","validateWorkflowName","useStyles","CssTextField","ChooseWorkflow","classes","t","workflow","template","isDisable","state","selectTemplate","selectedTemplateID","open","setOpen","isSuccess","useRef","workflowName","workflowDesc","workflowDetails","setWorkflowData","WorkflowNameChangeHandler","event","target","value","WorkflowDescriptionChangeHandler","handleSave","current","setWorkflowDetails","name","description","yaml","weights","link","id","isCustomWorkflow","selectWorkflow","index","timeStampBasedWorkflowName","title","Math","round","Date","getTime","chaosWkfCRDLink","workflowID","isCustom","root","heading","horizontalLine","cards","totalWorkflows","length","paddedTop","saved","selectionName","modalHeading","modalContainerBody","inputDiv","width","inputAreaDescription","disableUnderline","input","resize","textfieldworkflowdescription","buttons","cancelButton","saveButton"],"mappings":"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","sourcesContent":["import { Typography } from '@material-ui/core';\nimport Divider from '@material-ui/core/Divider';\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport ButtonFilled from '../../../components/Button/ButtonFilled';\nimport ButtonOutline from '../../../components/Button/ButtonOutline';\nimport InputField from '../../../components/InputField';\nimport PredifinedWorkflows from '../../../components/PredifinedWorkflows';\nimport workflowsList from '../../../components/PredifinedWorkflows/data';\nimport Unimodal from '../../../containers/layouts/Unimodal';\nimport useActions from '../../../redux/actions';\nimport * as TemplateSelectionActions from '../../../redux/actions/template';\nimport * as WorkflowActions from '../../../redux/actions/workflow';\nimport { RootState } from '../../../redux/reducers';\nimport { validateWorkflowName } from '../../../utils/validate';\nimport useStyles, { CssTextField } from './styles';\n\n// import { getWkfRunCount } from \"../../utils\";\n\nconst ChooseWorkflow: React.FC = () => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n\n  const workflow = useActions(WorkflowActions);\n  const template = useActions(TemplateSelectionActions);\n  const isDisable = useSelector(\n    (state: RootState) => state.selectTemplate.isDisable\n  );\n  const selectedTemplateID = useSelector(\n    (state: RootState) => state.selectTemplate.selectedTemplateID\n  );\n\n  const [open, setOpen] = React.useState(false);\n  const isSuccess = React.useRef<boolean>(false);\n  const [workflowDetails, setWorkflowData] = useState({\n    workflowName: 'Personal Workflow Name',\n    workflowDesc: 'Personal Description',\n  });\n\n  const WorkflowNameChangeHandler = (\n    event: React.ChangeEvent<{ value: string }>\n  ) => {\n    setWorkflowData({\n      workflowName: (event.target as HTMLInputElement).value,\n      workflowDesc: workflowDetails.workflowDesc,\n    });\n  };\n\n  const WorkflowDescriptionChangeHandler = (\n    event: React.ChangeEvent<{ value: string }>\n  ) => {\n    setWorkflowData({\n      workflowName: workflowDetails.workflowName,\n      workflowDesc: (event.target as HTMLInputElement).value,\n    });\n  };\n\n  const handleSave = () => {\n    if (isSuccess.current) {\n      workflow.setWorkflowDetails({\n        name: workflowDetails.workflowName,\n        description: workflowDetails.workflowDesc,\n      });\n      setOpen(false);\n    }\n  };\n\n  /*\n\tconst { analyticsData } = useSelector(\n\t\t(state: RootState) => state\n\t);\n  */\n\n  if (validateWorkflowName(workflowDetails.workflowName) === false)\n    isSuccess.current = true;\n  else isSuccess.current = false;\n\n  useEffect(() => {\n    workflow.setWorkflowDetails({\n      name: 'Personal Workflow Name',\n      description: 'Personal Workflow Description',\n      yaml: '#You can start creating your own workflow from here.',\n      weights: [],\n      link: '',\n      id: '',\n      isCustomWorkflow: true,\n    });\n  }, []);\n\n  // Sets workflow details based on user clicks\n  const selectWorkflow = (index: number) => {\n    template.selectTemplate({ selectedTemplateID: index, isDisable: false });\n\n    const timeStampBasedWorkflowName: string = `argowf-chaos-${\n      workflowsList[index].title\n    }-${Math.round(new Date().getTime() / 1000)}`;\n\n    workflow.setWorkflowDetails({\n      name: timeStampBasedWorkflowName,\n      link: workflowsList[index].chaosWkfCRDLink,\n      id: workflowsList[index].workflowID,\n      yaml: 'none',\n      description: workflowsList[index].description,\n      isCustomWorkflow: workflowsList[index].isCustom,\n    });\n\n    setWorkflowData({\n      workflowName: timeStampBasedWorkflowName,\n      workflowDesc: workflowsList[index].description,\n    });\n\n    if (workflowsList[index].isCustom === true) {\n      setOpen(true);\n    }\n  };\n\n  // Set pre-highlighter for initial render based on isDisable field\n  useEffect(() => {\n    const index = selectedTemplateID;\n\n    const timeStampBasedWorkflowName: string = `argowf-chaos-${\n      workflowsList[index].title\n    }-${Math.round(new Date().getTime() / 1000)}`;\n    workflow.setWorkflowDetails({\n      name: timeStampBasedWorkflowName,\n      link: workflowsList[index].chaosWkfCRDLink,\n      id: workflowsList[index].workflowID,\n      yaml: 'none',\n      description: workflowsList[index].description,\n      isCustomWorkflow: workflowsList[index].isCustom,\n    });\n\n    setWorkflowData({\n      workflowName: timeStampBasedWorkflowName,\n      workflowDesc: workflowsList[index].description,\n    });\n  }, [isDisable]);\n\n  return (\n    <div>\n      <div className={classes.root}>\n        <Typography className={classes.heading}>\n          <strong>{t('createWorkflow.chooseWorkflow.header')}</strong>\n        </Typography>\n        <Typography className={classes.description}>\n          {t('createWorkflow.chooseWorkflow.info')}\n        </Typography>\n        <Divider variant=\"middle\" className={classes.horizontalLine} />\n        <div className={classes.cards}>\n          <Typography className={classes.totalWorkflows}>\n            {workflowsList.length}{' '}\n            {t('createWorkflow.chooseWorkflow.preDefined')}\n          </Typography>\n          <PredifinedWorkflows\n            callbackOnSelectWorkflow={(index: number) => {\n              selectWorkflow(index);\n            }}\n            workflows={workflowsList}\n            isCustomWorkflowVisible\n          />\n          <div className={classes.paddedTop}>\n            <ButtonFilled\n              handleClick={() => {\n                setOpen(true);\n              }}\n              isPrimary={false}\n              isDisabled={isDisable}\n            >\n              <div>{t('createWorkflow.chooseWorkflow.button.edit')}</div>\n            </ButtonFilled>\n            <Typography className={classes.saved} display=\"inline\">\n              <strong>\n                <span> &nbsp; &nbsp; &#10003;</span> &nbsp;{' '}\n                {t('createWorkflow.chooseWorkflow.saved')} &quot;\n                <Typography\n                  id=\"SetName\"\n                  className={classes.selectionName}\n                  display=\"inline\"\n                >\n                  <strong>{workflowDetails.workflowName}</strong>\n                </Typography>\n                &quot;\n              </strong>\n            </Typography>\n          </div>\n        </div>\n      </div>\n      <Unimodal open={open} handleClose={() => setOpen(false)} hasCloseBtn>\n        <div>\n          <Typography className={classes.modalHeading} display=\"inline\">\n            {t('createWorkflow.chooseWorkflow.modalHeading')}{' '}\n            <strong>\n              {t('createWorkflow.chooseWorkflow.modalHeadingStrong')}\n            </strong>\n          </Typography>\n          <div className={classes.modalContainerBody}>\n            <div className={classes.inputDiv}>\n              <InputField\n                // id=\"filled-workflowname-input\"\n                label={t('createWorkflow.chooseWorkflow.label.workflowName')}\n                styles={{\n                  width: '100%',\n                }}\n                data-cy=\"inputWorkflow\"\n                helperText={\n                  validateWorkflowName(workflowDetails.workflowName)\n                    ? 'Should not contain spaces or upper case letters'\n                    : ''\n                }\n                success={isSuccess.current}\n                validationError={validateWorkflowName(\n                  workflowDetails.workflowName\n                )}\n                // className={classes.textfieldworkflowname}\n                handleChange={WorkflowNameChangeHandler}\n                value={workflowDetails.workflowName}\n              />\n              <div className={classes.inputAreaDescription}>\n                <CssTextField\n                  id=\"filled-workflowdescription-input\"\n                  label={t('createWorkflow.chooseWorkflow.label.desc')}\n                  InputProps={{\n                    disableUnderline: true,\n                    classes: {\n                      input: classes.resize,\n                    },\n                  }}\n                  data-cy=\"inputWorkflowDescription\"\n                  className={classes.textfieldworkflowdescription}\n                  value={workflowDetails.workflowDesc}\n                  onChange={WorkflowDescriptionChangeHandler}\n                  multiline\n                  rows={12}\n                />\n              </div>\n            </div>\n            <div className={classes.buttons}>\n              <div className={classes.cancelButton}>\n                <ButtonOutline\n                  handleClick={() => setOpen(false)}\n                  isDisabled={false}\n                >\n                  <div>{t('createWorkflow.chooseWorkflow.button.cancel')}</div>\n                </ButtonOutline>\n              </div>\n              <div className={classes.saveButton}>\n                <ButtonFilled\n                  isPrimary={false}\n                  isDisabled={!isSuccess.current}\n                  handleClick={() => handleSave()}\n                >\n                  <div>{t('createWorkflow.chooseWorkflow.button.save')}</div>\n                </ButtonFilled>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Unimodal>\n    </div>\n  );\n};\n\nexport default ChooseWorkflow;\n"]},"metadata":{},"sourceType":"module"}